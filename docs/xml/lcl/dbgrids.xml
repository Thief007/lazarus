<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    DBGrids
  ====================================================================
-->
    <module name="DBGrids">
      <short>Data-Aware Grids to display and operate on information held in a database</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="stdctrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="DB">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Grids">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInvalidGridOperation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomDbGrid">
        <short>
          <var>TCustomDBGrid</var> - the Base class for <var>TDBGrid,</var> a data-aware component for displaying information from a database in the manner of a <var>Stringrid</var>
        </short>
        <seealso>
          <link id="#lcl.DBCtrls.HowToUseDataAwareControls">HowToUseDataAwareControls</link>
          <link id="#lcl.Grids.HowToUseGrids">HowToUseGrids</link>
        </seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TColumn">
        <short>
          <var>TColumn </var>- one of the physical columns of the display in a DataBase Grid</short>
        <descr>
          <p>
            <var>TColumn </var>- one of the physical columns of the display in a DataBase Grid</p>
          <p>Each column may display the information held in a Field of the DataSet to which the DBGrid is attached, but the order of appearance of the columns need not correspond to the order in which the Fields exist in the DataSet, nor need all Fields be represented by a Column.</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDataSetScrolledEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataSetScrolledEvent.DataSet">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataSetScrolledEvent.Distance">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDBGridClickEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGridClickEvent.Column">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TMovedEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMovedEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMovedEvent.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMovedEvent.ToIndex">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDrawColumnCellEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawColumnCellEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawColumnCellEvent.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawColumnCellEvent.DataCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawColumnCellEvent.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawColumnCellEvent.State">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetDbEditMaskEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetDbEditMaskEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetDbEditMaskEvent.Field">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetDbEditMaskEvent.Value">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TColumnButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsAuto">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsEllipsis">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnButtonStyle.cbsNone">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDBGridOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgEditing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgTitles">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgIndicator">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgColumnMove">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgHeaderHotTracking">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgHeaderPushedLook">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgColumnResize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgColLines">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgRowLines">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgTabs">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgAlwaysShowEditor">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgRowSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgAlwaysShowSelection">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgConfirmDelete">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgCancelOnExit">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridOption.dgMultiselect">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDbGridExtraOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDbGridExtraOption.dgeAutoColumns">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDbGridExtraOption.dgeCheckboxColumn">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TDbGridExtraOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TDbGridOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDbGridStatusItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDbGridStatusItem.gsUpdatingData">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDbGridStatusItem.gsAddingAutoColumns">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDbGridStatusItem.gsRemovingAutoColumns">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TDbGridStatus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDBGridCheckBoxState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridCheckBoxState.gcbpUnChecked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridCheckBoxState.gcbpChecked">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDBGridCheckBoxState.gcbpGrayed">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TUserCheckBoxBitmapEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUserCheckBoxBitmapEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUserCheckBoxBitmapEvent.CheckedState">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUserCheckBoxBitmapEvent.ABitmap">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDbGridSelEditorEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridSelEditorEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridSelEditorEvent.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridSelEditorEvent.Editor">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TPrepareDbGridCanvasEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPrepareDbGridCanvasEvent.sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPrepareDbGridCanvasEvent.DataCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPrepareDbGridCanvasEvent.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPrepareDbGridCanvasEvent.AState">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBookmarkList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBookmarkList.FList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBookmarkList.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBookmarkList.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBookmarkList.GetCurrentRowSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.GetCurrentRowSelected.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBookmarkList.GetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.GetItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.GetItem.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBookmarkList.SetCurrentRowSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.SetCurrentRowSelected.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBookmarkList.CheckActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBookmarkList.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.Create.AGrid">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TBookmarkList.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TBookmarkList.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TBookmarkList.Delete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBookmarkList.Find">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.Find.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.Find.Item">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.Find.AIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBookmarkList.IndexOf">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.IndexOf.Item">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBookmarkList.Refresh">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBookmarkList.Refresh.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBookmarkList.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBookmarkList.CurrentRowSelected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBookmarkList.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBookmarkList.Items.AIndex">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCellButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCellButton.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCellButton.msg_SetGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCellButton.msg_SetGrid.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCellButton.msg_SetPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCellButton.msg_SetPos.Msg">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <!-- enumeration type Visibility: default -->
      <element name="TColumnOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnOrder.coDesignOrder">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnOrder.coFieldIndexOrder">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TComponentDataLink">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FDataSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FDataSetName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnDatasetChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.fOnDataSetClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.fOnDataSetOpen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnDataSetScrolled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnEditingChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.fOnInvalidDataSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.fOnInvalidDataSource">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnLayoutChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.fOnNewDataSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnRecordChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComponentDataLink.FOnUpdateData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TComponentDataLink.GetDataSetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TComponentDataLink.GetDataSetName.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TComponentDataLink.GetFields">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TComponentDataLink.GetFields.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.GetFields.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TComponentDataLink.SetDataSetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.SetDataSetName.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.RecordChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.RecordChanged.Field">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.DataSetChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.ActiveChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.LayoutChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.DataSetScrolled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.DataSetScrolled.Distance">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.FocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.FocusControl.Field">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.CheckBrowseMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.EditingChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TComponentDataLink.UpdateData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TComponentDataLink.MoveBy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TComponentDataLink.MoveBy.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.MoveBy.Distance">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TComponentDataLink.Modified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnRecordChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnDataSetChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnNewDataSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnDataSetOpen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnInvalidDataSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnInvalidDataSource">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnLayoutChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnDataSetClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnDataSetScrolled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnEditingChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.OnUpdateData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.DataSetName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.Fields">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComponentDataLink.Fields.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TComponentDataLink.VisualControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TColumnTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FIsDefaultTitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumnTitle.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.FontChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.GetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetCaption.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.GetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetColor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.GetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.GetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetLayout.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.IsAlignmentStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsAlignmentStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.IsCaptionStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsCaptionStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.IsColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsColorStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.IsFontStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsFontStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumnTitle.IsLayoutStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsLayoutStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.SetAlignment.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.SetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.SetCaption.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.SetColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumnTitle.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.SetLayout.AValue">
        <short/>
      </element>
      <!-- property Visibility: private -->
      <element name="TColumnTitle.IsDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TColumnTitle.GetDefaultCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.GetDefaultCaption.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TColumnTitle.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumnTitle.Create.TheColumn">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TColumnTitle.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TColumnTitle.FillTitleDefaultFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TColumnTitle.IsDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumnTitle.IsDefault.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TColumnTitle.Column">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumnTitle.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumnTitle.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumnTitle.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumnTitle.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumnTitle.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FDropDownRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FFieldName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FField">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FisDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FPickList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FMinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FMaxSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FSizePriority">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.FontChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetColor.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetExpanded.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetField">
        <short>Find which field's data is to be displayed in this column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetFont.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetGrid.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetLayout.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetMaxSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetMaxSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetMinSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetSizePriority">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetSizePriority.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetPickList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetPickList.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetReadOnly.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetVisible.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsAlignmentStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsAlignmentStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsColorStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsFontStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsFontStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsLayoutStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsLayoutStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsMinSizeStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsMinSizeStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsMaxSizeStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsMaxSizeStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsReadOnlyStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsReadOnlyStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsSizePriorityStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsSizePriorityStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsVisibleStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsVisibleStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsWidthStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsWidthStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetAlignment.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetButtonStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetButtonStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetExpanded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetExpanded.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetFieldName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetFieldName.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetLayout.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetMaxSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetMaxSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetMinSize.Avalue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetPickList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetPickList.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetReadOnly.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetSizePriority">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetSizePriority.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetWidth.AValue">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDataSet">
        <short>Find which DataSet is to be used</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDataSet.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDefaultReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultReadOnly.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDefaultWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDefaultMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultMinSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDefaultMaxSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultMaxSize.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDefaultSizePriority">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultSizePriority.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.CreateTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.CreateTitle.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDisplayName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDisplayName.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColumn.FieldChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColumn.LinkField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TColumn.IsDefaultFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TColumn.Create">
        <short>Creates a new instance of this collection item.</short>
        <descr>
          <var>Create</var> instantiates a new item in a <link id="TCollection"/>. It
is called by the <link id="TCollection.Add"/> function and should under
normal circumstances never be called directly.

</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.Create.ACollection">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TColumn.Destroy">
        <short>Destroys this collection item.</short>
        <descr>
          <p>
            <var>Destroy</var> removes the item from the managing collection 
and Destroys the item instance. 
</p>
          <p>This is the only way to remove items from a collection;
</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TColumn.FillDefaultFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TColumn.IsDefault">
        <short>Is this the default column for consideration in this DB grid?</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsDefault.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TColumn.Grid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TColumn.Field">
        <short>The <var>Field </var>in the <var>DataSet</var> that is to be associated with this <var>Column</var>, for display , editinig etc</short>
        <descr>Refers to the whole entity <var>Field</var>, including contents, name, position in the dataset, properties such as read/write enabling etc
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FDisplayFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FDisplayFormatChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FIsAutomaticColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FDesignIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FValueChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColumn.FValueUnchecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.ApplyDisplayFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetDisplayFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDisplayFormat.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetIsDesignColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetIsDesignColumn.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetValueChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetValueChecked.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.GetValueUnchecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetValueUnchecked.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsDisplayFormatStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsDisplayFormatStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsValueCheckedStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsValueCheckedStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TColumn.IsValueUncheckedStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.IsValueUncheckedStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetDisplayFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetDisplayFormat.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetValueChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetValueChecked.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColumn.SetValueUnchecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.SetValueUnchecked.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColumn.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColumn.Assign.Source">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDefaultAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultAlignment.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDefaultDisplayFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultDisplayFormat.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDefaultValueChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultValueChecked.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDefaultValueUnchecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultValueUnchecked.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TColumn.GetDefaultVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColumn.GetDefaultVisible.Result">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TColumn.IsAutomaticColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TColumn.IsDesignColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TColumn.DesignIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.DisplayFormat">
        <short>The format to be used for display in this column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.ValueChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.ValueUnchecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.ButtonStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.DropDownRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Expanded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.FieldName">
        <short>The name of the field (as a string), as returned from the dataset</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.MinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.MaxSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.PickList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.SizePriority">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Title">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColumn.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDbGridColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDbGridColumns.FGrid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDbGridColumns.GetColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.GetColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.GetColumn.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDbGridColumns.GetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.GetEnabled.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDbGridColumns.SetColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.SetColumn.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.SetColumn.Value">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDbGridColumns.GetVisibleCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.GetVisibleCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDbGridColumns.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.Update.Item">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDbGridColumns.ColumnFromField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.ColumnFromField.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.ColumnFromField.Field">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDbGridColumns.TitleFontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDbGridColumns.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDbGridColumns.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.Create.TheGrid">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDbGridColumns.Add">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.Add.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDbGridColumns.LinkFields">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDbGridColumns.RealIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.RealIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.RealIndex.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDbGridColumns.IsDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDbGridColumns.IsDefault.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDbGridColumns.Grid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDbGridColumns.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDbGridColumns.Items.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDbGridColumns.VisibleCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDbGridColumns.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBGridColumns.HasAutomaticColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBGridColumns.HasAutomaticColumns.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDBGridColumns.HasDesignColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDBGridColumns.HasDesignColumns.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDBGridColumns.RemoveAutoColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDBGridColumns.ResetColumnsOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDBGridColumns.ResetColumnsOrder.ColumnOrder">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomDbGrid">
        <short>
          <var>TCustomDBGrid </var>    - the base class for <var>TDBGrid</var>   , for displaying database information in the manner of a <var>StringGrid</var>
        </short>
        <seealso>
          <link id="#lcl.DBCtrls.HowToUseDataAwareControls">HowToUseDataAwareControls</link>
          <link id="#lcl.Grids.HowToUseGrids">HowToUseGrids</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FDataLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnCellClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnColEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnColExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnColumnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnDrawColumnCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnFieldEditMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOnTitleClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FColEnterPending">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FLayoutChangedCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FVisualChangeCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FSelectionLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FTitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FLastFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FButtonEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FStringEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FTempText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FDrawingActiveRecord">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FEditingColumn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDbGrid.FOldPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetCurrentField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetCurrentField.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetDataSource.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetRecordCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetRecordCount.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnRecordChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnRecordChanged.Field">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnDataSetChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnDataSetChanged.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnDataSetOpen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnDataSetOpen.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnDataSetClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnDataSetClose.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnEditingChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnEditingChanged.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnInvalidDataSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnInvalidDataSet.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnInvalidDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnInvalidDataSource.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnLayoutChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnLayoutChanged.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnNewDataSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnNewDataSet.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnDataSetScrolled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnDataSetScrolled.aDataSet">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnDataSetScrolled.Distance">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnUpdateData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnUpdateData.aDataSet">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.ReadColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ReadColumns.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetColumns.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.SetCurrentField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetCurrentField.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.SetDataSource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetDataSource.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.SetOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.SetTitleFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetTitleFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.UpdateBufferCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.UpdateData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnAlignment.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnAlignment.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnAlignment.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnColor.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnColor.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnFont.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnFont.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnFont.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnLayout.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnLayout.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnLayout.ForTitle">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnTitle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnTitle.Column">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnWidth.Column">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetColumnReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetColumnReadOnly.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetColumnReadOnly.Column">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.DefaultFieldColWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.DefaultFieldColWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultFieldColWidth.F">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetDsFieldFromGridColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetDsFieldFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetDsFieldFromGridColumn.Column">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetFieldFromGridColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetFieldFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetFieldFromGridColumn.Column">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.GetGridColumnFromField">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetGridColumnFromField.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetGridColumnFromField.F">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.FieldIndexFromGridColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.FieldIndexFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.FieldIndexFromGridColumn.Column">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.UpdateGridColumnSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.UpdateScrollbarRange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.BeginVisualChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.EndVisualChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.DoLayoutChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.WriteColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.WriteColumns.Writer">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.OnTitleFontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.OnTitleFontChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDbGrid.RestoreEditor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDbGrid.ISEOF">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.ISEOF.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.BeforeMoveSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.BeforeMoveSelection.DCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.BeforeMoveSelection.DRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.BeginLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.CellClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.CellClick.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.CellClick.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.ChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ChangeBounds.ALeft">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ChangeBounds.ATop">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ChangeBounds.AWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ChangeBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.ColRowMoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ColRowMoved.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ColRowMoved.FromIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ColRowMoved.ToIndex">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.CreateColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.CreateColumns.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.ColumnIndexFromGridColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.ColumnIndexFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ColumnIndexFromGridColumn.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.ColumnFromGridColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.ColumnFromGridColumn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ColumnFromGridColumn.Column">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefineProperties.Filer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DefaultDrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DoOnChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DrawByRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawFocusRect.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawFocusRect.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawFocusRect.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DrawRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawRow.ARow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawCell.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawCell.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DrawCell.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.EditButtonClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.EditButtonClicked.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.EditingColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.EditingColumn.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.EditingColumn.Ok">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.EditorCancelEditing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.EditordoGetValue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.EditorCanAcceptKey">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.EditorCanAcceptKey.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.EditorCanAcceptKey.ch">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.EditorIsReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.EditorIsReadOnly.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.EndLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.GetAutoFillColumnInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetAutoFillColumnInfo.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetAutoFillColumnInfo.aMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetAutoFillColumnInfo.aMax">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetAutoFillColumnInfo.aPriority">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.GetEditMask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetEditMask.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetEditMask.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetEditMask.aRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.GetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GetEditText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetEditText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.GetEditText.aRow">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.GridCanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.GridCanModify.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.HeaderClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.HeaderClick.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.HeaderClick.index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.HeaderSized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.HeaderSized.IsColumn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.HeaderSized.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.KeyDown.Key">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.KeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.LinkActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.LinkActive.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.LayoutChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.MoveSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.PrepareCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.PrepareCanvas.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.PrepareCanvas.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.PrepareCanvas.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.SelectEditor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.SetEditText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetEditText.ACol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetEditText.ARow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SetEditText.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.ScrollBarAutomatic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.ScrollBarAutomatic.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.ScrollBarAutomatic.Which">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.SelectCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.SelectCell.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SelectCell.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.SelectCell.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.UpdateActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDbGrid.UpdateGridCounts">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDbGrid.UpdateGridCounts.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.UpdateVertScrollbar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.UpdateVertScrollbar.aVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.UpdateVertScrollbar.aRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.UpdateVertScrollbar.aPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.VisualChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDbGrid.WMVScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.WMVScroll.Message">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.DataSource">
        <short>The DataSource from which this grid displays - usually the result of a  database Query</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.ReadOnly">
        <short>Set True to prevent writing to grid; set False to allow modification</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.TitleFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnCellClick">
        <short>Event handler for mouse click in a cell of the grid</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnColEnter">
        <short>Event handler if mouse enters column or it gains focus</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnColExit">
        <short>Event handler if mouse leaves column or it loses focus</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnColumnMoved">
        <short>
          <var>OnColumnMoved</var> - event handler for moving a column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnDrawColumnCell">
        <short>Event handler if the cell in this column requires to be drawn</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnEditButtonClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnFieldEditMask">
        <short>Event handler if field is associated with an edit mask</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDbGrid.OnTitleClick">
        <short>Event handler for mouse click on Title</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDbGrid.Create">
        <short>Create an instance of this control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.Create.AOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDbGrid.DefaultDrawColumnCell">
        <short>
          <var>DefaultDrawColumnCell</var> - the default method for drawing cells in this column</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawColumnCell.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawColumnCell.DataCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawColumnCell.Column">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDbGrid.DefaultDrawColumnCell.State">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomDbGrid.Destroy">
        <short>Destroy the control and returns its resources</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDbGrid.SelectedField">
        <short>The selected field, for editing, data input or simply viewing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FExtraOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FOnColumnSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FOnUserCheckboxBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FOnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FDrawingMultiSelRecord">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FDrawingEmptyDataset">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FDefaultColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FGridStatus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FOldControlStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FCheckedBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FUnCheckedBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FGrayedBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FSelectedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomDBGrid.FOnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.EmptyGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.GetCurrentColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetCurrentColumn.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.GetSelectedIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetSelectedIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.GetThumbTracking">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetThumbTracking.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.SetExtraOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.SetExtraOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.SetSelectedIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.SetSelectedIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.SetThumbTracking">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.SetThumbTracking.AValue">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.ValidDataSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.ValidDataSet.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.InsertCancelable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.InsertCancelable.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.StartUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.EndUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.UpdatingData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.UpdatingData.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.SwapCheckBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomDBGrid.ValueMatch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.ValueMatch.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.ValueMatch.BaseValue">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.ValueMatch.TestValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.ToggleSelectedRow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.SelectRecord">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.SelectRecord.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomDBGrid.GetScrollbarParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetScrollbarParams.aRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetScrollbarParams.aPage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetScrollbarParams.aPos">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.AdjustDefaultRowHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.AddAutomaticColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.InvalidateSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.ColumnEditorStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.ColumnEditorStyle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.ColumnEditorStyle.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.ColumnEditorStyle.F">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.DoMouseWheelDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelDown.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelDown.MousePos">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.DoMouseWheelUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelUp.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoMouseWheelUp.MousePos">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.DoPrepareCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoPrepareCanvas.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoPrepareCanvas.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DoPrepareCanvas.aState">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.DrawAllRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.DrawCheckboxBitmaps">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawCheckboxBitmaps.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawCheckboxBitmaps.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawCheckboxBitmaps.F">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.DrawFixedText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawFixedText.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawFixedText.aRow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawFixedText.aRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.DrawFixedText.aState">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetBufferCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetBufferCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetDefaultColumnAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnAlignment.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnAlignment.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetDefaultColumnWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnWidth.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnWidth.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetDefaultColumnReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnReadOnly.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnReadOnly.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetDefaultColumnTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnTitle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultColumnTitle.Column">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetDefaultRowHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetDefaultRowHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetImageForCheckBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetImageForCheckBox.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetImageForCheckBox.CheckBoxView">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomDBGrid.GetIsCellSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.GetIsCellSelected.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetIsCellSelected.aCol">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetIsCellSelected.aRow">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.GetSBVisibility">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBVisibility.HsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBVisibility.VsbVisible">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.GetSBRanges">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.HsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.VsbVisible">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.HsbRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.VsbRange">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.HsbPage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.GetSBRanges.VsbPage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.RemoveAutomaticColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDBGrid.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.WndProc.TheMessage">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.GridStatus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.OptionsExtra">
        <short>
          <var>OptionsExtra</var> - the extra options for this grid</short>
        <descr>
          <var>OptionsExtra</var> - the extra options for this grid: autocolumns and enable checkboxes</descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.SelectedRows">
        <short>
          <var>SelectedRows</var> - recorded as a bookmark list</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.OnColumnSized">
        <short>
          <var>OnColumnSized</var> - event handler for re-sizing a column</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.OnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.OnSelectEditor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomDBGrid.OnUserCheckboxBitmap">
        <short>
          <var>OnUserCheckboxBitmap</var> - event handler: user-defined bitmap for checkboxes</short>
        <descr>
          <p>
            <var>OnUserCheckboxBitmap</var> - event handler: user-defined bitmap for checkboxes</p>
          <p>The user is encouraged to provide bitmaps to represent the three states for database grid checkboxes: <var>gcbpUnChecked</var>, <var>gcbpChecked</var> and <var>gcbpGrayed</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDBGrid.InitiateAction">
        <short>Initiate the action associated with this control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomDBGrid.EditorByStyle">
        <short>
          <var>EditorByStyle</var> - the editor to be used for this grid, specified by <var>Style</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomDBGrid.EditorByStyle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDBGrid.EditorByStyle.Style">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomDBGrid.ResetColWidths">
        <short>
          <var>ResetColWidths</var> - restore the column widths to their default values</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDBGrid.SelectedIndex">
        <short>Selected index - number of the row selected for viewing or editing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDBGrid.SelectedColumn">
        <short>The selected column for viewing or editing</short>
        <descr>Columns and fields are often used interchangeably, but their properties are different.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDBGrid.ThumbTracking">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TdbGrid">
        <short>
          <var>TdbGrid </var>   - a data-aware version of <var>TStringGrid,</var>   for displaying and operating on a series of Rows and Columns from a database</short>
        <descr>
          <p>
            <var>TdbGrid </var>  - a data-aware version of <var>TStringGrid,</var>  for displaying and operating on a series of Rows and Columns from a database</p>
          <p>Inherits many of its properties from <link id="#lcl.Grids.TCustomGrid">TCustomGrid</link> and, of course, from <link id="TCustomDBGrid">TCustomDBGrid</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.DBCtrls.HowToUseDataAwareControls">HowToUseDataAwareControls</link>
          <link id="#lcl.Grids.HowToUseGrids">HowToUseGrids</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TdbGrid.Canvas">
        <short>The area of a control on which its components are drawn or painted</short>
        <descr>The Canvas is the area of screen on which the various components are drawn. <br/>
This inherits its properties from TCanvas, <br/>
and that description should be read to understand their definitions more fully.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Align">
        <short>Used to align the control in one of four directions.</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Anchors">
        <short>The set of anchor definitions for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.AutoAdvance">
        <short>Automatically advance down the grid on successive mouse clicks</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.AutoFillColumns">
        <short>Automatically fill columns with default values if nothing else specified</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.BorderStyle">
        <short>The available border styles for this sort of control</short>
        <descr>Only a restricted series of options is available: none or a single border.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Color">
        <short>Determine the colour for the current control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads the value for colour, or stores the value, and sets a flag if the colour is stored.</p>
          <p>The default colour is the same as the window in which the control is located.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Columns">
        <short>Refers to the physical columns of the grid, displaying the contents of the relevant <var>Fields</var>
        </short>
        <descr>
          <p>Refers to the physical columns of the grid, displaying the contents of the relevant <var>Fields</var>
          </p>
          <p>The <var>Columns</var> property is configurable from the Object Inspector by selecting the ellipsis (...) next to the property name, in which case a pop-up memo box appears to allow editing. It deals with things like the size, shape and format of the display, and contains a link to the appropriate Field. </p>
          <p>Do no confuse Grid columns (in the display) with the SQL usage of COLUMNS, which corresponds to Fields in our environment. The Fields consist of a series of cells arranged in Records, which contain the actual data which are to be displayed and operated upon.</p>
          <p>It is entirely possible that not all fields of the dataset are displayed, and so fields do not correspond directly to columns; in fact the <var>Columns</var> property allows the user to configure which data field is to be displayed in each column</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Constraints">
        <short>Determine <var>Constraints</var> (max and min height and width) for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determine <var>Constraints</var> (max and min height and width) for this control; reads the size constraints or stores new ones.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.DataSource">
        <short>The DataSource from which this grid displays - usually the result of a  database Query</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.DefaultDrawing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.DefaultRowHeight">
        <short>Default value for the height of newly created grid rows.</short>
        <descr>
          <p>If new rows of the grid are created by changing the <link id="TCustomGrid.DefaultRowHeight.RowCount">RowCount</link> property, the height of these new rows will be set to the value of the <var>DefaultRowHeight</var>  property. </p>
          <p>After that the user may redefine this value. If the <link id="TCustomGrid.DefaultRowHeight.Options">Options</link> property includes the appropriate value, the row height may also be changed by the user at runtime.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Enabled">
        <short>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Whether the control is <var>Enabled</var>. If not, it usually appears 'greyed-out'</p>
          <p>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.FixedColor">
        <short>The color for the fixed cells of the grid.</short>
        <descr>The color used by headings.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Flat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.ParentColor">
        <short>
          <var>ParentColor</var> - should the control have the same colour as the parent? Default is true</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.ParentFont">
        <short>
          <var>ParentFont </var>- should the control use the same font as the parent? Default is true</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.PopupMenu">
        <short>PopupMenu - a context-sensitive menu that pops up when the right mouse button is clicked over this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
 Reads the details of the pop-up menu, or stores them.<br/>
Properties are defined in the parent class <link id="#lcl.Menus.TPopupMenu">TPopupMenu</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.ReadOnly">
        <short>Set True to prevent writing to grid; set False to allow modification</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.ShowHint">
        <short>Flag to determine: Is hint to be displayed for this control?</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.TabOrder">
        <short>The place this control occupies in the list of tabs</short>
        <descr>Reads or writes information in flag; default is -1
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.TabStop">
        <short>
          <var>TabStop</var> - determines if the user can tab to a control.</short>
        <descr>
          <p>Reads or writes boolean flag; default is False</p>
          <p>Use the TabStop to allow or disallow access to the control using the Tab key.</p>
          <p>If <var>TabStop</var> is True, the control is in the tab order. If <var>TabStop</var> is False, the control is not in the tab order and the user can't use the Tab key to move to the control.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.TitleFont">
        <short>The font to be used in the grid's title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.Visible">
        <short>
          <var>Visible</var> - can the control be seen?</short>
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnCellClick">
        <short>Event handler for mouse click in a cell of the grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnColEnter">
        <short>Event handler if mouse enters column or it gains focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnColExit">
        <short>Event handler if mouse leaves column or it loses focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnColumnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnDrawColumnCell">
        <short>Event handler if the cell in this column requires to be drawn</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnDblClick">
        <short>Event Handle for mouse double-click</short>
        <descr>
          <p>Double-clicking is much more common in a Windows environment than in Unix or Linux, where single-clicking is the default method for selecting an object. However, in all environments there could be valid use for a double-click, and a method should be supplied if appropriate.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnEditButtonClick">
        <short>Event handler for when the Edit button is clicked</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnEnter">
        <short>
          <var>OnEnter</var> - event handler for when the mouse enters the control, and the control receives focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnExit">
        <short>
          <var>OnExit</var> - event handler for when the mouse leaves the control and it loses focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnKeyDown">
        <short>
          <var>OnKeyDown</var> - event handler for instance when key is down while control has focus</short>
        <descr>
          <p>
            <var>OnKeyDown</var>
 - event handler for instance when key is down while control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyPress">OnKeyPress</link> in that the key may have already been down when the control received focus; with <var>OnKeyPress</var> the key needs to become pressed while the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnKeyPress">
        <short>OnKeyPress - event controller for a key being pressed while the control has focus</short>
        <descr>
          <p>
            <var>OnKeyPress</var>
 - event controller for a key being pressed while the control has focus</p>
          <p>Differs from <link id="#lcl.Controls.TWinControl.OnKeyDown">OnKeyDown</link> in that the key needs to become pressed while the control has focus; with <var>OnKeyDown</var>  the key may have already been down when the control received focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnKeyUp">
        <short>
          <var>OnKeyUp</var>  - event handler for instance when a key is up (not pressed) while the control has focus</short>
        <descr>
          <p>
            <var>OnKeyUp</var>
  - event handler for instance when a key is up (not pressed) while the control has focus</p>
          <p>The key may already have been up when the control received focus, or a pressed key may become released during the time the control has focus.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnMouseDown">
        <short>Event handler for when a mouse button is pressed down</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnMouseMove">
        <short>Event handler for mouse movement within the current control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnMouseUp">
        <short>Event handler for when the mouse button is released, ie "up"</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnPrepareCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TdbGrid.OnTitleClick">
        <short>Event handler for mouse click on Title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.BorderColor">
        <short>The colour of the border for this control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.DefaultTextStyle">
        <short>Default style for displaying text - includes alignment, layout, single or multi-lines</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.EditorBorderStyle">
        <short>The border style for the editor used in this grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.EditorMode">
        <short>Is grid ready to accept edits? (EditorMode True)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.ExtendedColSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.FastEditing">
        <short>Is the FastEditing method being used?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.FocusColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.FocusRectVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.GridLineColor">
        <short>Colour to be used for GridLines</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.GridLineStyle">
        <short>Style to be used for GridLines</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.SelectedColor">
        <short>Colour to be used for selected cells</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDBGrid.SelectedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.AlternateColor">
        <short>The other colour which can be used in this grid (eg for highlighting selected text etc)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.DragCursor">
        <short>
          <var>DragCursor </var>- the style of cursor to be used during the Drag process</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.DragMode">
        <short>
          <var>DragMode </var>- whether manual or automatic</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.FixedHotColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.HeaderHotZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.HeaderPushZones">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OptionsExtra">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.Scrollbars">
        <short>The ScrollBars to be used with this grid</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.TitleStyle">
        <short>The style to be used for the grid's title</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnColumnSized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnDragDrop">
        <short>Event handler for the Drag-Drop manoeuvre</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnDragOver">
        <short>Event handler for the case when a control is dragged over another control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnEndDrag">
        <short>Event handler for the end of a dragging process</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnFieldEditMask">
        <short>Event handler if field is associated with an edit mask</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnSelectEditor">
        <short>Event handler for when the editor is selected</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnStartDrag">
        <short>Event handler for start of dragging process</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDBGrid.OnUserCheckboxBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TDBGrid.AutoEdit">
        <short>Whether the Edit mode is automatically entered when a cell is selected</short>
      </element>
      <element name="TDBGrid.BorderSpacing">
        <short>Determines the border spacing for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
      </element>
    </module>
    <!-- DBGrids -->
  </package>
</fpdoc-descriptions>
