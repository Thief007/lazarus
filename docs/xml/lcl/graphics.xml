<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Graphics
  ====================================================================
-->
    <module name="Graphics">
      <short>Unit contains definitions for many fundamental classes and types used in graphic applications</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Contnrs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPCAdds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPImage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPReadPNG">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPWritePNG">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPReadBMP">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPWriteBMP">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="IntfGraphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="AvgLvlTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLResCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphMath">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFontPitch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontPitch.fpDefault"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontPitch.fpVariable"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontPitch.fpFixed"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TFontName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TFontDataName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFontStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontStyle.fsBold"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontStyle.fsItalic"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontStyle.fsStrikeOut"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontStyle.fsUnderline"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TFontStyles">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFontStylesbase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TFontCharSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TFontData">
        <short>A <b>record</b> holding <i>Data</i> about the current <i>Font</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.Handle">
        <short>The Operating System <i>Handle</i> for the current <i>Font</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.Height">
        <short>The <i>Height</i> (in pixels) if the current <i>Font</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.Pitch">
        <short>The <i>Pitch</i> (in points) of the current<i>Font</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.Style">
        <short>The <i>Style</i> of the <i>Font</i></short>
        <descr>Bold, Italic, Strikeout or Underlined</descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.CharSet">
        <short>The <i>Character Set</i> of the current <i>Font</i> (expresed as an integer)</short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TFontData.Name">
        <short>The <i>Name</i> (as a string) of the current <i>Font</i></short>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefFontData">
        <short><i>Default Data</i>  for any new <i>Font</i></short>
        <descr>
          <p>New <i>TFont</i> instances are initialized with the values in this structure.</p>
          <p>About font default values: The default font is chosen by the interfaces depending on the context. </p>
          <p>For example, there can be a different default font for a button and a groupbox.</p>
        </descr>
        <seealso><link id="TFontData"/></seealso>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTextLayout">
        <short>How the <i>Text</i>  is to be laid out in the Text Rectangle</short>
        <descr>At the Bottom, Centre or Top of the available window or box</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTextLayout.tlTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTextLayout.tlCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTextLayout.tlBottom"><short/></element>
      <!-- record type Visibility: default -->
      <element name="TTextStyle">
        <short>The <i>Style</i> of the <i>Text</i> to be drawn in a rectangle</short>
        <descr>Alignment :  TextRect Only: horizontal alignment<br/>
Layout    : TextRect Only: vertical alignment<br/>
SingleLine: boolean;    If WordBreak is false then process #13, #10 as standard chars and perform no Line breaking.<br/>
Clipping  : boolean;    TextRect Only: Clip Text to passed Rectangle<br/>
ExpandTabs: boolean;    currently ignored<br/>
ShowPrefix: boolean;    TextRect Only: Process first single ampersand per line as an underscore and draw double ampersand as a single ampersand<br/>
Wordbreak : boolean;    TextRect Only: If line of text is too long to fit between left and right boundaries,   try to break into multiple lines between words<br/>
Opaque    : boolean;    TextRect: Fills background with current Brush<br/>
Opaque    :             TextOut : Fills background with current foreground color<br/>
SystemFont: Boolean;    Use the system font instead of Canvas Font<br/>
RightToLeft: Boolean;   For RightToLeft text reading (Text Direction)</descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.SingleLine">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.Clipping">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.ExpandTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.ShowPrefix">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.Wordbreak">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.Opaque">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TTextStyle.SystemFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPenStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psSolid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psDash"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psDot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psDashDot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psDashDotDot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psClear"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenStyle.psInsideframe"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TPenMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmBlack"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmWhite"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmCopy"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNotCopy"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMergePenNot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMaskPenNot"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMergeNotPen"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMaskNotPen"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMerge"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNotMerge"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmMask"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNotMask"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmXor"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPenMode.pmNotXor"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TBrushStyle">
        <short>Style of <i>Brush</i> to be used</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsSolid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsClear"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsVertical"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsFDiagonal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsBDiagonal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsCross"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBrushStyle.bsDiagCross"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TFillStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFillMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFillMode.fmAlternate"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFillMode.fmWinding"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TCopymode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCanvasStates">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasStates.csHandleValid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasStates.csFontValid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasStates.csPenvalid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasStates.csBrushValid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasStates.csRegionValid"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TCanvasState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCanvasOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasOrientation.csLefttoRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCanvasOrientation.coRighttoLeft"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TProgressStage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressStage.psStarting"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressStage.psRunning"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TProgressStage.psEnding"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TProgressEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.Stage"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.PercentDone"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.RedrawNow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.R"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TProgressEvent.DoContinue"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TPixelFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pfDevice"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf1bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf4bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf8bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf15bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf16bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf24bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pf32bit"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPixelFormat.pfCustom"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TTransparentMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTransparentMode.tmAuto"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTransparentMode.tmFixed"><short/></element>
      <!-- constant Visibility: default -->
      <element name="clBlack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMaroon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGreen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clOlive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNavy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clPurple">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clTeal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clSilver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clRed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clLime">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clYellow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBlue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clFuchsia">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clAqua">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clLtGray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDkGray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWhite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clCream">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDefault">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInactiveCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWindowFrame">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMenuText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWindowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clCaptionText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveBorder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInactiveBorder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clAppWorkspace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHighlightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnFace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGrayText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInactiveCaptionText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DDkShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInfoText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInfoBk">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHotLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGradientActiveCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGradientInactiveCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clEndColors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clColorDesktop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DFace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DHiLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnHiLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clFirstSpecialColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDontMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clForeground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMidlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDark">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBrightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clButtonText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clxBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clxHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHighlightedText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cloNormal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cloDisabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cloActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalForeground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalMidlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalDark">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalMid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalBrightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalButtonText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clNormalHighlightedText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledForeground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledMidlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledDark">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledMid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledBrightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledButtonText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clDisabledHighlightedText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveForeground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveMidlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveDark">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveMid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveBrightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveButtonText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveBackground">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clActiveHighlightedText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TMappedColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TColorGroup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorGroup.cgInactive"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorGroup.cgDisabled"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorGroup.cgActive"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TColorRole">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crForeground"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crButton"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crLight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crMidlight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crDark"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crMid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crText"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crBrightText"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crButtonText"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crBase"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crBackground"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crShadow"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crHighlight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crHighlightText"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TColorRole.crNoRole"><short/></element>
      <!-- constant Visibility: default -->
      <element name="cmBlackness">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmDstInvert">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmMergeCopy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmMergePaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmNotSrcCopy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmNotSrcErase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmPatCopy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmPatInvert">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmPatPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmSrcAnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmSrcCopy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmSrcErase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmSrcInvert">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmSrcPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cmWhiteness">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPortableNetworkGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGraphicsObject">
        <short>Primitive ancestor class, mainly for Delphi compatibility</short>
        <descr>TGraphicsObject - In Delphi VCL this is the ancestor of TFont, TPen and TBrush.<br/>
Since FPC 2.0 the LCL uses TFPCanvasHelper as ancestor.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphicsObject.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphicsObject.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGraphicsObject.DoChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphicsObject.DoChange.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphicsObject.Changing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphicsObject.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphicsObject.Lock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphicsObject.UnLock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphicsObject.OnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphicsObject.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFontHandleCacheDescriptor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TFontHandleCacheDescriptor.LogFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TFontHandleCacheDescriptor.LongFontName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFontHandleCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFontHandleCache.RemoveItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.RemoveItem.Item"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TFontHandleCache.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFontHandleCache.CompareDescriptors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFontHandleCache.CompareDescriptors.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.CompareDescriptors.Tree"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.CompareDescriptors.Desc1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.CompareDescriptors.Desc2"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFontHandleCache.FindFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFontHandleCache.FindFont.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.FindFont.TheFont"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFontHandleCache.FindFontDesc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFontHandleCache.FindFontDesc.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.FindFontDesc.LogFont"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.FindFontDesc.LongFontName"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFontHandleCache.Add">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFontHandleCache.Add.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.Add.TheFont"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.Add.LogFont"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFontHandleCache.Add.LongFontName"><short/></element>
      <!-- object Visibility: default -->
      <element name="TFont">
        <short>The <i>Font</i>  to be used for drawing <i>Text</i></short>
        <descr>
          <p>Most of the data about the font are dealt with by the protected procedures GetData and SetData which operate on TFontData</p>
          <p>Individual properties such as Character Set, colour and size can be accessed in the public area</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FCanUTF8">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FPitch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FCharSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FPixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FFontHandleCached">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FFontName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFont.FHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFont.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFont.GetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.GetData.FontData"><short/></element>
      <!-- function Visibility: private -->
      <element name="TFont.IsNameStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.IsNameStored.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TFont.SetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetData.FontData"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetName.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetSize.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetCharSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetCharSet.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetHandle.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetName.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetPitch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetPitch.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetSize.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TFont.GetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.GetStyle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetCharSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetCharSet.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetColor.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetHandle.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetHeight.value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetPitch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetPitch.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TFont.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.SetStyle.Value"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TFont.Create">
        <short><i>Font</i> constructor</short>
        <descr>Opens a new instance of the class and sets defaults for character set, colour, size etc</descr>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFont.Destroy">
        <short><i>Font</i> destructor</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFont.Assign">
        <short><i>Assign</i>   - copies the <i>LogFont</i>   or <i>Source</i>  settings to itself</short>
        <descr><p>Method: <i>TFont.Assign</i></p><p>Params: <i>ALogFont</i>: TLogFont or</p><p><i>Source</i>: another font</p><p>Returns:  nothing</p>


Copies the logfont or source settings to itself</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.Assign.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFont.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFont.Assign.ALogFont"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFont.BeginUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFont.EndUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFont.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.HandleAllocated.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFont.IsDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFont.IsDefault.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TFont.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFont.PixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFont.CanUTF8">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.CharSet">
        <short>The <i>Character Set</i> to be used by the current<i>Font</i></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Color">
        <short><i>Colour</i> of the current <i>Font</i></short>
        <descr>Default is the same as the text used for the rest of the Window</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Height">
        <short>The <i>Height</i> of the current Font</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Name">
        <short><i>Name</i> of the <i>Font</i></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Pitch">
        <short><i>Pitch</i> type of the <i>Font</i></short>
        <descr>Fixed or variable pitch, or Default<br/>
Reads or writes a flag to determine pitch type</descr>
        <seealso><link id="TFontPitch"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Size">
        <short><i>Font</i><i>Size</i> in pixels</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFont.Style">
        <short><i>Style</i> of the <i>Font</i></short>
        <descr>Bold, Italic, Strike out, Underline<br/>
Property is a set, so may contain zero or more of the above (if set is empty, Normal font is displayed)</descr>
      </element>
      <!-- record type Visibility: default -->
      <element name="TPenData">
        <short>The <i>Data</i> associated with the current <i>Pen</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TPenData.Handle">
        <short>The Operating System <i>Handle</i> associated with the current <i>Pen</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TPenData.Color">
        <short>The <i>Colour</i> of the curent <i>Pen</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TPenData.Width">
        <short>The <i>Width</i> in pixels of the current <i>Pen</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TPenData.Style">
        <short>The <i>Style</i> asociated with the current <i>Pen</i></short>
        <descr>The <i>Style</i> asociated with the current <i>Pen</i><br/>
Can take any of the values:
psSolid, psDash, psDot, psDashDot, psDashDotDot, psinsideFrame, psPattern,psClear</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TPenHandleCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPenHandleCache.RemoveItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPenHandleCache.RemoveItem.Item"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TPenHandleCache.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPen">
        <short>The current <i>Pen</i> for drawing on the current <i>Canvas</i></short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FPenHandleCached">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPen.FMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TPen.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TPen.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPen.GetHandle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPen.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.SetHandle.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPen.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.SetColor.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPen.SetMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.SetMode.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPen.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.SetStyle.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPen.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.SetWidth.value"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TPen.Create">
        <short><i>Pen</i>  Constructor</short>
        <descr>Most of its properties are <b>inherited</b>
 from the parent class</descr>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TPen.Destroy">
        <short><i>Pen</i> Destructor</short>
        <descr>Most of its properties are <b>inherited</b> from the parent class</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPen.Assign">
        <short>Copies the <i>Source</i><i>Pen</i> to itself</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPen.Assign.Source"><short/></element>
      <!-- property Visibility: public -->
      <element name="TPen.Handle">
        <short>the Operating System <i>Handle</i> for the current <i>Pen</i></short>
        <descr>Reads or writes a flag to determine the handle</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TPen.Color">
        <short>The <i>Colour </i>of the current <i>Pen</i></short>
        <descr>Reads or Writes a flag to determine the colour. Default is black</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TPen.Mode">
        <short>The <i>Mode</i> for the current <i>Pen</i></short>
        <descr>Can take any of the values:<br/>
pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy,<br/>
pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge,<br/>
pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor<br/>
Default is pmCopy</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TPen.Style">
        <short>The <i>Style</i> of the current <i>Pen</i></short>
        <descr>Can be one of the following: <br/>
psSolid, psDash, psDot, psDashDot, psDashDotDot, psinsideFrame, psPattern,psClear<br/>
Default is psSolid</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TPen.Width">
        <short>The <i>Width</i> in pixels of the current <i>Pen</i></short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TBrushData">
        <short>The <i>Data</i> associated with the current <i>Brush</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TBrushData.Handle">
        <short>The Operating System <i>Handle</i> associated with the current <i>Brush</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TBrushData.Color">
        <short>The <i>Colour</i> to be used by the current <i>Brush</i></short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TBrushData.Bitmap">
        <short>The <i>Bitmap</i> on which the current <i>Brush</i> is working</short>
      </element>
      <!-- variable Visibility: default -->
      <element name="TBrushData.Style">
        <short>The <i>Style</i>   to be used by the current <i>Brush</i></short>
        <descr>Enumerated type defined in <i>TBrushStyle</i></descr>
        <seealso><link id="TBrushStyle"/></seealso>
      </element>
      <!-- object Visibility: default -->
      <element name="TBrushHandleCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBrushHandleCache.RemoveItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrushHandleCache.RemoveItem.Item"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TBrushHandleCache.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBrush">
        <short>The <i>Brush</i> to be used to <i>Paint</i> on the current <i>Canvas</i></short>
        <descr>A <i>Brush</i> is typically used to fill an enclosed area on the<i>Canvas</i> with one particular colour or coloured pattern</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBrush.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBrush.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBrush.FBitmap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBrush.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBrush.FBrushHandleCached">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBrush.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TBrush.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBrush.GetHandle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBrush.SetBitmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrush.SetBitmap.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBrush.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrush.SetColor.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBrush.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrush.SetHandle.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBrush.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrush.SetStyle.Value"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBrush.Assign">
        <short><i>Assign</i> - copies a <i>Source</i><i>Brush</i> to itself</short>
        <descr>Method: TBrush.Assign<br/>
  Params: Source: Another brush<br/>
  Returns:  nothing<br/>

  Copies the source brush to itself</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBrush.Assign.Source">
        <short><i>Source</i> - another <i>Brush</i></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBrush.Create">
        <short><i>Brush</i> constructor</short>
        <descr><b>Inherits</b> most of its properties from ancestor Classes</descr>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TBrush.Destroy">
        <short><i>Brush</i> destructor</short>
        <descr><b>Inherits</b> properties to remove <i>Brush</i> and frees <i>Handle</i></descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TBrush.Bitmap">
        <short>The <i>BitMap</i> associated with the current <i>Brush</i></short>
        <descr>Reads or writes a flag to determine the current <i>BitMap</i></descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TBrush.Handle">
        <short>Operating System <i>Handle</i> for this <i>Brush</i></short>
        <descr>Reads or writes flag to determine system <i>Handle</i></descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TBrush.Color">
        <short>The <i>Colour</i> of the current <i>Brush</i></short>
        <descr>Reads or writes a flag to determine the <i>Colour</i>. Default is White</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TBrush.Style">
        <short><i>Style</i> of the <i>Brush</i></short>
        <descr>Enumerated type - default Solid</descr>
        <seealso><link id="TBrushStyle"/></seealso>
      </element>
      <!-- record type Visibility: default -->
      <element name="TRegionData">
        <short>The <i>Data</i> about the current <i>Region</i> on the <i>Screen</i> or <i>Canvas</i></short>
        <descr>At present the Region can only be rectangular; the ability to define it as a Polygon is not yet implemented</descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TRegionData.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TRegionData.Rect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TRegionData.Polygon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TRegionData.NumPoints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TRegionData.Winding">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TRegion">
        <short>A defined <i>Region</i> on the screen, in which text is written</short>
        <seealso>
          <link id="TRegionData">TRegionData (in same Unit)</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TRegion.FRegionData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TRegion.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TRegion.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TRegion.GetHandle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TRegion.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRegion.SetHandle.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TRegion.SetClipRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRegion.SetClipRect.value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TRegion.GetClipRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TRegion.GetClipRect.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TRegion.Create">
        <short><i>TRegion</i> constructor</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TRegion.Destroy">
        <short><i>TRegion</i> destructor</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TRegion.Assign">
        <short><i>Assign</i> - copies <i>Source</i> to itself</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRegion.Assign.Source"><short/></element>
      <!-- property Visibility: public -->
      <element name="TRegion.Handle">
        <short>Operating System <i>Handle</i>  for this <i>Region</i></short>
        <seealso>
          <link id="#lcl.lcltype.HRGN">HRGN </link>
          <link id="#rtl.sysutils.thandle">THandle </link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TRegion.ClipRect">
        <short>The rectangle to be used for clipping text</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TGraphic">
        <short>Base class for dealing with <i>Graphic</i>   images</short>
        <descr>The <i>TGraphic</i> class is an <b>abstract</b> base class for dealing with graphic images such as bitmaps, pixmaps, icons, and other image formats. It does not contain an actual area for displaying the image; this is provided by the descendant classes eg <i>BitMap</i>, <i>Icon</i> etc which have a <i>Canvas</i> element defined <br/><i>LoadFromFile</i> - Read the graphic from the file system.  The old contents of the graphic are lost.  If the file is not of the right format, an exception will be generated.<br/><i>SaveToFile</i> - Writes the graphic to disk in the file provided.<br/><i>LoadFromStream</i> - Like <i>LoadFromFile</i>  except source is a stream (e.g.  <i>TBlobStream</i>
).<br/><i>SaveToStream</i> - stream analogue of <i>SaveToFile</i> .<br/><i>LoadFromClipboardFormat</i> - Replaces the current image with the data provided.  If the <i>TGraphic</i>
 does not support that format it will generate an exception.<br/><i>SaveToClipboardFormats</i> - Converts the image to a clipboard format.  If the image does not support being translated into a clipboard format it will generate an exception.<br/><i>Height</i> - The native, unstretched, height of the graphic.<br/><i>Palette</i> - Color palette of image.  Zero if graphic doesn't need/use palettes.<br/><i>Transparent</i> - Some parts of the image are not opaque, ie the background can be seen through.<br/><i>Width</i> - The native, unstretched, width of the graphic.<br/><i>OnChange</i> - Called whenever the graphic changes<br/><i>PaletteModified</i> - Indicates in <i>OnChange</i>  whether color palette has changed. Stays true until whoever is responsible for realizing this new palette    (ex: TImage) sets it to False.<br/><i>OnProgress</i> - Generic progress indicator event. Propagates out to <i>TPicture</i>
  and <i>TImage OnProgress</i> events.<br/><br/> 
  As many of the methods and properties are <b>virtual</b> and/or <b>abstract</b>, it is the responsibility of the application programmer to supply suitable methods when implementing any descendant classes </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphic.FModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphic.FTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphic.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphic.FOnProgress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphic.FPaletteModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Changed.Sender"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.Equals">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.Equals.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Equals.Graphic"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.DefineProperties.Filer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.Draw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Draw.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Draw.Rect"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.GetEmpty">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetEmpty.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.GetPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetPalette.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.GetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetTransparent.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TGraphic.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetWidth.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.Progress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.Stage"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.PercentDone"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.RedrawNow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.R"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.Progress.DoContinue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.ReadData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SetHeight.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.SetPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SetPalette.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.SetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SetTransparent.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SetWidth.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.SetModified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SetModified.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphic.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.WriteData.Stream"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TGraphic.Create">
        <short><i>TGraphic</i> constructor</short>
        <descr><b>Virtual</b> method, so recommend that a constructor be supplied to <b>override</b> this method in descendant classes</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromFile">
        <short><i>LoadFromFile</i> - Read the graphic from the file system.</short>
        <descr>LoadFromFile - Read the graphic from the file system.  <br/>
The old contents of the graphic are lost.  <br/>
If the file is not of the right format, an exception will be generated.</descr>
        <errors>Incorrect file format generates an exception</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromFile.Filename">
        <short>The name of the file containing the graphic, held as a string</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.SaveToFile">
        <short><i>SaveToFile</i> - Writes the graphic to disk in the file provided.</short>
        <descr><i>SaveToFile</i> - Writes the graphic to disk in the file whose name is provided.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SaveToFile.Filename">
        <short>The name of the file to which the graphic will be written</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromStream">
        <short><i>LoadFromStream</i>  -reads graphic data from a stream (e.g.  <i>TBlobStream</i> )</short>
        <descr><i>LoadFromStream</i>
 - Like <i>LoadFromFile</i>
 except source is a stream (e.g. <i>TBlobStream</i>)</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromStream.Stream">
        <short>Identity of the stream from which the graphic data are to be read</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.SaveToStream">
        <short><i>SaveToStream</i> - write graphic data to a stream</short>
        <descr><i>SaveToStream</i> - write graphic data to a stream</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SaveToStream.Stream">
        <short>Identity of the stream to which the graphic data are to be written</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromMimeStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromMimeStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromMimeStream.MimeType"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromLazarusResource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromLazarusResource.ResName"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromClipboardFormat">
        <short><i>LoadFromClipboardFormat</i> - Replace the current image with the contents of the clipboard</short>
        <descr><i>LoadFromClipboardFormat</i> - Replaces the current image with the data provided from the clipboard.</descr>
        <errors>If the <i>TGraphic</i> does not support that format it will generate an exception.</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromClipboardFormat.FormatID"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.LoadFromClipboardFormatID">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromClipboardFormatID.ClipboardType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.LoadFromClipboardFormatID.FormatID"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.SaveToClipboardFormat">
        <short><i>SaveToClipboardFormats</i> - Converts the image to a clipboard format</short>
        <descr><i>SaveToClipboardFormats</i> - Converts the image to a clipboard format</descr>
        <errors>If the image does not support being translated into a clipboard format it will generate an exception</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SaveToClipboardFormat.FormatID">
        <short>Identity of the clipboard format</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.SaveToClipboardFormatID">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SaveToClipboardFormatID.ClipboardType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.SaveToClipboardFormatID.FormatID"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TGraphic.GetSupportedSourceMimeTypes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.GetSupportedSourceMimeTypes.List"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetDefaultMimeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetDefaultMimeType.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetFileExtensions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetFileExtensions.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetFPReaderForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetFPReaderForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.GetFPReaderForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetFPWriterForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetFPWriterForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGraphic.GetFPWriterForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetDefaultFPReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetDefaultFPReader.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TGraphic.GetDefaultFPWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TGraphic.GetDefaultFPWriter.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Empty">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Height">
        <short><i>Height</i> - The native, unstretched, height of the graphic.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Modified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.OnProgress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Palette">
        <short><i>Palette</i> - Color palette of image</short>
        <descr><i>Palette</i> - Color palette of image.  Zero if graphic doesn't need/use palettes</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.PaletteModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Transparent">
        <short><i>Transparent</i> - Some parts of the image are not opaque. ie the background
 can be seen through</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphic.Width">
        <short><i>Width</i> - The native, unstretched, width of the graphic.</short>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TGraphicClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPicture">
        <short><i>TPicture</i>     is a <i>TGraphic</i>     container, used in place of a <i>TGraphic</i>   if the graphic can be of any <i>TGraphic</i>     class.</short>
        <descr><i>TPicture</i>
 is a <i>TGraphic</i>
 container.  It is used in place of a <i>TGraphic</i>
 if the graphic can be of any <i>TGraphic</i>
 class. <br/>


It is not a direct descendant of <i>TGraphic</i>
, so you will not see <i>TGraphic</i>
 listed in the <i>Inheritance</i>
 chart, but it contains a property <i>Graphic</i>
, of type <i>TGraphic</i>
, so can contain all the properties of a <i>TGraphic</i><br/><br/>

Defines many <b>private</b>
 methods for getting and storing various sorts of images such as bitmaps, pixmaps, icons, PNGs etc<br/>
It does not itself contain a defined area for displaying the image, but this is supplied by the descendant classes such as BitMap, PixMap, PNG or Icon, which define a Canvas property.<br/><br/><i>LoadFromFile</i> and <i>SaveToFile</i> are polymorphic. For example, if the <i>TPicture</i> is holding an <i>Icon</i>, you can  <i>LoadFromFile</i> a bitmap file, where if the class is <i>TIcon</i> you could only read  .ICO files.<br/><br/><i>LoadFromFile</i> - Reads a picture from disk. The <i>TGraphic</i> class created is determined by the file extension of the file. If the file extension is  not recognized an exception is generated.<br/><i>SaveToFile</i> - Writes the picture to disk.<br/><i>LoadFromClipboardFormat</i> - ToDo: Reads the picture from the handle provided in the given clipboard format.  If the format is not supported, an exception is generated.<br/><i>SaveToClipboardFormats</i> - ToDo: Allocates a global handle and writes the picture in its native clipboard format (CF_BITMAP for bitmaps, CF_METAFILE for metafiles, etc.).  Formats will contain the formats written.  Returns the number of clipboard items written to the array pointed to by Formats and Datas or would be written if either Formats or Datas are  nil.<br/><i>SupportsClipboardFormat</i> - Returns true if the given clipboard format  is supported by <i>LoadFromClipboardFormat</i>

.<br/><i>Assign</i> - Copies the contents of the given <i>TPicture</i>.  Used most often in  the implementation of TPicture properties.<br/><i>RegisterFileFormat</i> - Register a new <i>TGraphic</i> class for use in  <i>LoadFromFile</i>.<br/><i>RegisterClipboardFormat</i> - Registers a new <i>TGraphic</i> class for use in  <i>LoadFromClipboardFormat</i>.<br/><i>UnRegisterGraphicClass</i> - Removes all references to the specified <i>TGraphic</i> class and all its descendants from the file format and clipboard format internal lists.<br/><i>Height</i> - The native, unstretched, height of the picture.<br/><i>Width</i> - The native, unstretched, width of the picture.<br/><i>Graphic</i> - The <i>TGraphic</i> object contained by the <i>TPicture</i><br/><i>Bitmap</i> - Returns a bitmap.  If the contents is not already a bitmap, the contents are thrown away and a blank bitmap is returned.<br/><i>Pixmap</i> - Returns a pixmap.  If the contents is not already a pixmap, the contents are thrown away and a blank pixmap is returned.<br/><i>PNG</i> - Returns a png.  If the contents is not already a png, the  contents are thrown away and a blank png (<i>TPortableNetworkGraphic</i>) is returned.<br/><i>PNM</i> - Returns a pnm.  If the contents is not already a pnm, the contents are thrown away and a blank pnm (<i>TPortableAnyMapGraphic</i>) is returned.<br/></descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPicture.FGraphic">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPicture.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPicture.FOnProgress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.ForceType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.ForceType.GraphicType"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetBitmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetBitmap.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetPNG">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetPNG.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetPixmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetPixmap.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetIcon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetIcon.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TPicture.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.GetWidth.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.ReadData.Stream"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.SetBitmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SetBitmap.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.SetPNG">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SetPNG.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.SetPixmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SetPixmap.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.SetIcon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SetIcon.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.SetGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SetGraphic.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TPicture.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.WriteData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPicture.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.AssignTo.Dest"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPicture.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Changed.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPicture.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.DefineProperties.Filer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TPicture.Progress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.Stage"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.PercentDone"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.RedrawNow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.R"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Progress.DoContinue"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TPicture.Create">
        <short><i>TPicture</i> constructor</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TPicture.Destroy">
        <short><i>TPicture</i> destructor</short>
        <descr>Any destructor method defined here will <b>override</b> destructors defined in ancestor classes</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.LoadFromFile">
        <short><i>LoadFromFile</i> - Reads a picture from disk</short>
        <descr><i>LoadFromFile</i> - Reads a picture from disk. The <i>TGraphic</i> class created is determined by the file extension of the file.</descr>
        <errors>If the file extension is  not recognized an exception is generated</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.LoadFromFile.Filename">
        <short>The name of the file containing the picture, stored as a string</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.SaveToFile">
        <short><i>SaveToFile</i> - Writes the picture to disk</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SaveToFile.Filename">
        <short>The name of the file to save the picture, stored as a string</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.LoadFromClipboardFormat">
        <short>
          <i>LoadFromClipboardFormat</i>
        </short>
        <descr><i>LoadFromClipboardFormat</i> - ToDo: Reads the picture from the handle provided in the given clipboard format.</descr>
        <errors>If the format is not supported, an exception is generated</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.LoadFromClipboardFormat.FormatID">
        <short>The identifier for the clipboard format</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.LoadFromClipboardFormatID">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.LoadFromClipboardFormatID.ClipboardType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.LoadFromClipboardFormatID.FormatID"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.SaveToClipboardFormat">
        <short><i>SaveToClipboardFormats</i> - Allocates a global handle and writes the picture in its native clipboard format</short>
        <descr><i>SaveToClipboardFormats</i> - ToDo: Allocates a global handle and writes the picture in its native clipboard format (CF_BITMAP for bitmaps, CF_METAFILE for metafiles, etc.).  Formats will contain the formats written.  Returns the number of clipboard items written to the array pointed to by Formats and Datas or would be written if either Formats or Datas are  nil.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SaveToClipboardFormat.FormatID">
        <short>Identity of the clipboard format</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TPicture.SupportsClipboardFormat">
        <short><i>SupportsClipboardFormat</i> - Returns true if the given clipboard format  is supported by <i>LoadFromClipboardFormat</i></short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPicture.SupportsClipboardFormat.Result">
        <short>Boolean - returns true if format supported</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.SupportsClipboardFormat.FormatID">
        <short>Identity of the clipboard format</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.Assign">
        <short><i>Assign</i> - Copies the contents of the given <i>TPicture</i></short>
        <descr><i>Assign</i> - Copies the contents of the given <i>TPicture</i>.  Used most often in  the implementation of TPicture properties.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.Assign.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.RegisterFileFormat">
        <short><i>RegisterFileFormat</i> - Register a new <i>TGraphic</i> class for use in  <i>LoadFromFile</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.RegisterFileFormat.AnExtension"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.RegisterFileFormat.ADescription"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.RegisterFileFormat.AGraphicClass"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.RegisterClipboardFormat">
        <short><i>RegisterClipboardFormat</i> - Registers a new <i>TGraphic</i> class for use in  <i>LoadFromClipboardFormat</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.RegisterClipboardFormat.FormatID"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPicture.RegisterClipboardFormat.AGraphicClass"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.UnregisterGraphicClass">
        <short><i>UnRegisterGraphicClass</i>  - Removes all references to the specified <i>TGraphic</i></short>
        <descr><i>UnRegisterGraphicClass</i>
 - Removes all references to the specified <i>TGraphic</i>
  class and all its descendants from the file format and clipboard format internal lists</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPicture.UnregisterGraphicClass.AClass"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPicture.Clear">
        <short><i>Clear</i> - removes the graphic</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Bitmap">
        <short><i>Bitmap</i> - Returns a bitmap</short>
        <descr><i>Bitmap</i> - Returns a bitmap.  If the contents is not already a bitmap, the contents are thrown away and a blank bitmap is returned</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Pixmap">
        <short><i>Pixmap</i> - Returns a pixmap</short>
        <descr><i>Pixmap</i> - Returns a pixmap.  If the contents is not already a pixmap, the contents are thrown away and a blank pixmap is returned</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.PNG">
        <short><i>PNG</i> - Returns a png</short>
        <descr><i>PNG</i> - Returns a png.  If the contents is not already a png, the  contents are thrown away and a blank png (<i>TPortableNetworkGraphic</i>) is returned</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Icon">
        <short><i>Icon</i> contained within the picture</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Graphic">
        <short><i>Graphic</i> - The <i>TGraphic</i> object contained by the <i>TPicture</i></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Height">
        <short><i>Height</i> - The native, unstretched, height of the picture</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.Width">
        <short><i>Width</i> - The native, unstretched, width of the picture</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TPicture.OnProgress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInvalidGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInvalidGraphicOperation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCanvas">
        <short><i>TCanvas</i> - where most of the drawing is performed</short>
        <descr><i>TCanvas</i> is a class that defines a very large number of drawing methods including methods for pen and colour selection, producing shapes and filling them, setting or clearing individual pixels, and producing graphic text.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FAutoRedraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FSavedFontHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FPen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FSavedPenHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FSavedBrushHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FRegion">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FSavedRegionHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FPenPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FCopyMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FTextStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCanvas.FLockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.BrushChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.BrushChanged.ABrush"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FontChanged.AFont"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.PenChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PenChanged.APen"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.RegionChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RegionChanged.ARegion"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCanvas.GetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetColor.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCanvas.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetHandle.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCanvas.GetPenPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetPenPos.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetAutoRedraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetAutoRedraw.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetBrush.value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetColor.c"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetFont.value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetPen.value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetPenPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetPenPos.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCanvas.SetRegion">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetRegion.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCanvas.GetCanvasClipRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetCanvasClipRect.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCanvas.GetPixel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetPixel.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.GetPixel.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.GetPixel.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.CreateBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.CreateFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.CreateHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.CreatePen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.CreateRegion">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.DeselectHandles">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.PenChanging">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PenChanging.APen"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.RealizeAutoRedraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.RequiredState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RequiredState.ReqState"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetHandle.NewHandle"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.SetInternalPenPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetInternalPenPos.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCanvas.SetPixel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetPixel.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetPixel.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.SetPixel.Value"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCanvas.Create">
        <short><i>Canvas</i>  constructor</short>
        <descr><i>Canvas</i>  constructor: creates a new instance of the class <i>TCanvas</i></descr>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCanvas.Destroy">
        <short><i>Canvas</i> destructor</short>
        <descr><i>Canvas</i> destructor: removes this instance of <i>TCanvas</i> and makes its resources available</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Lock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Unlock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Refresh">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Changing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Arc">
        <short>Use <i>Arc</i>   to draw an elliptically curved line with the current Pen</short>
        <descr>Method:   TCanvas.Arc<br/>

Params:   ALeft, ATop, ARight, ABottom, sx, sy, ex, ey<br/>

Returns:  Nothing<br/><br/>

Use Arc to draw an elliptically curved line with the current Pen. The values sx,sy, and ex,ey represent the starting and ending radial-points between which the Arc is drawn.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.angle1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.angle2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Arc">
        <short>Use <i>Arc</i>  to draw an elliptically curved line with the current Pen</short>
        <descr>Method:   TCanvas.Arc<br/>

Params:   ALeft, ATop, ARight, ABottom, angle1, angle2<br/>

Returns:  Nothing<br/><br/>

Use Arc to draw an elliptically curved line with the current Pen.<br/>

The angles angle1 and angle2 are 1/16th of a degree. <br/>

For example, a full  circle equals 5760 (16*360). <br/>

Positive values of <i>Angle</i>
 and <i>AngleLength</i>
 mean counter-clockwise while negative values mean clockwise direction.<br/>

Zero degrees is at the 3 o'clock position.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.SX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.SY"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.EX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Arc.EY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.BrushCopy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.BrushCopy.Dest"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.BrushCopy.InternalImages"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.BrushCopy.Src"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.BrushCopy.TransparentColor"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Chord"/>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.Width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.Height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.StartAngle16Deg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.EndAngle16Deg"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Chord">
        <short><i>Chord</i>  draws a filled Chord-shape on the canvas</short>
        <descr>Method:   TCanvas.Chord<br/>



Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg<br/>



Returns:  Nothing<br/><br/>



Use <i>Chord</i>


 to draw a filled Chord-shape on the canvas. The angles <i>angle1</i>


 and <i>angle2</i>


 are 1/16th of a degree. For example, a full circle equals 5760(16*360).<br/>



Positive values of <i>Angle</i>


 and <i>AngleLength</i>


 mean counter-clockwise while negative values mean clockwise direction. <br/>



Zero degrees is at the 3 o'clock position.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.Width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.Height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.SX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.SY"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.EX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Chord.EY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.CopyRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.CopyRect.Dest"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.CopyRect.SrcCanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.CopyRect.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Draw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Draw.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Draw.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Draw.SrcGraphic"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.StretchDraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.StretchDraw.DestRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.StretchDraw.SrcGraphic"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Ellipse">
        <short/>
        <descr/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Ellipse.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Ellipse">
        <short><i>Ellipse</i>  draws a filled circle or ellipse on the canvas</short>
        <descr>Method:   TCanvas.Ellipse<br/>

		      Params:   X1, Y1, X2, Y2<br/>

Returns:  Nothing<br/><br/>
Use <i>Ellipse</i>
 to draw a filled circle or ellipse on the canvas.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Ellipse.x1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Ellipse.y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Ellipse.x2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Ellipse.y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.FillRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FillRect.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.FillRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FillRect.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FillRect.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FillRect.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FillRect.Y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.FloodFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FloodFill.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FloodFill.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FloodFill.FillColor"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FloodFill.FillStyle"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Frame3d">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame3d.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame3d.FrameWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame3d.Style"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Frame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Frame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Frame.Y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.FrameRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FrameRect.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.FrameRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FrameRect.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FrameRect.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FrameRect.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.FrameRect.Y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Line">
        <short>Draws a <i>Line</i>  from <i>X1, Y1</i> to <i>X2, Y2</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Line.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Line.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Line.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Line.Y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.LineTo">
        <short><i>LineTo</i> draws a line from the current pen position to the new position: <i>X1, Y1</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.LineTo.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.LineTo.Y1"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.MoveTo">
        <short>Moves cursor to new position <i>X1, Y1</i> without drawing anything</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.MoveTo.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.MoveTo.Y1"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.RadialPie">
        <seealso><link id="TCanvas.Pie"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.Width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.Height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.StartAngle16Deg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.EndAngle16Deg"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.RadialPie">
        <short><i>RadialPie</i> uses <i>Pie</i>    to draw a filled pie-shaped wedge on the canvas</short>
        <descr>Method:   TCanvas.RadialPie<br/>




Params:   x1, y1, x2, y2, StartAngle16Deg, EndAngle16Deg: Integer<br/>




Returns:  Nothing<br/><br/>




Uses <i>Pie</i>



 to draw a filled pie-shaped wedge on the canvas.<br/>




The angles <i>StartAngle16Deg</i>



 and <i>EndAngle16Deg</i>



 are 1/16th of a degree.<br/>




For example, a full circle equals 5760 (16*360).<br/>




Positive values of Angle and AngleLength mean counter-clockwise while negative values mean clockwise direction.<br/>




Zero degrees is at the 3 o'clock position</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.Width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.Height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.sx"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.sy"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.ex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RadialPie.ey"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Pie">
        <short><i>Pie</i>  draws a filled Pie-shaped wedge on the canvas</short>
        <descr>Method:   TCanvas.Pie<br/>

Params:   EllipseX1, EllipseY1, EllipseX2, EllipseY2, StartX, StartY, EndX, EndY<br/>

Returns:  Nothing<br/><br/>

Use <i>Pie</i>
 to draw a filled Pie-shaped wedge on the canvas. The pie is part of an ellipse between the points EllipseX1, EllipseY1, EllipseX2, EllipseY2. The values StartX, StartY and EndX, EndY represent the starting and ending radial-points between which the Bounding-Arc is drawn. <br/></descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EllipseX1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EllipseY1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EllipseX2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EllipseY2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.StartX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.StartY"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EndX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pie.EndY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.PolyBezier"/>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.NumPts"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Filled"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Continuous"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.PolyBezier">
        <short><i>Polybezier</i>    draws cubic Bezier curves</short>
        <descr>Method:  TCanvas.PolyBezier<br/>



Params:  Points, Filled, Continous<br/>



Returns: Boolean<br/><br/>



Use <i>Polybezier</i>


 to draw cubic Bezier curves. <br/>



The first curve is drawn from the first point to the fourth point with the second and third points being the control points. <br/>



If the Continuous flag is TRUE then each subsequent curve requires three more points, using the end-point of the previous Curve as its starting point, the first and second points being used as its control points, and the third point its end-point. <br/><br/>



If the continous flag is set to FALSE, then each subsequent Curve requires 4 additional points, which are used exactly as in the first curve. <br/><br/>



Any additonal points which do not add up to a full bezier(4 for Continuous, 3 otherwise) are ingored. There must be at least 4 points for an drawing to occur. <br/><br/>



If the Filled Flag is set to TRUE then the resulting Poly-Bezier will be drawn as a Polygon.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Filled"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.PolyBezier.Continuous"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polygon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.Winding"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.StartIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.NumPts"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polygon"/>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.NumPts"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.Winding"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polygon">
        <short><i>Polygon</i>    draws a closed, many-sided shape on the canvas, using the value   of Pen</short>
        <descr>Method:   TCanvas.Polygon<br/>





Params:   Points: array of TPoint; Winding: Boolean = False; StartIndex: Integer = 0; NumPts: Integer = -1<br/>





Returns:  Nothing<br/><br/>





Use <i>Polygon</i>




 to draw a closed, many-sided shape on the canvas, using the value of <i>Pen</i>




. After drawing the complete shape, <i>Polygon</i>




 fills the shape using the value of <i>Brush</i>




.<br/><br/>





The <i>Points</i>




 parameter is an array of points that give the vertices of the polygon.<br/><i>Winding</i>




 determines how the polygon is filled. When <i>Winding</i>




 is True, <i>Polygon</i>





  fills the shape using the <i>Winding</i>




 fill algorithm. <br/>





When <i>Winding</i>




 is False, <i>Polygon</i>




 uses the even-odd (alternative) fill algorithm.<br/><i>StartIndex</i>




 gives the index of the first point in the array to use. All points before this are ignored.<br/><i>NumPts</i>




 indicates the number of points to use, starting at <i>StartIndex</i>




.<br/>





If <i>NumPts</i>




 is -1 (the default), <i>Polygon</i>




 uses all points from <i>StartIndex</i>




 to the end of the array.<br/>





The first point is always connected to the last point.<br/>





To draw a polygon on the canvas, without filling it, use the <i>Polyline</i>




 method,  specifying the first point a second time at the end.</descr>
        <seealso><link id="TCanvas.PolyLine"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polygon.Points"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polyline">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.StartIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.NumPts"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polyline"/>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.Points"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.NumPts"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Polyline">
        <short><i>Polyline</i>    connects a set of points on the canvas</short>
        <descr>Method:   TCanvas.Polyline<br/>






Params:   Points: array of TPoint; StartIndex: Integer = 0; NumPts: Integer = -1<br/>






Returns:  Nothing<br/><br/>






Use <i>Polyline</i>





 to connect a set of points on the <i>Canvas</i>





. If you specify only two points, <i>Polyline</i>





 draws a single line.<br/>






The <i>Points</i>





 parameter is an array of points to be connected.<br/><i>StartIndex</i>





 identifies the first point in the array to use.<br/><i>NumPts</i>





 indicates the number of points to use. If <i>NumPts</i>





 is -1 (the default), <i>PolyLine</i>





 uses all the points from <i>StartIndex</i>





 to the end of the array.<br/>






Calling the <i>MoveTo</i>





 function with the value of the first point, and then repeatedly calling <i>LineTo</i>





 with all subsequent points will draw the same image on the canvas. However, unlike <i>LineTo</i>





, <i>Polyline</i>





 does not change the value of <i>PenPos</i>





.</descr>
        <seealso>
          <link id="TCanvas.MoveTo"/>
          <link id="TCanvas.LineTo"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Polyline.Points"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Rectangle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Rectangle.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Rectangle.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Rectangle.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Rectangle.Y2"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.Rectangle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Rectangle.Rect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.RoundRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.X1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.Y1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.X2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.Y2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.RX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.RY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.RoundRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.Rect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.RX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.RoundRect.RY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.TextOut">
        <short>Writes the <i>Text</i> string at the position <i>X, Y</i> on the canvas and leaves the pen at the end of the text</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextOut.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextOut.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextOut.Text"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.TextRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.Text"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCanvas.TextRect">
        <short>Writes <i>Text</i> string within a specified rectangle, according to predefined <i>Style</i></short>
        <descr>Writes <i>Text</i> string within a specified rectangle, according to predefined <i>Style</i><br/>
The boundaries of the rectangle are specified in <i>ARect</i><br/><i>X, Y</i> specify the starting point for writing the <i>Text</i> within the rectangle <br/><i>TextStyle</i> determines whether the text is justified, centered, word-wrapped etc. If the <i>Style</i> argument is omitted, defaults are assumed</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.Text"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextRect.Style"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCanvas.TextExtent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.TextExtent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextExtent.Text"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCanvas.TextHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.TextHeight.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextHeight.Text"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCanvas.TextWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.TextWidth.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.TextWidth.Text"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCanvas.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.HandleAllocated.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCanvas.GetUpdatedHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCanvas.GetUpdatedHandle.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.GetUpdatedHandle.ReqState"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCanvas.ClipRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCanvas.PenPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCanvas.Pixels">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pixels.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanvas.Pixels.Y"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCanvas.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCanvas.TextStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCanvas.LockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.AutoRedraw">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.Brush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.CopyMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.Pen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.Region">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCanvas.OnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TSharedImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSharedImage.FRefCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TSharedImage.Reference">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TSharedImage.Release">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TSharedImage.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TSharedImage.RefCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TSharedImage.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSharedImage.HandleAllocated.Result"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TBitmapNativeType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapNativeType.bnNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapNativeType.bnWinBitmap"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapNativeType.bnXPixmap"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapNativeType.bnIcon"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TBitmapNativeTypes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBitmapHandleType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapHandleType.bmDIB"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapHandleType.bmDDB"><short/></element>
      <!-- object Visibility: default -->
      <element name="TBitmapImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FMaskHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FPalette">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FDIBHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FSaveStream">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmapImage.FSaveStreamType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmapImage.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmapImage.FreeMaskHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TBitmapImage.ReleaseHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmapImage.ReleaseHandle.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmapImage.IsEmpty">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmapImage.IsEmpty.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmapImage.GetPixelFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmapImage.GetPixelFormat.Result"><short/></element>
      <!-- variable Visibility: public -->
      <element name="TBitmapImage.FDIB">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TBitmapImage.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBitmapImage.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmapImage.HandleAllocated.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmapImage.GetHandleType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmapImage.GetHandleType.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TBitmapImage.SaveStream">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmapImage.SaveStreamType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBitmapInternalStateFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBitmapInternalStateFlag.bmisCreatingCanvas"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TBitmapInternalState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBitmap">
        <short><i>TBitmap</i> is the data of an image, and can be loaded from a file, stream or resource in .bmp  or .xpm format</short>
        <descr><i>TBitmap</i> is the data of an image. The image can be loaded from a file, stream or resource in .bmp (windows bitmap format) or .xpm (XPixMap format)<br/>
The loading routine automatically recognizes the format, so it is also used to load the images from Delphi form streams (e.g. .dfm files).<br/>
When the handle is created, it is up to the interface (gtk, win32, ...) to convert it automatically to the best internal format. That is why the <i>Handle</i> is interface dependent.<br/>
To access the raw data, see TLazIntfImage in IntfGraphics.pas</descr>
        <seealso><link id="#lcl.IntfGraphics.TLazIntfImage"/></seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FImage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FPalette">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FPixelFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FTransparentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FTransparentMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBitmap.FInternalState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.FreeCanvasContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBitmap.GetCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetCanvas.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.CreateCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBitmap.GetMonochrome">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetMonochrome.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetHandle.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.SetMaskHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetMaskHandle.NewMaskHandle"><short/></element>
      <!-- function Visibility: private -->
      <element name="TBitmap.GetHandleType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetHandleType.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.SetHandleType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetHandleType.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.SetMonochrome">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetMonochrome.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.SetPixelFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetPixelFormat.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBitmap.UpdatePixelFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Changed.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.Changing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Changing.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.Draw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Draw.DestCanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Draw.DestRect"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetEmpty">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetEmpty.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetPalette.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetWidth.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetHandle.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBitmap.GetMaskHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetMaskHandle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.HandleNeeded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.MaskHandleNeeded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.PaletteNeeded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.UnshareImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.UnshareImage.CopyContent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.FreeSaveStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.SetWidthHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetWidthHeight.NewWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetWidthHeight.NewHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetHeight.NewHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.SetPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetPalette.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.SetTransparentMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetTransparentMode.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SetWidth.NewWidth"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.StoreOriginalStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.StoreOriginalStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.StoreOriginalStream.Size"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.WriteStreamWithFPImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteStreamWithFPImage.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteStreamWithFPImage.WriteSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteStreamWithFPImage.WriterClass"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.InitFPImageReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.InitFPImageReader.ImgReader"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.InitFPImageWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.InitFPImageWriter.ImgWriter"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.FinalizeFPImageReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.FinalizeFPImageReader.ImgReader"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBitmap.FinalizeFPImageWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.FinalizeFPImageWriter.ImgWriter"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TBitmap.Create">
        <short><i>BitMap</i> constructor</short>
        <descr><i>BitMap</i> constructor. The supplied code can <b>override</b> the definition from ancestor classes</descr>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TBitmap.Destroy">
        <short><i>BitMap</i> destructor</short>
        <descr><i>BitMap</i> destructor. The supplied code can <b>override</b> the method defined for ancestor classes</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.Assign">
        <short><i>Assign</i>: find out about the Source of the call.</short>
        <descr><i>Assign</i>: find out about the Source of the call. If the <i>BitMap</i> data are already in use, the data are shared; if not, a new <i>BitMap</i> is produced</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Assign.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.FreeImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBitmap.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.HandleAllocated.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.MaskHandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.MaskHandleAllocated.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.PaletteAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.PaletteAllocated.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.CreateFromBitmapHandles">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.CreateFromBitmapHandles.SrcBitmap"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.CreateFromBitmapHandles.SrcMaskBitmap"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.CreateFromBitmapHandles.SrcRect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromDevice">
        <short><i>LoadFromDevice</i>: obtain <i>BitMap</i> data from a device with Handle <i>DC</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromDevice.DC"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.LazarusResourceTypeValid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.LazarusResourceTypeValid.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LazarusResourceTypeValid.ResourceType"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromStream">
        <short><i>LoadFromStream</i>: obtains <i>BitMap</i> data from a <i>Stream</i></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromStream.Stream"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromLazarusResource">
        <short><i>LoadFromLazarusResource</i>: obtain data from a valid Lazarus Resource Stream</short>
        <descr><i>LoadFromLazarusResource</i>: obtain data from a valid Lazarus Resource Stream<br/>
Checks for the presence of a valid Lazarus Resource, then uses <i>LoadFromStream</i> to acquire the data</descr>
        <seealso><link id="TBitmap.LoadFromStream"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromLazarusResource.ResName"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromResourceName">
        <short>
          <i>ToDo</i>
        </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromResourceName.Instance"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromResourceName.ResName"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromResourceID">
        <short>
          <i>ToDo</i>
        </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromResourceID.Instance"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromResourceID.ResID"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromMimeStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromMimeStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromMimeStream.MimeType"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.GetSupportedSourceMimeTypes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.GetSupportedSourceMimeTypes.List"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetDefaultMimeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetDefaultMimeType.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetFileExtensions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetFileExtensions.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.LoadFromXPMFile">
        <short><i>LoadFromXPMFile</i>: obtain data from file in native <i>PixMap</i> format</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.LoadFromXPMFile.Filename"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.Mask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.Mask.ATransparentColor"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.SaveToStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.SaveToStream.Stream"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.ReadStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStream.UseSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStream.Size"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.WriteStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteStream.WriteSize"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.ReleaseHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.ReleaseHandle.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.ReleasePalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.ReleasePalette.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetFPReaderForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetFPReaderForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.GetFPReaderForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetFPWriterForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetFPWriterForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.GetFPWriterForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetDefaultFPReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetDefaultFPReader.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.GetDefaultFPWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.GetDefaultFPWriter.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.ReadStreamWithFPImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStreamWithFPImage.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStreamWithFPImage.UseSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStreamWithFPImage.Size"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.ReadStreamWithFPImage.ReaderClass"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBitmap.WriteNativeStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteNativeStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteNativeStream.WriteSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBitmap.WriteNativeStream.SaveStreamType"><short/></element>
      <!-- function Visibility: public -->
      <element name="TBitmap.CreateIntfImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBitmap.CreateIntfImage.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TBitmap.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.HandleType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.MaskHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.Monochrome">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.PixelFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.TransparentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBitmap.TransparentMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPixmap">
        <short><i>PixMap</i>  - a class derived from <i>TBitMap</i> , with wrapper to deal specifically with PixMaps (ie using 'XPM' format)</short>
        <descr><i>PixMap</i>
  - Checks that specified resources (PixMap image, File for storage, Stream for writing) are of correct type and format, organises saving and writing</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TPixmap.LazarusResourceTypeValid">
        <short><i>LazarusResourceTypeValid</i> - checks that specified resource has correct format</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPixmap.LazarusResourceTypeValid.Result">
        <short>Returns True if resource type is 'XPM'</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPixmap.LazarusResourceTypeValid.ResourceType"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPixmap.WriteStream">
        <short><i>WriteStream</i> - writes PixMap data to specified stream</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPixmap.WriteStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPixmap.WriteStream.WriteSize">
        <short><i>True</i> if size of data in stream has been specified</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TPixmap.GetDefaultFPReader">
        <short><i>GetDefaultFPReader</i> - obtains the correct tool</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPixmap.GetDefaultFPReader.Result">
        <short>Returns the correct tool for reading</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TPixmap.GetDefaultFPWriter">
        <short><i>GetDefaultFPWriter</i> -  obtains the correct tool</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPixmap.GetDefaultFPWriter.Result">
        <short>Returns the correct tool for writing</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TFPImageBitmap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetFileExtensions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetFileExtensions.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.IsFileExtensionSupported">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.IsFileExtensionSupported.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.IsFileExtensionSupported.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetFPReaderForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetFPReaderForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.GetFPReaderForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetFPWriterForFileExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetFPWriterForFileExt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.GetFPWriterForFileExt.FileExtension"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetDefaultFPReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetDefaultFPReader.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetDefaultFPWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetDefaultFPWriter.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.LazarusResourceTypeValid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.LazarusResourceTypeValid.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.LazarusResourceTypeValid.ResourceType"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFPImageBitmap.ReadStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.ReadStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.ReadStream.UseSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.ReadStream.Size"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFPImageBitmap.WriteStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.WriteStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFPImageBitmap.WriteStream.WriteSize"><short/></element>
      <!-- function Visibility: public -->
      <element name="TFPImageBitmap.GetDefaultMimeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFPImageBitmap.GetDefaultMimeType.Result"><short/></element>
      <!-- object Visibility: default -->
      <element name="TPortableNetworkGraphic">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TPortableNetworkGraphic.GetFileExtensions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPortableNetworkGraphic.GetFileExtensions.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TPortableNetworkGraphic.GetDefaultFPReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPortableNetworkGraphic.GetDefaultFPReader.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TPortableNetworkGraphic.GetDefaultFPWriter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPortableNetworkGraphic.GetDefaultFPWriter.Result"><short/></element>
      <!-- object Visibility: default -->
      <element name="TIcon">
        <short><i>TIcon</i>  - icons, small images typically associated with applications, controls, etc. Stored in files with .ico extension</short>
        <descr><i>TIcon</i>
 reads and writes .ICO file format.<br/>

A .ico file typically contains several versions of the same image. <br/>

When loading, the largest/most colourful image is loaded as the <i>TBitmap</i>
 and so can be handled as any other bitmap. Any other versions of the images are available via the  <i>Bitmaps</i>
 property<br/>

Writing is not (yet) implemented.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIcon.FBitmaps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIcon.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIcon.ReadData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIcon.InitFPImageReader">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIcon.InitFPImageReader.ImgReader"><short/></element>
      <!-- function Visibility: public -->
      <element name="TIcon.GetFileExtensions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIcon.GetFileExtensions.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TIcon.Bitmaps">
        <short><i>Bitmaps</i> - the list of alternative bitmaps (of various sizes)</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TIcon.Destroy">
        <short><i>TIcon</i> destructor</short>
        <descr><i>TIcon</i> destructor. Method can <b>override</b> the destructor defined in ancestor classes</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIcon.AddBitmap">
        <short>Add a bitmap to the current list</short>
        <descr>Note that Ownership passes to <i>TIcon</i></descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIcon.AddBitmap.Bitmap"><short/></element>
      <!-- function Visibility: default -->
      <element name="GraphicFilter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GraphicFilter.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GraphicFilter.GraphicClass"><short/></element>
      <!-- function Visibility: default -->
      <element name="GraphicExtension">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GraphicExtension.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GraphicExtension.GraphicClass"><short/></element>
      <!-- function Visibility: default -->
      <element name="GraphicFileMask">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GraphicFileMask.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GraphicFileMask.GraphicClass"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetGraphicClassForFileExtension">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetGraphicClassForFileExtension.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetGraphicClassForFileExtension.FileExt"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetFPImageReaderForFileExtension">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetFPImageReaderForFileExtension.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetFPImageReaderForFileExtension.FileExt"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetFPImageWriterForFileExtension">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetFPImageWriterForFileExtension.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="GetFPImageWriterForFileExtension.FileExt"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TGetColorStringProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetColorStringProc.s"><short/></element>
      <!-- function Visibility: default -->
      <element name="ColorToIdent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ColorToIdent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ColorToIdent.Color"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ColorToIdent.Ident"><short/></element>
      <!-- function Visibility: default -->
      <element name="IdentToColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IdentToColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToColor.Ident"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToColor.Color"><short/></element>
      <!-- function Visibility: default -->
      <element name="SysColorToSysColorIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SysColorToSysColorIndex.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="SysColorToSysColorIndex.Color"><short/></element>
      <!-- function Visibility: default -->
      <element name="ColorToRGB">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ColorToRGB.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ColorToRGB.Color"><short/></element>
      <!-- function Visibility: default -->
      <element name="ColorToString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ColorToString.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ColorToString.Color"><short/></element>
      <!-- function Visibility: default -->
      <element name="StringToColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="StringToColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="StringToColor.S"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="GetColorValues">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetColorValues.Proc"><short/></element>
      <!-- function Visibility: default -->
      <element name="Blue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Blue.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Blue.rgb"><short/></element>
      <!-- function Visibility: default -->
      <element name="Green">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Green.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Green.rgb"><short/></element>
      <!-- function Visibility: default -->
      <element name="Red">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Red.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Red.rgb"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="RedGreenBlue">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RedGreenBlue.rgb"><short/></element>
      <!-- argument Visibility: default -->
      <element name="RedGreenBlue.Red"><short/></element>
      <!-- argument Visibility: default -->
      <element name="RedGreenBlue.Green"><short/></element>
      <!-- argument Visibility: default -->
      <element name="RedGreenBlue.Blue"><short/></element>
      <!-- function Visibility: default -->
      <element name="FPColorToTColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FPColorToTColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FPColorToTColor.FPColor"><short/></element>
      <!-- function Visibility: default -->
      <element name="TColorToFPColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TColorToFPColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TColorToFPColor.c"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="GetCharsetValues">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCharsetValues.Proc"><short/></element>
      <!-- function Visibility: default -->
      <element name="CharsetToIdent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CharsetToIdent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="CharsetToIdent.Charset"><short/></element>
      <!-- argument Visibility: default -->
      <element name="CharsetToIdent.Ident"><short/></element>
      <!-- function Visibility: default -->
      <element name="IdentToCharset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IdentToCharset.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToCharset.Ident"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToCharset.Charset"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetDefFontCharSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDefFontCharSet.Result"><short/></element>
      <!-- function Visibility: default -->
      <element name="IsFontNameXLogicalFontDesc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IsFontNameXLogicalFontDesc.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IsFontNameXLogicalFontDesc.LongFontName"><short/></element>
      <!-- function Visibility: default -->
      <element name="XLFDNameToLogFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="XLFDNameToLogFont.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="XLFDNameToLogFont.XLFDName"><short/></element>
      <!-- function Visibility: default -->
      <element name="ExtractXLFDItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtractXLFDItem.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ExtractXLFDItem.XLFDName"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ExtractXLFDItem.Index"><short/></element>
      <!-- function Visibility: default -->
      <element name="ExtractFamilyFromXLFDName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtractFamilyFromXLFDName.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ExtractFamilyFromXLFDName.XLFDName"><short/></element>
      <!-- function Visibility: default -->
      <element name="ClearXLFDItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClearXLFDItem.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ClearXLFDItem.LongFontName"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ClearXLFDItem.Index"><short/></element>
      <!-- function Visibility: default -->
      <element name="ClearXLFDHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClearXLFDHeight.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ClearXLFDHeight.LongFontName"><short/></element>
      <!-- function Visibility: default -->
      <element name="ClearXLFDPitch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClearXLFDPitch.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ClearXLFDPitch.LongFontName"><short/></element>
      <!-- function Visibility: default -->
      <element name="ClearXLFDStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClearXLFDStyle.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ClearXLFDStyle.LongFontName"><short/></element>
      <!-- function Visibility: default -->
      <element name="XLFDHeightIsSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="XLFDHeightIsSet.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="XLFDHeightIsSet.LongFontName"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TOnLoadGraphicFromClipboardFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnLoadGraphicFromClipboardFormat.Dest"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TOnLoadGraphicFromClipboardFormat.ClipboardType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TOnLoadGraphicFromClipboardFormat.FormatID"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TOnSaveGraphicToClipboardFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOnSaveGraphicToClipboardFormat.Src"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TOnSaveGraphicToClipboardFormat.ClipboardType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TOnSaveGraphicToClipboardFormat.FormatID"><short/></element>
      <!-- variable Visibility: default -->
      <element name="OnLoadGraphicFromClipboardFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="OnSaveGraphicToClipboardFormat">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="TestStreamBitmapNativeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TestStreamBitmapNativeType.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TestStreamBitmapNativeType.AStream"><short/></element>
      <!-- function Visibility: default -->
      <element name="TestStreamIsBMP">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TestStreamIsBMP.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TestStreamIsBMP.AStream"><short/></element>
      <!-- function Visibility: default -->
      <element name="TestStreamIsXPM">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TestStreamIsXPM.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TestStreamIsXPM.AStream"><short/></element>
      <!-- function Visibility: default -->
      <element name="TestStreamIsIcon">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TestStreamIsIcon.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TestStreamIsIcon.AStream"><short/></element>
      <!-- function Visibility: default -->
      <element name="XPMToPPChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="XPMToPPChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="XPMToPPChar.XPM"><short/></element>
      <!-- function Visibility: default -->
      <element name="LazResourceXPMToPPChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="LazResourceXPMToPPChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="LazResourceXPMToPPChar.ResourceName"><short/></element>
      <!-- function Visibility: default -->
      <element name="ReadXPMFromStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ReadXPMFromStream.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMFromStream.Stream"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMFromStream.Size"><short/></element>
      <!-- function Visibility: default -->
      <element name="ReadXPMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ReadXPMSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMSize.XPM"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMSize.Width"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMSize.Height"><short/></element>
      <!-- argument Visibility: default -->
      <element name="ReadXPMSize.ColorCount"><short/></element>
      <!-- variable Visibility: default -->
      <element name="ScreenInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="FontResourceCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="PenResourceCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="BrushResourceCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="FontCharsets">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- Graphics -->
  </package>
</fpdoc-descriptions>
