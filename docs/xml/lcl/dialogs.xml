<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
  ====================================================================
    Dialogs
  ====================================================================
-->
    <module name="Dialogs">
      <short/>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FileUtil">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TMsgDlgType">
        <short>Constants to define the types of message dialogs.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgType.mtWarning">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgType.mtError">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgType.mtInformation">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgType.mtConfirmation">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgType.mtCustom">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TMsgDlgBtn">
        <short>Constants to define possible buttons on a dialog.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbYes">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbNo">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbOK">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbCancel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbAbort"/>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbRetry">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbIgnore">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbAll">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbNoToAll">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbYesToAll">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbHelp">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbClose">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TMsgDlgButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mbYesNoCancel">
        <short>A "set" constant to show a Yes, a No and a Cancel button on a messagedialog.</short>
        <descr>A "set" constant to show a Yes, a No and a Cancel button on a messagedialog.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mbYesNo">
        <short>A "set" constant to show a Yes and a No button on a messagedialog.</short>
        <descr>A "set" constant to show a Yes and a No button on a messagedialog.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mbOKCancel">
        <short>A "set" constant to show an OK and a Cancel button on a messagedialog.</short>
        <descr>A "set" constant to show an OK and a Cancel button on a messagedialog.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mbAbortRetryIgnore">
        <short>A "set" constant to show an Abort, a Retry and an Ignore button on a messagedialog.</short>
        <descr>A "set" constant to show an Abort, a Retry and an Ignore button on a messagedialog.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="MsgDlgBtnToBitBtnKind">
        <short>A constant array used to convert the kind of message buttons to the kind of BitButton.</short>
        <descr>This array gives you for each possible button type in a messagebox the corresponding kind of BitButton. For instance MsgDlgBtnToBitBtnKind[mbYes] has the value of bkYes. It is the reverse of BitBtnKindToMsgDlgBtn.</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="BitBtnKindToMsgDlgBtn">
        <short>A constant array used to convert the kind of BitButton to the kind of message buttons.</short>
        <descr>This array gives you for each BitButton the corresponding type of button on a message dialog. For instance BitBtnKindToMsgDlgBtn[bkOK] has the value of mbOK. It is the reverse if MsgDlgBtnToBitBtnKind.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TCommonDialog">
        <short>Common Dialog</short>
        <descr>Common Dialog: the base type fromwhich all other dialogs are derived. Use the "Create" method to make an instance of the dialog, the "Execute" method to show it to the user and the "Free" method to release it and free the used resources.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FOnCanClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FOnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FOnClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FUserChoice">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCommonDialog.FHelpContext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCommonDialog.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCommonDialog.SetHandle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCommonDialog.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCommonDialog.SetHeight.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCommonDialog.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCommonDialog.SetWidth.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCommonDialog.DoExecute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCommonDialog.DoExecute.Result">
        <short/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TCommonDialog.FCompStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCommonDialog.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCommonDialog.Create.TheOwner">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCommonDialog.Execute">
        <short>A public method of a dialog showing the appropriate dialog.</short>
        <descr>Use the execute method of a dialog to show it and then check the result to see if the user made a valid choice and pressed the OK button. The result of this method is a boolean. If it is true the user pressed OK.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCommonDialog.Execute.Result">
        <short>Boolean</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCommonDialog.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCommonDialog.UserChoice">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCommonDialog.Close">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCommonDialog.DoShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCommonDialog.DoClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCommonDialog.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCommonDialog.HandleAllocated.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.OnClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.OnCanClose">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.OnShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.HelpContext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCommonDialog.Title">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFileDialog">
        <short>File Dialog</short>
        <descr>File Dialog: allows selection of a file from the current directory.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FDefaultExt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FFileName">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FFiles">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FFilter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FFilterIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FHistoryList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FInitialDir">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FOldWorkingDir">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileDialog.FOnHelpClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFileDialog.SetDefaultExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileDialog.SetDefaultExt.AValue">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TFileDialog.DoExecute">
        <short>Internal procedure called to execute the dialog.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFileDialog.DoExecute.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileDialog.SetFileName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileDialog.SetFileName.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileDialog.SetFilter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileDialog.SetFilter.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileDialog.SetHistoryList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileDialog.SetHistoryList.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFileDialog.Create">
        <short>Public method to create a FileDialog.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileDialog.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFileDialog.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TFileDialog.Execute">
        <short>Public method which causes the dialog to be shown.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFileDialog.Execute.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileDialog.Files">
        <short>Stringlist which stored the selected files.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileDialog.HistoryList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.Title">
        <short>Specifies the caption of the dialog.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.DefaultExt">
        <short>Property to set the default file extension for the file dialog box.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.FileName">
        <short>String property to store the name of the file chosen by the user.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.Filter">
        <short>A string property which contains possible filters.</short>
        <descr>This is a string which contains the filters a user can choose from. The available filters and their description are separated by pipe symbols. To set this property during runtime assign a value like: "All files|*.*|Lazarus Project files|*.lpr"</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.FilterIndex">
        <short>Integer property setting the used file filter.</short>
        <descr>This property sets which file filter is teh default. Set this porperty to 2 to set the second filter as default.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.InitialDir">
        <short>Set the directory the dialog shows on opening.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFileDialog.OnHelpClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TOpenOption">
        <short>A set of possible options which can be used in OpenDialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofReadOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofOverwritePrompt">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofHideReadOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoChangeDir">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofShowHelp">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoValidate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofAllowMultiSelect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofExtensionDifferent">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofPathMustExist">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofFileMustExist">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofCreatePrompt">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofShareAware">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoReadOnlyReturn">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoTestFileCreate">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoNetworkButton">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoLongNames">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofOldStyleDialog">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofNoDereferenceLinks">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofEnableIncludeNotify">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofEnableSizing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofDontAddToRecent">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofForceShowHidden">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofViewDetail">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOpenOption.ofAutoPreview">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TOpenOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultOpenDialogOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TOpenDialog">
        <short>Open Dialog</short>
        <descr>Open Dialog: open a file in the current directory, selected by File Dialog. If the required file is not in the current directory, another directory can be selected with Select Directory</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TOpenDialog.FOnFolderChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TOpenDialog.FOnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TOpenDialog.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TOpenDialog.FLastSelectionChangeFilename">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TOpenDialog.DereferenceLinks">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TOpenDialog.CheckFile">
        <short>A protected function which checkes if the choosen file meets all requirements.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TOpenDialog.CheckFile.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOpenDialog.CheckFile.AFilename">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TOpenDialog.CheckAllFiles">
        <short>A protected method which call CheckFile for each selected file.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TOpenDialog.CheckAllFiles.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TOpenDialog.DoExecute">
        <short>Internal procedure called to execute the dialog.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TOpenDialog.DoExecute.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TOpenDialog.Create">
        <short>Public method to create a OpenDialog</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TOpenDialog.Create.TheOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TOpenDialog.DoFolderChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TOpenDialog.DoSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TOpenDialog.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TOpenDialog.OnFolderChange">
        <short>Event triggered when the user changes the folder in the OpenDialog.</short>
        <descr>This event is called when the user changes the folder (directory) in the OpenDialog. Note: changing the folder will also trigger the OnSelectionChange event.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TOpenDialog.OnSelectionChange">
        <short>Event triggered when the user changes the selection made in the OpenDialog.</short>
        <descr>This event is triggered when the user changes the selected file in the OpenDialog. Note: When the user changes the folder OnSelectionChange will be called first.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TSaveDialog">
        <short>Save Dialog</short>
        <descr>Save Dialog:  invoked when the application requires to save a file. If the file is already open or a filename has been specified, then the current buffer is written to that file; if no file is specified, the Save File As dialog is invoked and the buffer is saved to that file.</descr>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TSaveDialog.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSaveDialog.Create.AOwner">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TSelectDirectoryDialog">
        <short>Select Directory Dialog</short>
        <descr>Select Directory Dialog: allows the user to select a directory when the diredtory structure is displayed as a tree.</descr>
      </element>
      <!-- function Visibility: protected -->
      <element name="TSelectDirectoryDialog.CheckFile">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSelectDirectoryDialog.CheckFile.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectDirectoryDialog.CheckFile.AFilename">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TSelectDirectoryDialog.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectDirectoryDialog.Create.AOwner">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TColorDialog">
        <short>Colour Dialog</short>
        <descr>Colour Dialog:  presents a palette of colours to allow the user to select the required colour for text or graphics. 

Call the Execute function to show the color dialog.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColorDialog.FColor">
        <short>Internal property to store the value of the chosen color.</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TColorDialog.Create">
        <short>The method whoch create an instance of the TColorDialog.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColorDialog.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorDialog.Title">
        <short>The caption for the color dialog.</short>
        <descr>You can set the caption of the color dialog by changing this property.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorDialog.Color">
        <short>A published property which reads en sets the FColor property</short>
        <descr>When the Color dialog has been shown and the user pressed OK, the FColor property contains the chosen color.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TColorButton">
        <short>Colour Button</short>
        <descr>Colour Button: Pressing this button causes the Colour Dialog to be presented, allowing a choice of colour for text or graphics.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColorButton.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColorButton.FButtonColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColorButton.FColorDialog">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TColorButton.FOnColorChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TColorButton.SetBorderWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColorButton.SetBorderWidth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColorButton.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColorButton.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColorButton.SetButtonColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColorButton.SetButtonColor.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TColorButton.ShowColorDialog">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TColorButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TColorButton.Create.AnOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TColorButton.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.ButtonColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnColorChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TColorButton.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFontDialogOption">
        <short>A set of constants to set the options of a Font dialog.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdAnsiOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdTrueTypeOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdEffects">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdFixedPitchOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdForceFontExist">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoFaceSel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoOEMFonts">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoSimulations">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoSizeSel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoStyleSel">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdNoVectorFonts">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdShowHelp">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdWysiwyg">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdLimitSize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdScalableOnly">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFontDialogOption.fdApplyButton">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFontDialogOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFontDialog">
        <short>Font Dialog</short>
        <descr>Font Dialog: opens a dialog allowing choice of a font for textual displays</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FMaxFontSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FMinFontSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FOnApplyClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFontDialog.FPreviewText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFontDialog.SetFont">
        <short>A private method which sets the font of the dialog.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFontDialog.SetFont.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFontDialog.ApplyClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFontDialog.Create">
        <short>Public method to create a FontDialog.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFontDialog.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFontDialog.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.Title">
        <short>Specifies the caption of the dialog.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.Font">
        <short>Property to store the chosen font.</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.MinFontSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.MaxFontSize"/>
      <!-- property Visibility: published -->
      <element name="TFontDialog.Options">
        <short>A set of options available from TFontDialogOptions</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.OnApplyClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TFontDialog.PreviewText">
        <short>The text displayed in the preview pane of the dialog.</short>
        <descr>Standard the preview plane of the dialog shows all letters both in uppercase and lowercase.</descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFindOption">
        <short>A set of possible options which can be used in Find-dialogs.</short>
        <descr>A set of possible options which can be used in Find-dialogs.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frDown">
        <short>If set the "Down" radiobutton is selected.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frFindNext">
        <short>This option will be set when the user presses "Find Next"</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frHideMatchCase">
        <short>If set the "Match case" checkbox is hidden from the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frHideWholeWord">
        <short>If set the "Whole word" checkbox is hidden from the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frHideUpDown">
        <short>If set the "Up" and "Down" radiobuttons are hidden from the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frMatchCase">
        <short>This flag is set when the user checks the "Match case" checkbox.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frDisableMatchCase">
        <short>If set the "Match case" checkbox is disabled in the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frDisableUpDown">
        <short>If set the "Up" and "Down" radiobuttons are disabled in the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frDisableWholeWord">
        <short>If set the "Whole word" checkbox is disabled in the Find dialog</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frReplace">
        <short>This flag is set if only the first occurence of the search string is to be replaced with the replace string.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frReplaceAll">
        <short>This flag is set if all occurences of the search string are to be replaced with the replace string.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frWholeWord">
        <short>This flag is set when the user checks the "Whole word" checkbox.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFindOption.frShowHelp">
        <short>If set the dialog will display a help button.</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFindOptions">
        <short>A set of TFindOption</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MessageDlg">
        <short>Show a message to the user and receive his response.</short>
        <descr>A MessageDlg can be used to show a message to the user and receive his response. The MessageDlg can be one of several types.

There are two versions of this function. The first version displays a dialog with the standard caption, the second version enables you to set the caption.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="MessageDlg.Result">
        <short>The result of this function is the button the user pressed to close the dialog.</short>
        <descr>The result of this function is the button the user pressed to close the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.DlgType">
        <short>The type of dialog to be shown</short>
        <descr>The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.Buttons">
        <short>Determines the buttons shown on the messagedialog</short>
        <descr>Buttons indicate which set of button captions have to be shown on the dialog. You can choose from predefined sets: mbAbortRetryIgnore, mbOKCancel, mbYesNo, mbYesNoCancel, or you can make your own set.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.HelpCtx">
        <short>HelpCtx is used to specify which topic form the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic form the help should be shown.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="MessageDlg">
        <short>Message Dialog</short>
        <descr>Message Dialog:  show a message to the user and receive his response. 

There are two versions of this function. The first version displays a dialog with the standard caption, the second version enables you to set the caption.

function MessageDlg(const aMsg: string; DlgType: TMsgDlgType; 
                    Buttons: TMsgDlgButtons; HelpCtx: Longint): Integer;
function MessageDlg(const aCaption, aMsg: string; DlgType: TMsgDlgType; 
                    Buttons: TMsgDlgButtons; HelpCtx: Longint): Integer;

    Two versions of this function, ie first 'Caption' argument is optional; if omitted, caption is missing from box

    This is the most complete and elaborate of the message dialogs, and allows the programmer considerable control over the appearance of the dialog box.<br/>
    The arguments defining the kind of box and its icon are types rather than integer constants, and the buttons can be specified as a set in square brackets eg [mbRetry, mbIgnore, mbAbort, mbCancel].<br/>
    The HelpCtx argument is not currently implemented and should be set to zero.
    The return value from the Function is the identity of the button pressed, expressed as an integer (see the definitions below, [mrNone..mrAll]).</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="MessageDlg.Result">
        <short>The result of this function is the button the user pressed to close the dialog.</short>
        <descr>The result of this function is the button the user pressed to close the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.aCaption">
        <short>Used to set the caption of the messagedialog.</short>
        <descr>Sets the caption of the messagedialog shown by this function.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.DlgType">
        <short>The type of dialog to be shown</short>
        <descr>The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.Buttons">
        <short>Determines the buttons shown on the messagedialog</short>
        <descr>Buttons indicate which set of button captions have to be shown on the dialog. You can choose from predefined sets: mbAbortRetryIgnore, mbOKCancel, mbYesNo, mbYesNoCancel, or you can make your own set.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlg.HelpCtx">
        <short>HelpCtx is used to specify which topic form the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic form the help should be shown.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="MessageDlgPos">
        <short>An extended MessageDlg function.</short>
        <descr>This function performs the same function as the <link id="MessageDlg">MessageDlg</link>
function. It has been extended with parameters to place the dialog on a certain postion on the screen in stead of in the centre of the screen.
The MessageDlgPos function does not enable you to choose the caption of the dialog.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="MessageDlgPos.Result">
        <short>The result of this function is the button the user pressed to close the dialog.</short>
        <descr>The result of this function is the button the user pressed to close the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.DlgType">
        <short>The type of dialog to be shown</short>
        <descr>The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.Buttons">
        <short>Determines the buttons shown on the messagedialog</short>
        <descr>Buttons indicate which buttons have to be shown on the dialog. You can choose from predefined sets: mbAbortRetryIgnore, mbOKCancel, mbYesNo, mbYesNoCancel, or you can make your own set.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.HelpCtx">
        <short>HelpCtx is used to specify which topic form the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic form the help should be shown.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.X">
        <short>X specifies the position of the left side of the dialog</short>
        <descr>X specifies the position of the left side of the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPos.Y">
        <short>Y specifies the position of the top side of the dialog</short>
        <descr>Y specifies the position of the top side of the dialog</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="MessageDlgPosHelp">
        <short>An extended MessageDlgPos function.</short>
        <descr>This function enables you to specify a Helpfile which has to be shown when the user presses F1.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="MessageDlgPosHelp.Result">
        <short>The result of this function is the button the user pressed to close the dialog.</short>
        <descr>The result of this function is the button the user pressed to close the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.aMsg">
        <short>The message to be shown.</short>
        <descr>The message shown to the user.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.DlgType">
        <short>The type of dialog to be shown</short>
        <descr>The DlgType parameter indicates the type of dialog to show. You can choose from mtWarning, mtError, mtInformation, mtConfirmation or mtCustom.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.Buttons">
        <short>Determines the buttons shown on the messagedialog</short>
        <descr>Buttons indicate which buttons have to be shown on the dialog. You can choose from predefined sets: mbAbortRetryIgnore, mbOKCancel, mbYesNo, mbYesNoCancel, or you can make your own set.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.HelpCtx">
        <short>HelpCtx is used to specify which topic form the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic form the help should be shown.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.X">
        <short>X specifies the position of the left side of the dialog</short>
        <descr>X specifies the position of the left side of the dialog</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.Y">
        <short>Y specifies the position of the top side of the dialog</short>
        <descr>Y specifies the position of the top side of the dialog</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageDlgPosHelp.HelpFileName">
        <short>The Helpfile that has to be shown when the user presses F1</short>
        <descr>The name of the helpfile to be shown when the user presses F1 in the dialog.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="QuestionDlg">
        <short>Show a question to the user and get a response</short>
        <descr>QuestionDlg has the same functionality as MessageDlg except for the parameter Buttons which is of a different type. You can define your own captions and return values of this function.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="QuestionDlg.Result">
        <short>The result of this function is the button the user pressed to close the dialog.</short>
        <descr>The result of this function is the button the user pressed to close the dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="QuestionDlg.aCaption">
        <short>Used to set the caption of the question dialog.</short>
        <descr>Set the caption of the question dialog shown by this function.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="QuestionDlg.aMsg">
        <short>The question to be shown.</short>
        <descr>The question the user has to answer.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="QuestionDlg.DlgType">
        <short>The type of dialog to be shown in fact which icon will be shown.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="QuestionDlg.Buttons">
        <short>An array of return values and caption for the buttons on the question dialog.</short>
        <descr>Buttons is defined as a array of const. This means you can define any number of buttons to be shown. If your array consists of only predefined return values like mrOK and mrCancel, the standard OK and Cancel buttons will be shown.<br/>
The strength of this functions is however that you can fill the array like: [400, 'Yes!!!', 401, 'Are you mad?', 402, 'My mistake'],  which will create a dialog with three buttons; the captions of the buttons will be the strings given in the array. <br/>The return value of the function will be 400, 401 or 402, depending on whether the user clicked the 'Yes!!!', the 'Are you mad?' or the 'My mistake' button.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="QuestionDlg.HelpCtx">
        <short>HelpCtx is used to specify which topic form the help should be shown.</short>
        <descr>HelpCtx is used to specify which topic form the help should be shown.</descr>
      </element>
      <!-- procedure Visibility: default -->
      <element name="ShowMessage">
        <short>Show Message</short>
        <descr>Procedure ShowMessage (const Msg: string);

{ Defined in Dialogs.pp }

    The simplest message dialog: takes a simple string as argument, displays it in a stereotyped box, and waits for a mouse-click or enter-key event before returning to the calling routine or program.<br/>
    This is a modal procedure call, that is the box is displayed, receives focus, and does not relinquish focus until the OK box is clicked or otherwise selected.

Example

Program LazMessage;
Uses Dialogs;
begin
  ShowMessage ('This is a message from Lazarus')
end.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessage.aMsg">
        <short>A string constant containing the message to be shown.</short>
        <descr>A string constant containing the message to be shown.</descr>
      </element>
      <!-- procedure Visibility: default -->
      <element name="ShowMessageFmt">
        <short>Shows a message assembled from a format string and an array of arguments.</short>
        <descr>This procedure is an extension to the <link id="ShowMessage">ShowMessage</link>
 procedure. The parameters it takes are the same as the Format function.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessageFmt.aMsg">
        <short>The format string</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessageFmt.Params">
        <short>The parameters to be inserted in the message.</short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="ShowMessagePos">
        <short>Shows a message box at a given screen position.</short>
        <descr>Shows a message box at a given screen position.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessagePos.aMsg">
        <short>A string constant which is the message to ne shown.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessagePos.X">
        <short>The horizontal position of the messagebox.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowMessagePos.Y">
        <short>The vertical position of the messagebox.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="InputQuery">
        <short>Input Query</short>
        <descr>Function InputQuery(const ACaption, APrompt : String; 
                    MaskInput : Boolean; var Value : String) : Boolean;
Function InputQuery(const ACaption, APrompt : String; 
                                         var Value : String) : Boolean;

    Two versions of this function which displays a prompt and expects user input of textual data;<br/> the first includes a MaskInput boolean argument which determines whether the user input is masked out by asterisks in the text-input box (like during entry of a password), <br/> the second omits this property. <br/>The text entered by the user is returned in the variable argument 'Value'; <br/>the function result is a boolean which returns TRUE if the OK button was pressed, or FALSE if the box was closed by any other mechanism (such as clicking the 'Close' icon on the top title bar). <br/>Omitting the MaskInput argument is equivalent to setting it FALSE.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="InputQuery.Result">
        <short>This function returns a Boolean as result</short>
        <descr>If the result is True, the user pressed OK in the dialog box. Did the user press Cancel the result will be false.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.ACaption">
        <short>The caption for the dialogbox</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.APrompt">
        <short>The text asking the user for his input.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.MaskInput">
        <short>Determines if the dialog shows *s or the actual input.</short>
        <descr>Set MaskInput to true if you want to hide the input and display asterixes.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.Value">
        <short>The value the user entered.</short>
        <descr>When the DialogBox is shown the text in the Editbox will be Value. When ENTER is pressed or OK clicked, Value will be the text from the Editbox.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="InputQuery">
        <short>Use InputQuery to show a dialog box to get some input from the user</short>
        <descr>InputQuery works a lot like InputBox, however the result of InputQuery is a Boolean indicating whether the user pressed OK. If the result is false the user pressed Cancel.
If you want a default value to be returned when the user presses Cancel, use InputBox
There are two versions of this function, the difference between them is the ability to mask the users input.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="InputQuery.Result">
        <short>This function returns a Boolean as result</short>
        <descr>If the result is True, the user pressed OK in the dialog box. Did the user press Cancel the result will be false.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.ACaption">
        <short>The caption for the dialogbox</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.APrompt">
        <short>The text asking the user for his input.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputQuery.Value">
        <short>The value the user entered.</short>
        <descr>When the DialogBox is shown the text in the Editbox will be Value. When ENTER is pressed or OK clicked, Value will be the text from the Editbox.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="InputBox">
        <short>InputBox</short>
        <descr>Function InputBox(const ACaption, APrompt, ADefault : String) : String;

    Displays a box with defined title and prompt, and expects user input in a text box. A default string can optionally be displayed in the text box. The user-entered or default string is returned as the function result.

Example

Uses forms, lcltype, dialogs, controls;
procedure TryInputBox;
var userstring: string;
begin
  userstring := InputBox ('Get some text input', 
                          'Please type in some information', 'Some sample text');
  ShowMessage (userstring)
end;</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="InputBox.Result">
        <short>The result of this function is the string the user entered in the editbox.</short>
        <descr>The result of this function is the string the user entered in the editbox.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputBox.ACaption">
        <short>The caption for the dialogbox</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputBox.APrompt">
        <short>The text asking the user for his input.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="InputBox.ADefault">
        <short>Default value for dialog box</short>
        <descr>The value of the editbox in the dialog will have this value.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="PasswordBox">
        <short>Password Box</short>
        <descr>PasswordBox:  a specialised form of the InputQuery. The editbox on the dialog box will mask the input. The only parameters are aCaption and aPrompt.

Function PasswordBox(const ACaption, APrompt : String) : String;

    Behaves very similarly to the InputQuery function with MaskInput = TRUE; the difference is that the password that was typed in is returned as the result of the function (like InputBox).</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="PasswordBox.Result">
        <short>The string the user entered.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="PasswordBox.ACaption">
        <short>The caption for the dialog</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="PasswordBox.APrompt">
        <short>A prompt to ask for the users input.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SelectDirectory">
        <short>A function that allows to user to select a directory.</short>
        <descr>This function wil show a dialog which allows the user to select the required directory when the directory structure is displayed as a tree. <br/>Under Windows the caption from the resulting dialog cannot be set, but the label above the directory tree will have this value.<br/>
There are two version of this function, the second one having the ability to indicate whether hidden folders should be shown as well.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="SelectDirectory.Result">
        <short>A boolean indicating if the user pressed OK.</short>
        <descr>A boolean indicating if the user selected a directory and pressed OK.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.Caption">
        <short>A constant which sets the caption of the shown dialog.</short>
        <descr>A constant which sets the caption of the shown dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.InitialDirectory">
        <short>The directory the dialog should start in.</short>
        <descr>The directory the dialog should start in. <br/>If a valid directory is given, the selected directory in the tree will be set to this directory.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.Directory">
        <short>A variable which on exit contains the selected directory.</short>
        <descr>A variable which on exit contains the selected directory.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="SelectDirectory">
        <short>A function that allows to user to select a directory.</short>
        <descr>This function wil show a dialog which allows the user to select the required directory when the directory structure is displayed as a tree. <br/>Under Windows the caption from the resulting dialog cannot be set, but the label above the directory tree will have this value.<br/>
There are two version of this function, the second one having the ability to indicate whether hidden folders should be shown as well.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="SelectDirectory.Result">
        <short>A boolean indicating if the user pressed OK.</short>
        <descr>A boolean indicating if the user selected a directory and pressed OK.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.Caption">
        <short>A constant which sets the caption of the shown dialog.</short>
        <descr>A constant which sets the caption of the shown dialog.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.InitialDirectory">
        <short>The directory the dialog should start in.</short>
        <descr>The directory the dialog should start in. <br/>If a valid directory is given, the selected directory in the tree will be set to this directory.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.Directory">
        <short>A variable which on exit contains the selected directory.</short>
        <descr>A variable which on exit contains the selected directory.</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectDirectory.ShowHidden">
        <short>A boolean constant indicating whether hidden folders should be shown too.</short>
        <descr>A boolean constant indicating whether hidden folders should be shown too.</descr>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- Dialogs -->
  </package>
</fpdoc-descriptions>
