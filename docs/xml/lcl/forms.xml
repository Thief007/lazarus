<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Forms
  ====================================================================
-->
    <module name="Forms">
      <short>Contains definitions and descriptions for constructing the Forms which are the basis of the Lazarus Graphical User Interface</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="TypInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="AvgLvlTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Maps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustApp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="HelpIntfs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedure">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedureOfObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPosition">
        <short>Represents the Position and Size on Screen of an Form</short>
        <descr>
          <p>poDesigned - The Form appears exactly as it is positioned and sized in the Form Designer</p>
          <p>poDefault - The window manager decides how the form is to appear, in a default position and size</p>
          <p>poDefaultPosOnly - keeps the Designed size, but position determined by windowmanager</p>
          <p>poDefaultSizeOnly - keeps the Designed position, but size determined by windowmanager</p>
          <p>poScreenCenter - Centers the form on screen</p>
          <p>poDeskTopCenter - Centers the form on desktop</p>
          <p>poMainFormCenter - Centers the Form on the Main Form</p>
          <p>poOwnerFormCenter - Centers the Form on Owner form</p>
        </descr>
        <seealso/>
      </element>
      <element name="TPosition.poDesigned">
        <short>The Form appears exactly as it is positioned and sized in the Form Designer.
        </short>
      </element>
      <element name="TPosition.poDefault">
        <short>The window manager decides how the form is to appear, in a default position and size.
        </short>
      </element>
      <element name="TPosition.poDefaultPosOnly">
        <short>Keeps the designed size, but position determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poDefaultSizeOnly">
        <short>Keeps the designed position, but size determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poScreenCenter">
        <short>Centers the form on screen.
        </short>
      </element>
      <element name="TPosition.poDesktopCenter">
        <short>Centers the form on desktop (not recommended, use poScreenCenter).
        </short>
      </element>
      <element name="TPosition.poMainFormCenter">
        <short>Centers the Form on the Main Form.
        </short>
      </element>
      <element name="TPosition.poOwnerFormCenter">
        <short>Centers the Form on Owner form.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TWindowState">
        <short>Represents the actual State of the window on the screen.</short>
        <descr>
		      <p>The actual meaning of each value depends on the platform:</p>
          <p>Windows and Mac OS X - These operating systems support all values.</p>
          <p>X11 - The window state is a hint sent to the Window Manager, so more primitive Window Managers might ignore this hints.</p>
          <p>Windows CE - In Windows CE platforms where Application.ApplicationType = atKeyPadDevice or atPDA (like in Windows Phone, PocketPC and Windows Mobile), wsMinimized and wsNormal are understood as wsMaximized, which is the normal state for windows in this platform. An exception are windows with BorderStyle=bsDialog or bsNone, which are allowed to have a custom position and size. For more information please read http://wiki.lazarus.freepascal.org/Windows_CE_Development_Notes#Positioning_and_size_of_Dialogs_and_Forms</p>
          <p>Android - In this platform windows are always fullscreen.</p>
          <p>The valid values for this enumerated type are:</p>
          <p>wsNormal - The window appears normal</p>
          <p>wsMinimized - The window is minimized and is not shown in the screen, but only in the taskbar</p>
          <p>wsMaximized - The window appears maximized</p>
          <p>wsFullScreen - The window appears in full screen mode, as much as allowed by the platform.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWindowState.wsNormal">
        <short>Neither maximized nor minimized.</short>
      </element>
      <element name="TWindowState.wsMinimized">
        <short>Minimized to the taskbar.</short>
      </element>
      <element name="TWindowState.wsMaximized">
        <short>Maximized [to the full monitor?]</short>
      </element>
      <element name="TWindowState.wsFullScreen">
        <short>Maximized [to the work area? desktop?]</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TCloseAction">
        <short/>
        <descr/>
        <seealso>
          <link id="TCustomForm.OnClose">TCustomForm.OnClose</link>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caHide">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caFree">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caMinimize">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomHintAction">
        <short>[?] Action taken when a new value is assigned to <link id="TApplication.Hint"/>,
          and no OnHint handler is available.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomHintAction.Hint" link="#LCL.ActnList.TCustomAction.Hint">
        <short>The new Hint text.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarKind">
        <short>The orientation of a ScrollBar.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbHorizontal">
        <short>Horizontal scrollbar.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbVertical">
        <short>Vertical scrollbar.</short>
      </element>
      <!-- range type Visibility: default -->
      <element name="TScrollBarInc">
        <short>The range of scrollbar increments.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarStyle">
        <short>Scrollbar style.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScrollBarStyle.ssRegular">
        <short>Default.</short>
      </element>
      <element name="TScrollBarStyle.ssFlat">
        <short>Scrollbar appears flat.</short>
      </element>
      <element name="TScrollBarStyle.ssHotTrack">
        <short>Scrollbar sends HotTrack (ThumbTrack?) messages[?]</short>
      </element>
      <!-- object Visibility: default -->
      <element name="EScrollBar">
        <short>Class for exception in <link id="TControlScrollBar"/>.
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TControlScrollBar">
        <short>Type of a scrollbar in a <link id="TScrollingWinControl"/>.
        </short>
        <descr>
          <p>
            Scrollable controls supply their own <b>integrated</b> scrollbars,
            one for horizontal and one for vertical scrolling.
            This class allows access to (one of) these integrated scrollbars.
          </p><p>
            A scrollable control has both a physical (visible) client size,
            and a virtual (scrollable) client size.
          </p><p>
            The <var>Range</var> property reflects the virtual client size,
            e.g. the total number of lines in an file.
          </p><p>
            The <var>Page</var> property then reflects the number of lines,
            actually visible in the scrollable control.
            It also determines the size of the slider, relative to the total Range.
          </p><p>
            The <var>Position</var> property then reflects
            the number of the first visible line in the scrollable control,
            equivalent to the top coordinate of the slider.
            The Position can be changed by the user or by code.
          </p><p>
            Scrollbars usually appear only when Range is higher than Page,
            i.e. when not the entire content can be shown at the same time.
            See the ScrollBar property of the scrolling control for details.
          </p><p>
            The Range and Position can be limited to 16 bit (TScrollBarInc) precision internally,
            what is sufficient for painting the scrollbar widget,
            but may not be enough for the virtual content.
            See the actual scrolling control for details.
          </p>
        </descr>
        <seealso>
          <link id="TScrollingWinControl"/>
          <link id="TScrollBox"/>
          <link id="TCustomForm"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FAutoRange">
        <short>The virtual scroll range (FRange - ClientSize), at least zero (never negative).
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.FKind" link="TControlScrollBar.Kind"/>
      <element name="TControlScrollBar.FPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.FPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.FRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.FSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.FTracking" link="TControlScrollBar.Tracking"/>
      <element name="TControlScrollBar.FVisible" link="TControlScrollBar.Visible"/>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfoValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControlScrollBar.FControl">
        <short>The associated <link id="TScrollingWinControl"/>.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ControlHandle">
        <short>The Handle of the associated <link id="TScrollingWinControl"/>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ControlHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetAutoScroll">
        <short>The AutoScroll state of the associated <link id="TScrollingWinControl"/>.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.GetAutoScroll.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.GetIncrement.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.GetPage.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.GetPosition.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.GetRange.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSize" link="TControlScrollBar.Size"/>
      <element name="TControlScrollBar.GetSize.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.GetSmooth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.HandleAllocated">
        <short>True when the associated <link id="TScrollingWinControl"/> has a handle allocated.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.HandleAllocated.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.IsRangeStored" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.IsRangeStored.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.AutoCalcRange">
        <short>Determines the Range, based on the physical and virtual size of the associated control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ControlUpdateScrollBars">
        <short>Notifies the associated Control of changes.
        </short>
        <descr/>
        <seealso>
          <link id="TScrollingWinControl.UpdateScrollBars"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InternalSetRange">
        <short>Checks and propagates the new range to the Control.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TControlScrollBar.ControlUpdateScrollBars"/>
          <link id="TScrollingWinControl.UpdateScrollBars"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.InternalSetRange.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ScrollHandler">
        <short>Handler for the ScrollBar (movement) messages.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollHandler.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetAutoScroll">
        <short>Disables AutoScroll - even if the name suggests something different!
        </short>
        <descr>
        </descr>
        <errors>[AutoScroll not yet implemented?]
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.SetAutoScroll.AValue">
        <short>Ignored (assumed to be False)</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.SetIncrement.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.SetPage.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.SetRange.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSize" link="TControlScrollBar.Size"/>
      <element name="TControlScrollBar.SetSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SetSmooth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetTracking" link="TControlScrollBar.Tracking"/>
      <element name="TControlScrollBar.SetTracking.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetVisible" link="TControlScrollBar.Visible"/>
      <element name="TControlScrollBar.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.UpdateScrollBar">
        <short>[usage?] update the scroll bar (position etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InvalidateScrollInfo">
        <short>[usage?] render scroll information non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetHorzScrollBar">
        <short>Get the horizontal scrollbar of Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetHorzScrollBar.Result">
        <short>
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetVertScrollBar">
        <short>Get the vertical scrollbar of Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetVertScrollBar.Result">
        <short>
        </short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ScrollBarShouldBeVisible">
        <short>Determines whether a scrollbar is required.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ScrollBarShouldBeVisible.Result">
        <short>True when Visible and Range higher than Page.</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlScrollBar.Create"/>
      <element name="TControlScrollBar.Create.AControl">
        <short>The windowed control in which the scroll bar is found</short>
      </element>
      <element name="TControlScrollBar.Create.AKind">
        <short>Whether this is a horizontal or a vertical scrollbar</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControlScrollBar.Assign">
        <short>If Source is a <var>TControlScrollBar</var>, copies properties to itself, else performs inherited <var>Assign</var>.
        </short>
        <descr>Assigns the contents of the source object to the current object;
          in particular finds the increment, position, range and whether smooth scrolling is to  be feature and whether the scroll bar is visible
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.Assign.Source">
        <short>
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.IsScrollBarVisible">
        <short>Determines the current widget state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.IsScrollBarVisible.Result">
        <short>True if scrollbar is visible.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ScrollPos">
        <short>The scroll Position, zero if not Visible.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollPos.Result">
        <short>The scroll Position, zero if not Visible.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetOtherScrollBar">
        <short>Get the ScrollBar of the opposite direction (horz/vert).
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetOtherScrollBar.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSize">
        <short>The currently remaining extent of the Parent Control, depending on ScrollBar visibility.
        </short>
        <descr>return for vertical scrollbar the clientwidth
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSize.Result">
        <short>for vertical scrollbar the clientwidth</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithBar">
        <short>The remaining extent of the Parent Control, when the ScrollBar is visible.
        </short>
        <descr>return for vertical scrollbar the clientwidth with the bar, even if Visible=false
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithBar.Result">
        <short>for vertical scrollbar the clientwidth with the bar, even if Visible=false
        </short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithoutBar">
        <short>The remaining extent of the Parent Control, when the ScrollBar is not visible.
        </short>
        <descr>return for vertical scrollbar the clientwidth without the bar, even if Visible=true
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithoutBar.Result">
        <short>for vertical scrollbar the clientwidth without the bar, even if Visible=true
        </short>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Increment">
        <short>The small Position increment, applicable to the scrollbar arrows.
        </short>
        <descr>The amount by which the Position moves if the triangle at either end of the bar is selected.
          <br/>Default is 8 (pixels).
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Kind">
        <short>The orientation: horizontal or vertical.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Page">
        <short>The slider size,
          Position increment applicable to the scrollbar area beneath the slider.
        </short>
        <descr>The amount by which the scroll indicator moves if the cursor selects the scroll bar above, below or on either side of the scroll indicator.
          <br/>Default is 80 (pixels).
         </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Position">
        <short>Position of the slider, 0..Range-Page.
        </short>
        <descr>The Position reflects the top coordinate of the slider,
          which is Range-Page when the slider is at the bottom of the bar.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Smooth">
        <short>Enables smooth scrolling, with automatic adjustment of Increment and Page.
        </short>
        <descr>Smooth scrolling uses an Increment of 10%
          and a Page size of 90% of the visible client area[?]
        </descr>
        <seealso>
          <link id="TControlScrollBar.Increment"/>
          <link id="TControlScrollBar.Page"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.SmoothIsStored" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SmoothIsStored.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Range">
        <short>The virtual size of the Parent Control.</short>
        <descr>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Size">
        <short>The adjustable size of the scroll bar.</short>
        <descr>The length of the bar is the Width (or Height) of the Parent Control,
          the Size is the other (free) coordinate.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Tracking">
        <short>Gives feedback while the slider is dragged.
        </short>
        <descr>When it takes an significant amount of time,
          to repaint the parent control at a new position,
          Tracking should be False to prevent flicker;
          then the control is updated only when the slider is released.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Visible">
        <short>Definitely hides the scrollbar when False (default True).
        </short>
        <descr>
          <p>
            The scrollbar widget is visible only if (Visible=True) <b>and</b> (Range&gt;Page).
          </p><p>
            Set Visible to False to disallow the user to scroll the content,
            while the content still can be scrolled by code.
          </p><p>
            Use IsScrollBarVisible to get the current visible state of the widget.
          </p>
        </descr>
        <seealso>
          <link id="TControlScrollBar.IsScrollBarVisible"/>
        </seealso>
      </element>
<!-- object Visibility: default -->
      <element name="TScrollingWinControl">
        <short>Class of a Window Control that has one or more scroll bars.
        </short>
        <descr></descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.FVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.FAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FIsUpdating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.SetHorzScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.SetVertScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.AlignControls">
        <short>
          <var>AlignControls</var> - calls inherited <var>AlignControls</var>, then calculates sizes for the scrollbars if required</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.AlignControls.AControl">
        <short/>
      </element>
      <element name="TScrollingWinControl.AlignControls.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.CreateWnd">
        <short>
          <var>CreateWnd</var> - performs inherited <var>CreateWnd</var> then updates ScrollBars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetClientScrollOffset">
        <short>
          <var>GetClientScrollOffset</var> - finds the position for scrollbars from the client, if any, otherwise sets default postiions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetClientScrollOffset">TControl.GetClientScrollOffset</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetClientScrollOffset.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetLogicalClientRect">
        <short>
          <var>GetLogicalClientRect</var> - adjusts client rect to allow for size of scrollbars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetLogicalClientRect">TControl.GetLogicalClientRect</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetLogicalClientRect.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.DoOnResize">
        <short>
          <var>DoOnResize</var> - performs inherited <var>DoOnResize</var> then updates scrollbars if needed</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.DoOnResize">TControl.DoOnResize</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMHScroll">
        <short>
          <var>WMHScroll</var> - system message method for horizontal scrolling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMHScroll.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMVScroll">
        <short>
          <var>WMVScroll</var> - system message method for vertical scroling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMVScroll.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.ComputeScrollbars">
        <short>
          <var>ComputeScrollbars</var> - returns True if scroll bar positions need to be computed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.ComputeScrollbars.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollbarHandler">
        <short>
          <var>ScrollbarHandler</var> - method for handling scroll bars of specified kind at specified position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.ScrollKind">
        <short/>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.OldPosition">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <element name="TScrollingWinControl.SetAutoScroll.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.Loaded">
        <short>
          <var>Loaded</var> - calls inherited <var>Loaded</var> and updates scroll bars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.SetAutoSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScrollingWinControl.SetAutoSize.Value">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScrollingWinControl.Create"/>
      <element name="TScrollingWinControl.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScrollingWinControl.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.UpdateScrollbars">
        <short>Update the position of the scroll indicatores in the scroll bars</short>
        <descr>Checks if the scroll bars are in process of being loaded or destroyed; <br/>
if so, or if there is no valid handle, exit. <br/>
If the indicators are valid, re-computes position etc</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> inserts its own defaults, overriding inherited values</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollBy">
        <short>
          <var>ScrollBy</var> - amount by which to scroll</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaX">
        <short/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaY">
        <short/>
      </element>
      <element name="TScrollingWinControl.HasVisibleScrollbars.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.AutoScroll">
        <short>Does auto-scrolling apply?</short>
        <descr>Reads or writes a flag to determine auto-scrolling</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.HorzScrollBar">
        <short>The properties of the horizontal scroll bar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.VertScrollBar">
        <short>The properties of the vertical scroll bar</short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TScrollBox">
        <short>A box with scroll bars.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- constructor Visibility: public -->
      <element name="TScrollBox.Create" link="#LCL.Forms.TScrollingWinControl.Create"/>
      <element name="TScrollBox.Create.AOwner">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TScrollBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TScrollBox.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TScrollBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TScrollBox.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TScrollBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TScrollBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TScrollBox.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TScrollBox.ClientHeight"/>
      <element name="TScrollBox.ClientWidth"/>
      <element name="TScrollBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TScrollBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TScrollBox.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TScrollBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TScrollBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TScrollBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TScrollBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TScrollBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TScrollBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TScrollBox.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TScrollBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TScrollBox.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TScrollBox.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TScrollBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TScrollBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TScrollBox.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TScrollBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TScrollBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TScrollBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TScrollBox.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TScrollBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TScrollBox.OnMouseEnter"/>
      <element name="TScrollBox.OnMouseLeave"/>
      <element name="TScrollBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TScrollBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TScrollBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TScrollBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TScrollBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TScrollBox.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TScrollBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TScrollBox.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TScrollBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TScrollBox.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TScrollBox.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TScrollBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TScrollBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TScrollBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TScrollBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TScrollBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TScrollBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TScrollBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TScrollBox.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- object Visibility: default -->
      <element name="TCustomFrame">
        <short>
          <var>TCustomFrame</var> - the base type for <var>TFrame</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.AddActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.AddActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.RemoveActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.RemoveActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignLeft">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignLeft.Reader">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignTop.Reader">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignLeft">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignLeft.Writer">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignTop.Writer">
        <short></short>
      </element>
      <element name="TCustomFrame.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.GetChildren">
        <short>
          <var>GetChildren</var> - calls inherited <var>GetChildren</var> then accepts ownership of all owned components that have no parent</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomFrame.GetChildren.Proc">
        <short/>
      </element>
      <element name="TCustomFrame.GetChildren.Root">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.Notification">
        <short>
          <var>Notification</var> calls inherited Notification then add or removes the component's action list (depending on what Operation specifies)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
          <link id="#LCL.Controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomFrame.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomFrame.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.SetParent">
        <short>
          <var>SetParent</var> - calls inherited <var>Setparent</var> after validity checks, then updates the action lists </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.SetParent">TControl.SetParent</link>
        </seealso>
      </element>
      <element name="TCustomFrame.SetParent.AParent">
        <short/>
      </element>
      <element name="TCustomFrame.DefineProperties">
        <short>
          <var>DefineProperties</var>- calculates low and high values for frame design from ancestor class</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.DefineProperties">TComponent.DefineProperties</link>
          <link id="#LCL.Controls.TControl.DefineProperties">TControl.DefineProperties</link>
        </seealso>
      </element>
      <element name="TCustomFrame.DefineProperties.Filer">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.CalculatePreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomFrame.Create"/>
      <element name="TCustomFrame.Create.AOwner">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomFrame.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults for frame design, overriding the inherited values</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomFrame.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFrameClass" link="TCustomFrame"/>
<!-- object Visibility: default -->
      <element name="TFrame">
        <short>
          <var>TFrame</var> - a container for all the other components on a form, or for a group of components within a form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFrame.FLCLVersion" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored.Result">
        <short></short>
      </element>
      <element name="TFrame.Create" link="#LCL.Forms.TCustomFrame.Create"/>
      <element name="TFrame.Create.TheOwner">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFrame.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFrame.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TFrame.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <!-- property Visibility: published -->
      <element name="TFrame.BiDiMode"/>
      <element name="TFrame.BorderSpacing"/>
      <element name="TFrame.ChildSizing"/>
      <element name="TFrame.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TFrame.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TFrame.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TFrame.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFrame.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TFrame.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFrame.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TFrame.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFrame.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TFrame.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFrame.LCLVersion" link="#LCL.LCLVersion.lcl_version"/>
      <element name="TFrame.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFrame.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TFrame.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TFrame.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFrame.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TFrame.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TFrame.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFrame.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFrame.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TFrame.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFrame.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFrame.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFrame.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TFrame.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFrame.OnMouseEnter"/>
      <element name="TFrame.OnMouseLeave"/>
      <element name="TFrame.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFrame.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFrame.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TFrame.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TFrame.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TFrame.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TFrame.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TFrame.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFrame.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TFrame.ParentBiDiMode"/>
      <element name="TFrame.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TFrame.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFrame.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFrame.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFrame.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFrame.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFrame.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFrame.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- object Visibility: default -->
      <element name="TIDesigner">
        <short>
          <var>TIDesigner</var> - a class describing a Form Designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBorderIcon">
        <short>
          <var>TBorderIcon</var> - enumerated type to specify which icon appears on the top border of the Form</short>
        <descr>biSystemMenu - The form has a System menu (Maybe not all windowmanager supports this)<br/>

biMinimize - The form has an minimize button<br/>

biMaximize - The form has a maximize button<br/>

biHelp - When you click this button a Question Cursor appears and the help routines are called if you click on an control
</descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biSystemMenu">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMinimize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMaximize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biHelp">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TBorderIcons">
        <short>
          <var>TBorderIcons</var> - set of <var>TBorderIcon</var>; the group of icons to appear at the top of the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCloseEvent.Sender">
        <short/>
      </element>
      <element name="TCloseEvent.CloseAction">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseQueryEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCloseQueryEvent.Sender">
        <short/>
      </element>
      <element name="TCloseQueryEvent.CanClose">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="THelpEvent">
        <short>Type of an application OnHelp handler.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THelpEvent.Result">
        <short>[?]</short>
      </element>
      <element name="THelpEvent.Command">
        <short>[?]</short>
      </element>
      <element name="THelpEvent.Data">
        <short>[?]</short>
      </element>
      <element name="THelpEvent.CallHelp">
        <short>[?]</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDropFilesEvent">
        <short>Type of an application OnDropFiles handler[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TDropFilesEvent.Sender">
        <short/>
      </element>
      <element name="TDropFilesEvent.FileNames">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShortCutEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TShortCutEvent.Msg">
        <short/>
      </element>
      <element name="TShortCutEvent.Handled">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormStateType">
        <short>
          <var>TFormStateType</var> - enumerated type to describe the state of a form; whether it is being created or destroyed, its visibility, whether Modal etc</short>
        <descr>
          <p>The valid states are:</p>
          <pre>fsCreating,  // initializing (form streaming)
    fsVisible,   // form should be shown
    fsShowing,
    fsModal,     // form is modal
    fsCreatedMDIChild,
    fsBorderStyleChanged,
    fsFormStyleChanged,
    fsFirstShow,  // form is shown for the first time
    fsDisableAutoSize  </pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreating">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsVisible">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsShowing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsModal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreatedMDIChild">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsBorderStyleChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFormStyleChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFirstShow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsDisableAutoSize">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFormState">
        <short>
          <var>TFormState</var> - the set of form states that apply to this form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TModalResult">
        <short>
          <var>TModalResult</var> - the range of values that can be returned as a modal result</short>
        <descr>
          <var>TModalResult</var> represents the value returned by a modal dialog. Even though the type is defined as an integer, instead a few standard constants are used as return results in applications.</descr>
        <seealso>
          <link id="controls.mrNone"/>
          <link id="controls.mrOK"/>
          <link id="controls.mrCancel"/>
          <link id="controls.mrAbort"/>
          <link id="controls.mrRetry"/>
          <link id="controls.mrIgnore"/>
          <link id="controls.mrYes"/>
          <link id="controls.mrNo"/>
          <link id="controls.mrAll"/>
        </seealso>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtFirstShow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtClose">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtCreate">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TShowInTaskbar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stDefault">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stAlways">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stNever">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomForm">
        <short>The base type for <var>TForm</var>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FActionLists">
        <short>
          <var>FActionLists</var> - local variable holding lists of actions asociated with the Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.FActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.FActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.FAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.FAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.FAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TCustomForm.FBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.FDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.FCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.FDefaultMonitor" link="TCustomForm.DefaultMonitor"/>
      <element name="TCustomForm.FDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.FDummyTextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TCustomForm.FFormState" link="TCustomForm.FormState"/>
      <element name="TCustomForm.FFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.FFormUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FHelpFile" link="TCustomForm.HelpFile"/>
      <element name="TCustomForm.FIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.FPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.FPopupParent" link="TCustomForm.PopupParent"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FSmallIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FBigIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FKeyPreview" link="TCustomForm.KeyPreview"/>
      <element name="TCustomForm.FMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.FModalResult" link="TCustomForm.ModalResult"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FLastFocusedControl">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FOldBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnActivate" link="TCustomForm.OnActivate"/>
      <element name="TCustomForm.FOnClose" link="TCustomForm.OnClose"/>
      <element name="TCustomForm.FOnCloseQuery" link="TCustomForm.OnCloseQuery"/>
      <element name="TCustomForm.FOnCreate" link="TCustomForm.OnCreate"/>
      <element name="TCustomForm.FOnDeactivate" link="TCustomForm.OnDeactivate"/>
      <element name="TCustomForm.FOnDestroy" link="TCustomForm.OnDestroy"/>
      <element name="TCustomForm.FOnDropFiles" link="TCustomForm.OnDropFiles"/>
      <element name="TCustomForm.FOnHelp" link="TCustomForm.OnHelp"/>
      <element name="TCustomForm.FOnHide" link="TCustomForm.OnHide"/>
      <element name="TCustomForm.FOnShortcut" link="TCustomForm.OnShortcut"/>
      <element name="TCustomForm.FOnShow" link="TCustomForm.OnShow"/>
      <element name="TCustomForm.FOnWindowStateChange" link="TCustomForm.OnWindowStateChange"/>
      <element name="TCustomForm.FPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.FPosition" link="TCustomForm.Position"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FRealizedShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.FRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.FRestoredWidth" link="TCustomForm.RestoredWidth"/>
      <element name="TCustomForm.FRestoredHeight" link="TCustomForm.RestoredHeight"/>
      <element name="TCustomForm.FShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TCustomForm.FWindowState" link="TCustomForm.WindowState"/>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetClientHandle" link="TCustomForm.ClientHandle"/>
      <element name="TCustomForm.GetClientHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetEffectiveShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetEffectiveShowInTaskBar.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetMonitor" link="TCustomForm.Monitor"/>
      <element name="TCustomForm.GetMonitor.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.GetPixelsPerInch.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.GetRestoredLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.GetRestoredTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsAutoScrollStored" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.IsAutoScrollStored.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IsForm.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsHelpFileStored" link="TCustomForm.HelpFile"/>
      <element name="TCustomForm.IsHelpFileStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsIconStored" link="TCustomForm.Icon"/>
      <element name="TCustomForm.IsIconStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CloseModal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.FreeIconHandles">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.IconChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IconChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsKeyPreviewStored" link="TCustomForm.KeyPreview"/>
      <element name="TCustomForm.IsKeyPreviewStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.SetActive.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.SetActiveControl.AWinControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.SetActiveDefaultControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.SetAllowDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.SetAlphaBlend.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TCustomForm.SetAlphaBlendValue.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.SetBorderIcons.NewIcons">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TCustomForm.SetFormBorderStyle.NewStyle">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.SetCancelControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.SetDefaultControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.SetDesigner.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.SetFormStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.SetMenu.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.SetPopupMode.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupParent" link="TCustomForm.PopupParent"/>
      <element name="TCustomForm.SetPopupParent.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetModalResult" link="TCustomForm.ModalResult"/>
      <element name="TCustomForm.SetModalResult.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPosition" link="TCustomForm.Position"/>
      <element name="TCustomForm.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TCustomForm.SetShowInTaskbar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetLastFocusedControl">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.SetLastFocusedControl.AControl">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowState" link="TCustomForm.WindowState"/>
      <element name="TCustomForm.SetWindowState.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMActivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMCloseQuery">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMCloseQuery.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMDeactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMDeactivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMHelp">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMHelp.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMShowWindow.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMSize.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMWindowPosChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMWindowPosChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMBiDiModeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CMBiDiModeChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMParentBiDiModeChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMParentBiDiModeChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowBtnGlyphChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowBtnGlyphChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowMenuGlyphChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowMenuGlyphChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMIconChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMIconChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMRelease">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMRelease.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMActivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMActivate.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMDeactivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMDeactivate.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.Handler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.FindDefaultForActiveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FindDefaultForActiveControl.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateMenu">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMShowingChanged">
        <short>
          <var>CMShowingChanged</var> - system message method for showing if the form has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMShowingChanged.Message">
        <short/>
      </element>
      <element name="TCustomForm.DoShowWindow">
        <short>
          <var>DoShowWindow</var> automatically choose a control to focus</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Activate">
        <short>
          <var>Activate</var> - method for rendering the Form active</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ActiveChanged">
        <short>
          <var>ActiveChanged</var> - method for a form that is active and changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AdjustClientRect">
        <short>
          <var>AdjustClientRect</var> - adjusts window size to accommodate borders</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
        </seealso>
      </element>
      <element name="TCustomForm.AdjustClientRect.Rect">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginFormUpdate">
        <short>
          <var>BeginFormUpdate</var> - start updating the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.ColorIsStored" link="#LCL.Controls.TControl.Color"/>
      <element name="TCustomForm.ColorIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateParams">
        <short>
          <var>CreateParams</var> calls inherited <var>CreateParams</var>, and specifically copies style from parent</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateParams">TWinControl.CreateParams</link>
        </seealso>
      </element>
      <element name="TCustomForm.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateWnd">
        <short>
          <var>CreateWnd</var> calls inherited <var>CreateWnd, </var>signals if a handle is required and attaches a menu to the window if one does not yet exist; activates focus if visible</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
          <link id="#LCL.Forms.TScrollingWinControl.CreateWnd">TScrollingWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Deactivate">
        <short>
          <var>Deactivate</var> - method for rendering the Form inactive</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoClose">
        <short>
          <var>DoClose</var> - close the Form using the specified <var>CloseAction</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DoClose.CloseAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoCreate">
        <short>
          <var>DoCreate</var> - perform the Create action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDestroy">
        <short>
          <var>DoDestroy</var>- perform the Destroy action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoHide">
        <short>
          <var>DoHide</var> - method for hiding a previously visible object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoShow">
        <short>
          <var>DoShow</var> - method to redender visible a previously hidden form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.EndFormUpdate">
        <short>
          <var>EndFormUpdate</var> - finish updating the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.GetChildren">
        <short>
          <var>GetChildren</var> calls inherited <var>GetChildren</var> then takes ownership of all components, including those  without parents</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomForm.GetChildren.Proc">
        <short/>
      </element>
      <element name="TCustomForm.GetChildren.Root">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleCreateException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleCreateException.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleDestroyException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleDestroyException.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleShowHideException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleShowHideException.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.InitializeWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Loaded">
        <short>
          <var>Loaded</var> - calls inherited <var>Loaded</var>, makes this the active control and gives it focus</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
          <link id="#LCL.Forms.TScrollingWinControl.Loaded">TScrollingWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ChildHandlesCreated">
        <short>
          <var>ChildHandlesCreated</var> - method for use when handles have been created for descendants</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.ChildHandlesCreated">TWinControl.ChildHandlesCreated</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Notification">
        <short>
          <var>Notification</var> calls inherited Notification then add or removes the component's action list (depending on what Operation specifies)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TCustomForm.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomForm.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.PaintWindow" link="#LCL.Controls.TCustomControl.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.PaintWindow.dc">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.RequestAlign" link="#LCL.Controls.TControl.RequestAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CalculatePreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetZOrder">
        <short>
          <var>SetZOrder</var> - set the Z order for the Form; if <var>Topmost </var>is True, Form is on top of all other objects</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetZOrder.Topmost">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetParent.NewParent">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.MoveToDefaultPosition">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateShowing">
        <short>
          <var>UpdateShowing</var> - method to update the <var>Visible</var> property</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.UpdateShowing">TWinControl.UpdateShowing</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetVisible" link="#LCL.Controls.TControl.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetVisible.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AllAutoSized">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoFirstShow">
        <short>
          <var>DoFirstShow</var> - perform the first Show action since creation of the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateWindowState">
        <short>
          <var>UpdateWindowState</var> - update the state of the Window displaying the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanging">
        <short>
          <var>VisibleChanging</var> - method for dealing with a Form whose Visible property is changing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WndProc">
        <short>
          <var>WndProc</var> - performs actions specific to the message then calls inherited <var>WndProc</var>
        </short>
        <descr>
          <p>
            <var>WndProc</var> - performs actions specific to the message then calls inherited <var>WndProc</var>
          </p>
          <p>Specific messages include:</p>
          <p>Activate, SetFocus. KillFocus; Exit, Enter; Window Position Changing; Draw Item</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.WndProc">TControl.WndProc</link>
          <link id="#LCL.Controls.TWinControl.WndProc">TWinControl.WndProc</link>
        </seealso>
      </element>
      <element name="TCustomForm.WndProc.TheMessage">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.VisibleIsStored" link="TCustomForm.Visible"/>
      <element name="TCustomForm.VisibleIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoSendBoundsToInterface" link="#LCL.Controls.TWinControl.DoSendBoundsToInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAutoSize" link="#LCL.Controls.TControl.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoSize" link="#LCL.Controls.TControl.SetAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetAutoSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoScroll" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.SetAutoScroll.Value">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAddActionList">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.DoAddActionList.List">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoRemoveActionList">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.DoRemoveActionList.List">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginAutoDrag">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDock" link="#LCL.Controls.TControl.DoDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DoDock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.DoDock.ARect">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetFloating" link="#LCL.Controls.TControl.GetFloating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetFloating.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetDefaultDockCaption">
        <short>
          <var>GetDefaultDockCaption</var> - returns the default caption to be used for docking</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetDefaultDockCaption.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionExecute">
        <short>
          <var>CMActionExecute</var> - system message method for executing action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionExecute.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionUpdate">
        <short>
          <var>CMActionUpdate</var> - system message method for updating action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionUpdate.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoExecuteAction">
        <short>Asks every visible control to Execute the specified action <var>ExeAction</var>.</short>
        <descr>
          <p>DoExecuteAction asks every visible control to Execute the specified action <var>ExeAction</var>. If some control executes it and returns true, then the traversal of visible components is stopped. All child controls (and its children etc) are queried too.</p>
          <p>For example you have</p>
          <code>TForm
   TPanel
     TButton
     TCheckBox
   TMemo</code>
          <p>then the following controls are queried in this order: TPanel, TButton, TCheckBox, TMemo.</p>
          <p>But first of all, the Form itself and the ActiveControl are asked to execute the given action.</p>
        </descr>
      </element>
      <element name="TCustomForm.DoExecuteAction.Result">
        <short>True, if any control handles the action.</short>
      </element>
      <element name="TCustomForm.DoExecuteAction.ExeAction">
        <short>Action to execute.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoUpdateAction">
        <short>
          <var>DoUpdateAction</var> - asks all visible controls to update the specified action</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.DoExecuteAction">DoExecuteAction</link>
        </seealso>
      </element>
      <element name="TCustomForm.DoUpdateAction.Result">
        <short/>
      </element>
      <element name="TCustomForm.DoUpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateActions">
        <short>
          <var>UpdateActions</var> - method for updating actions</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomForm</var>: checks for correct <var>ClassType</var>, looks for required resources then creates the Form</short>
        <descr>This constructor can override the constructor of an ancestor class
</descr>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TScrollingWinControl.Create">TScrollingWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomForm.Create.AOwner">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.CreateNew">
        <short>
          <var>CreateNew</var> - constructor for creating a completely new form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CreateNew.AOwner">
        <short/>
      </element>
      <element name="TCustomForm.CreateNew.Num">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomForm.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AfterConstruction">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.BeforeDestruction">
        <short>
          <var>BeforeDestruction</var> - method to be applied before Form is destroyed (usually involves clean-up)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <element name="TCustomForm.BigIconHandle">
        <short>
          <var>BigIconHandle</var> - returns system Handle for large Icon</short>
      </element>
      <element name="TCustomForm.BigIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Close">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CloseQuery">
        <short>Is the associated query to be closed?</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CloseQuery.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.DefocusControl">
        <short>
          <var>DefocusControl</var> - withdraws focus from the specified control, removing it if required</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DefocusControl.Control">
        <short/>
      </element>
      <element name="TCustomForm.DefocusControl.Removing">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.EnsureVisible">
        <short>Ensure that this form is always visible, if necessary moving it to the top (front) of the stack of images</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.EnsureVisible.AMoveToTop">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.FocusControl">
        <short>
          <var>FocusControl</var> - giving focus to specified control, automatically bringing form to front</short>
        <descr/>
        <errors>If the control or one of its parents is not visible or disabled an exception will be raised.
</errors>
        <seealso/>
      </element>
      <element name="TCustomForm.FocusControl.WinControl">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.FormIsUpdating" link="#LCL.Controls.TControl.FormIsUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FormIsUpdating.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetFormImage">
        <short>
          <var>GetFormImage</var> - gets a Bitmap image for the Form</short>
      </element>
      <element name="TCustomForm.GetFormImage.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetRolesForControl">
        <short>
          <var>GetRolesForControl</var> - returns a set of roles (default, cancel) for the Form </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetRolesForControl.Result">
        <short/>
      </element>
      <element name="TCustomForm.GetRolesForControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Hide" link="#LCL.Controls.TControl.Hide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfDropFiles">
        <short>
          <var>IntfDropFiles</var> - Invokes <var>OnDropFilesEvent</var> of the form. This function is called by the interface. </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfHelp">
        <short>
          <var>IntfHelp</var> - Show help for control or menu item. This function is called by the interface.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IntfHelp.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.IsShortcut">
        <short>
          <var>IsShortcut</var> - if True, the specified Key and Message are active as a shortcut</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IsShortcut.Result">
        <short/>
      </element>
      <element name="TCustomForm.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.MakeFullyVisible">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MakeFullyVisible.AMonitor">
        <short></short>
      </element>
      <element name="TCustomForm.MakeFullyVisible.UseWorkarea">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.AutoSizeDelayedHandle">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.AutoSizeDelayedHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetPreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetPreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.Raw">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Release">
        <short>Set free the resources of the form </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CanFocus">
        <short>True when the form can receive the focus.
        </short>
        <descr>
          A control can receive the focus when it is visible and enabled,
          and all its Parents also can receive the focus.
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CanFocus.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetFocus" link="#LCL.Controls.TWinControl.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.SetFocusedControl">
        <short>
          <var>SetFocusedControl</var> - method for giving focus to specified control; returns True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetFocusedControl.Result">
        <short/>
      </element>
      <element name="TCustomForm.SetFocusedControl.Control">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetRestoredBounds">
        <short>
          <var>SetRestoredBounds</var> - set the bounds defining the position of the restored control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ATop">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Show" link="#LCL.Controls.TControl.Show">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ShowModal">
        <short>Show this form as modal - ie control cannot be resumed by another form until the current form is closed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.ShowModal.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.ShowOnTop">
        <short>Shows this form as the top (nearest) item of any stack of windows or images.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SmallIconHandle">
        <short>
          <var>SmallIconHandle</var> - returns system Handle for small Icon</short>
      </element>
      <element name="TCustomForm.SmallIconHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.WantChildKey">
        <short>
          <var>WantChildKey</var> - returns True if the specified child control requires a key (Message)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WantChildKey.Result">
        <short/>
      </element>
      <element name="TCustomForm.WantChildKey.Child">
        <short/>
      </element>
      <element name="TCustomForm.WantChildKey.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerFirstShow">
        <short>
          <var>AddHandlerFirstShow</var> - perform the action for adding a handler at the time of first showing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerFirstShow">
        <short>
          <var>RemoveHandlerFirstShow</var> - perform the action for removing the handler on the first showing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerClose">
        <short>
          <var>AddHandlerClose</var> - adds a handler for closing Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerClose.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerClose">
        <short>
          <var>RemoveHandlerClose</var> - removes handler for closing form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerCreate">
        <short>
          <var>AddHandlerCreate</var> - performs the OnCreateHandler event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerCreate">
        <short>
          <var>RemoveHandlerCreate</var> - removes the handler for the Create event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ActiveMDIChild">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.ActiveMDIChild.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetMDIChildren">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetMDIChildren.Result">
        <short></short>
      </element>
      <element name="TCustomForm.GetMDIChildren.AIndex">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.MDIChildCount">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MDIChildCount.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Dock" link="#LCL.Controls.TControl.Dock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.Dock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.Dock.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.UpdateDockCaption">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.UpdateDockCaption.Exclude">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Active">
        <short>Is true when the form has the focus</short>
        <descr>Use active to check if the form has the focus</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveControl">
        <short>Specifies the active control on the form</short>
        <descr>Use this to get or set the active control on this form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveDefaultControl">
        <short>Specifies the active default control on the Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AllowDropFiles">
        <short>Specifies if files are allowed to be dropped on this form.</short>
        <descr>Set AllowDropFiles event to True to allow dropping files on this form. It is set to False by default.
</descr>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlend">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlendValue">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AutoScroll">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderIcons">
        <short>Specifies which icons appear on the top of the form</short>
        <descr>Use bordericons flags to get or set the icons that appear on the top border of the form. <br/>

		By default we see down-triangle or other generic icon on the left, <br/>

		which activates a pop-up system menu allowing closure or re-sizing of the form, <br/>

		and on the right end we see the minimise and  re-size/maximise buttons, <br/>

		but of course these can be customised by the application programmer.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderStyle">
        <short>The border style for this Form</short>
        <descr>
          <p>Use borderstyle to get or set the appearance of the form's border. </p>
          <p>By default it is a sizeable window, but it could, for example, be a dialog form or a tool window, or could be non-sizeable</p>
          <p>This property is slightly different (has a differert base type) from the <var>TCustomControl.BorderStyle</var>
When the form is put into another control the window borders depend on the widgetset. There are no borders under gtk.
</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.CancelControl">
        <short>The control associated with the cancel action</short>
        <descr>
          <p>Determines the control associated with the Cancel action (exit from the control without changing anything).</p>
          <p>This is usually a button with the caption 'Cancel', but might be an 'Exit' button or anything else the application programmer decides.</p>
          <p>This control is selected either by explicitly clicking with the mouse, or by hitting the 'Esc' key</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.ClientHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Color" link="#LCL.Controls.TControl.Color">
        <descr>The form's colour; by default it is the same as the colour specified for button faces.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultControl">
        <short>The control associated with the default action for this form</short>
        <descr>Reads or sets a flag determining the default control. <br/>

		This is typically a button such as 'Accept' which is highlighted in some way on-screen to indicate that this is the default action, and is selected either by hitting 'Return' or 'Enter' or by selecting that control with the mouse</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultMonitor">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Designer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormState">
        <short>Determines the state of the form</short>
        <descr>Reads or writes a flag to determine the form's state: <br/>


		is it being created, is this its first showing, is the border style being changed, etc. <br/>


		FormState is a set, so could take zero or more of possible values.</descr>
        <seealso>
          <link id="TFormState"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormStyle">
        <short>Determinates the style of the form</short>
        <descr>
          <p>Reads or writes flag to determine the style of the form.</p>
          <p>Default is 'normal', but could be MDIChild or MDINormal, could stay on top or could be a 'Splash' form.</p>
          <p>FormStyle is a set, so could take zero or more of these values.</p>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TFormStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.HelpFile">
        <short>Specifies the help file that is used by the form</short>
        <descr>Reads or writes a flag to determine identity of Help file, <br/>

		and to determine whether its name is stored.<br/>

		Property contains filename as a string.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Icon">
        <short>The Icon associated with this Form (which may appear in menus, directories, ListBoxes etc)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.KeyPreview">
        <short>
          <var>KeyPreview</var> - if True, Key Preview is possible</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.MDIChildren">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MDIChildren.I">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Menu">
        <short>Specifies a MainMenu for this form</short>
        <descr>Drop a TMainMenu on the form and select it here to show it on the form.<br/>
        </descr>
        <seealso>
          <link id="#lcl.Menus.TMainMenu"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ModalResult">
        <short>Specifies the return value of an modal form</short>
        <descr>Reads or writes a flag to determine whether there is a modal resut. <br/>

		If the form is modal, returns an integer value.</descr>
        <seealso/>
      </element>
      <element name="TCustomForm.Monitor">
        <short>
          <var>Monitor</var> - returns the monitor on which the form is mostly places (the biggest form area is placed)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnActivate">
        <short>Event called when the form receives focus</short>
        <descr>This method is called when the form receives focus for the first time at application start up and then subsequently each time focus is changed from another window of the same application to this window. For focus changes between different applications the event Application.OnActivate is called instead.</descr>
        <seealso>
          <link id="#LCL.Forms.TApplication.OnActivate">TApplication.OnActivate</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnClose">
        <short>Event handler for closing the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCloseQuery">
        <short>Event handler for closing the query associated with the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCreate">
        <short>Event handler for creating the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDeactivate">
        <short>Event handler for deactivating the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDestroy">
        <short>Event handler when the form is being destroyed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDropFiles">
        <short>The event invoked when file is dropped on this form.</short>
        <descr>The OnDropFiles event is invoked when user drops one or multiple files on this form. You enable this feature by setting AllowDropFiles property.</descr>
        <seealso>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHelp">
        <short>Event handler when Help is required</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHide">
        <short>Event handler if form is being hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShortcut">
        <short>Event handler if shortcut key is pressed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShow">
        <short>Event handler if form is to be shown</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnWindowStateChange">
        <short>Event handler for a change in the window state</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PixelsPerInch">
        <short>The scaling of the form in absolute terms</short>
        <descr>
          <p>Reads or writes a flag to determine the scaling factor (a longinteger).</p>
          <p>Not normally stored locally</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupMode">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupParent">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Position">
        <short>The position of the form on the screen</short>
        <descr>Reads or writes a flag to determine screen position of form. <br/>


		By default it is in the position that it was placed in the Form Designer</descr>
        <seealso>
          <link id="TPosition"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredHeight">
        <short>The height of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredLeft">
        <short>The position of the left edge of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredTop">
        <short>The position of the top edge of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredWidth">
        <short>The width of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ShowInTaskBar">
        <short>Should the form be shown in the system Task Bar?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.TextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>Set or get this to set the form visible/hidden or get the status of the form
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.WindowState">
        <short>Represents how the form appears on the screen</short>
        <descr>Reads or write flag to determine state of the window on screen. <br/>


		Default is 'normal' (ie not minimised or maximised)</descr>
        <seealso>
          <link id="TWindowState"/>
        </seealso>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFormClass" link="TCustomForm">
        <short>
          <var>TCustomFormClass</var> - class of <var>TCustomForm</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TForm">
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TForm.CreateWnd" link="#LCL.Forms.TScrollingWinControl.CreateWnd">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TForm.FLCLVersion" link="TForm.LCLVersion"/>
      <!-- function Visibility: private -->
      <element name="TForm.LCLVersionIsStored" link="TForm.LCLVersion"/>
      <element name="TForm.LCLVersionIsStored.Result">
        <short></short>
      </element>
      <element name="TForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded">
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
        </seealso>
      </element>
      <element name="TForm.Create"/>
      <element name="TForm.Create.TheOwner">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Cascade">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Next">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Previous">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Tile">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TForm.ActiveControl" link="#LCL.Forms.TCustomForm.ActiveControl"/>
      <element name="TForm.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TForm.AllowDropFiles" link="#LCL.Forms.TCustomForm.AllowDropFiles"/>
      <element name="TForm.AlphaBlend"/>
      <element name="TForm.AlphaBlendValue"/>
      <element name="TForm.Anchors"/>
      <element name="TForm.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TForm.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TForm.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TForm.BorderIcons" link="#LCL.Forms.TCustomForm.BorderIcons"/>
      <element name="TForm.BorderStyle" link="#LCL.Forms.TCustomForm.BorderStyle"/>
      <element name="TForm.BorderWidth"/>
      <element name="TForm.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TForm.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <!-- property Visibility: public -->
      <element name="TForm.ClientHandle">
        <short>The operating system handle for the client</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TForm.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TForm.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TForm.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TForm.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TForm.DefaultMonitor"/>
      <element name="TForm.DockManager" link="#LCL.Controls.TWinControl.DockManager"/>
      <element name="TForm.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TForm.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TForm.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TForm.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TForm.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TForm.FormStyle" link="#LCL.Forms.TCustomForm.FormStyle"/>
      <element name="TForm.HelpFile" link="#LCL.Forms.TCustomForm.HelpFile"/>
      <element name="TForm.Icon" link="#LCL.Forms.TCustomForm.Icon"/>
      <element name="TForm.KeyPreview" link="#LCL.Forms.TCustomForm.KeyPreview"/>
      <element name="TForm.LCLVersion">
        <short>The version of the LCL as string. Used to distinguish form streams of different versions.</short>
      </element>
      <element name="TForm.Menu" link="#LCL.Forms.TCustomForm.Menu"/>
      <element name="TForm.OnActivate" link="#LCL.Forms.TCustomForm.OnActivate"/>
      <element name="TForm.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TForm.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TForm.OnClose" link="#LCL.Forms.TCustomForm.OnClose"/>
      <element name="TForm.OnCloseQuery" link="#LCL.Forms.TCustomForm.OnCloseQuery"/>
      <element name="TForm.OnContextPopup"/>
      <element name="TForm.OnCreate" link="#LCL.Forms.TCustomForm.OnCreate"/>
      <element name="TForm.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TForm.OnDeactivate" link="#LCL.Forms.TCustomForm.OnDeactivate"/>
      <element name="TForm.OnDestroy" link="#LCL.Forms.TCustomForm.OnDestroy"/>
      <element name="TForm.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TForm.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TForm.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TForm.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TForm.OnDropFiles" link="#LCL.Forms.TCustomForm.OnDropFiles"/>
      <element name="TForm.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TForm.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TForm.OnHelp" link="#LCL.Forms.TCustomForm.OnHelp"/>
      <element name="TForm.OnHide" link="#LCL.Forms.TCustomForm.OnHide"/>
      <element name="TForm.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TForm.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TForm.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TForm.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TForm.OnMouseEnter"/>
      <element name="TForm.OnMouseLeave"/>
      <element name="TForm.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TForm.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TForm.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TForm.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TForm.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TForm.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TForm.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TForm.OnShortCut" link="#LCL.Forms.TCustomForm.OnShortcut"/>
      <element name="TForm.OnShow" link="#LCL.Forms.TCustomForm.OnShow"/>
      <element name="TForm.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TForm.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TForm.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TForm.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TForm.OnWindowStateChange" link="#LCL.Forms.TCustomForm.OnWindowStateChange"/>
      <element name="TForm.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TForm.PixelsPerInch" link="#LCL.Forms.TCustomForm.PixelsPerInch"/>
      <element name="TForm.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TForm.PopupMode"/>
      <element name="TForm.PopupParent"/>
      <element name="TForm.Position"/>
      <element name="TForm.SessionProperties" link="#LCL.Controls.TControl.SessionProperties"/>
      <element name="TForm.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TForm.ShowInTaskBar" link="#LCL.Forms.TCustomForm.ShowInTaskBar"/>
      <element name="TForm.UseDockManager" link="#LCL.Controls.TWinControl.UseDockManager"/>
      <element name="TForm.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TForm.WindowState" link="#LCL.Forms.TCustomForm.WindowState"/>
      <!-- "class of" type Visibility: default -->
      <element name="TFormClass">
        <short>
          <var>TFormClass</var> - class of <var>TForm</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomDockForm">
        <short>
          <var>TCustomDockForm</var> - Base class for docking forms</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoAddDockClient" link="#LCL.Controls.TWinControl.DoAddDockClient">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.Client">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoRemoveDockClient" link="#LCL.Controls.TWinControl.DoRemoveDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoRemoveDockClient.Client">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.GetSiteInfo" link="#LCL.Controls.TWinControl.GetSiteInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.Client">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.InfluenceRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.MousePos">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.CanDock">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDockForm.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomDockForm</var>: performs <var>CreateNew</var> then initialises autoscroll and style properties</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.Create">TCustomForm.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.BorderStyle" link="#LCL.Forms.TCustomForm.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.FormStyle" link="#LCL.Forms.TCustomForm.FormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomDockForm.PixelsPerInch" link="#LCL.Forms.TCustomForm.PixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="THintWindow">
        <short>Hint Window - the popup box containing helpful information that appears when the mouse pointer hovers over an object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FActivating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintWindow.FAlignment" link="THintWindow.Alignment"/>
      <element name="THintWindow.FAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.FAutoHideTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FHideInterval" link="THintWindow.HideInterval"/>
      <!-- function Visibility: private -->
      <element name="THintWindow.GetDrawTextFlags">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.GetDrawTextFlags.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.SetAutoHide.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.AutoHideHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.AutoHideHint.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetHideInterval">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.SetHideInterval.Value">
        <short/>
      </element>
      <element name="THintWindow.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.WMNCHitTest">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.WMNCHitTest.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.DoShowWindow" link="#LCL.Forms.TCustomForm.DoShowWindow"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.UpdateRegion">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="THintWindow.Create"/>
      <element name="THintWindow.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="THintWindow.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHint">
        <short>Allow the hint message to be displayed in the specified rectangular space</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.ActivateHint.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHint.AHint">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHintData">
        <short>Allow the hint message to be displayed, with a pointer to further data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.ActivateHintData.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AHint">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="THintWindow.CalcHintRect">
        <short>Work out the size of the rectangle required to display the specified hint message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.CalcHintRect.Result">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.MaxWidth">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.AHint">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.AData">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.InitializeWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ReleaseHandle">
        <short>Release the handle for the hint message and return it to the system</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.SetBounds">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.SetBounds.ALeft">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.ATop">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.AWidth">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.AHeight">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="THintWindow.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.Alignment">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.AutoHide">
        <short>Does the hint disappear (get hidden) after a while?</short>
        <descr>If <var>AutoHide</var> is TRUE, the hint disappears afer an interval specified by <link id="THintWindow.HideInterval">HideInterval</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.BiDiMode">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.HideInterval">
        <short>The time after which the displayed hint disappears</short>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="THintWindowClass" link="THintWindow">
        <short>
          <var>THintWindowClass</var> - class of <var>THintWindow</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TMonitor">
        <short>Information about an phyiscal monitor.</short>
        <descr>All informations are retrieved dynamically from the OS,
          so that all changes are taken into account.
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMonitor.FHandle" link="TMonitor.Handle"/>
      <element name="TMonitor.FMonitorNum" link="TMonitor.MonitorNum"/>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetInfo">
        <short>Retrieves monitor information from the OS.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetInfo.Result">
        <short></short>
      </element>
      <element name="TMonitor.GetInfo.Info">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetLeft" link="TMonitor.Left"/>
      <element name="TMonitor.GetLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetHeight" link="TMonitor.Height"/>
      <element name="TMonitor.GetHeight.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetTop" link="TMonitor.Top"/>
      <element name="TMonitor.GetTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWidth" link="TMonitor.Width"/>
      <element name="TMonitor.GetWidth.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetBoundsRect" link="TMonitor.BoundsRect"/>
      <element name="TMonitor.GetBoundsRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWorkareaRect" link="TMonitor.WorkareaRect"/>
      <element name="TMonitor.GetWorkareaRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetPrimary" link="TMonitor.Primary"/>
      <element name="TMonitor.GetPrimary.Result">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitor.BoundsRect">
        <short>The logical dimensions of the monitor, within the desktop.
        </short>
      </element>
      <element name="TMonitor.Handle">
        <short>Identifies this monitor to the system.
        </short>
      </element>
      <element name="TMonitor.Height">
        <short>The height of the display.</short>
      </element>
      <element name="TMonitor.Left">
        <short>The leftmost screen coordinate of the display.</short>
      </element>
      <element name="TMonitor.MonitorNum">
        <short>Index of the monitor in the <link id="TScreen.Monitors"/> list.</short>
      </element>
      <element name="TMonitor.Primary">
        <short>True if this is the primary monitor of the system.</short>
      </element>
      <element name="TMonitor.Top">
        <short>The topmost screen coordinate of the display.</short>
      </element>
      <element name="TMonitor.Width">
        <short>The width of the display.</short>
      </element>
      <element name="TMonitor.WorkareaRect">
        <short>The usable display area, excluding a taskbar etc.
        </short>
      </element>
<!-- object Visibility: default -->
      <element name="TMonitorList">
        <short>A list of all available monitors.</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitorList.GetItem" link="TMonitorList.Items"/>
      <element name="TMonitorList.GetItem.Result">
        <short></short>
      </element>
      <element name="TMonitorList.GetItem.AIndex">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TMonitorList.SetItem" link="TMonitorList.Items"/>
      <element name="TMonitorList.SetItem.AIndex">
        <short></short>
      </element>
      <element name="TMonitorList.SetItem.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMonitorList.Notify">
        <short>List notification handler, destroys the Monitor object on removal from the list.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Notify.Ptr">
        <short>The monitor object.</short>
      </element>
      <element name="TMonitorList.Notify.Action">
        <short>The list operation.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitorList.Items">
        <short>The indexed list of all Monitors.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Items.AIndex">
        <short></short>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PCursorRec" link="TCursorRec"/>
      <!-- record type Visibility: default -->
      <element name="TCursorRec">
        <short>An element of the Cursor list.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Next">
        <short>The next list element.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Index">
        <short>The list index.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Handle">
        <short>The OS identifier for this cursor.
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenFormEvent">
        <short>Type of an screen notification handler, for form related events.[?]
        </short>
        <descr/>
        <seealso>
          <link id="TScreenNotification"/>
          <link id="TScreenControlEvent"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Sender">
        <short>The Screen[?]</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Form">
        <short>The affected form.</short>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenControlEvent">
        <short>Type of an screen notification handler, for control related events.[?]
        </short>
        <descr/>
        <seealso>
          <link id="TScreenNotification"/>
          <link id="TScreenFormEvent"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.Sender">
        <short>The Screen[?]</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.LastControl">
        <short>The <b>new</b> active control.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TScreenNotification">
        <short>Screen notification events and handler types.
        </short>
        <descr/>
        <seealso>
          <link id="TScreenFormEvent"/>
          <link id="TScreenControlEvent"/>
        </seealso>
      </element>
      <element name="TScreenNotification.snFormAdded">
        <short>A form was added.
        </short>
      </element>
      <element name="TScreenNotification.snRemoveForm">
        <short>A form was removed.
        </short>
      </element>
      <element name="TScreenNotification.snActiveControlChanged">
        <short>The focus moved to another control.
        </short>
      </element>
      <element name="TScreenNotification.snActiveFormChanged">
        <short>The focus moved to another form.
        </short>
      </element>
      <element name="TScreenNotification.snFormVisibleChanged">
        <short>The visibility of a form changed.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TMonitorDefaultTo">
        <short>The monitor to choose when screen coordinates are out of the screen bounds.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorDefaultTo.mdNearest">
        <short>Default to the nearest monitor.</short>
      </element>
      <element name="TMonitorDefaultTo.mdNull">
        <short>Default to Nil (no suggested monitor).</short>
      </element>
      <element name="TMonitorDefaultTo.mdPrimary">
        <short>Default to the primary monitor.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TScreen">
        <short>Provides information about the display and related objects.
        </short>
        <descr>
          <p>The virtual screen (desktop) can include multiple
            <link id="TScreen.Monitors">physical Monitors</link>.
          </p><p>
            Screen objects are Cursors, Fonts and Forms.
            For Delphi compatibility also (invisible) DataModules are listed.[?]
          </p><p>
            The currently active Form, Control and Cursor also are tracked.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TScreen.Cursors"/>
          <link id="TScreen.DataModules"/>
          <link id="TScreen.DesktopRect"/>
          <link id="TScreen.Fonts"/>
          <link id="TScreen.Forms"/>
          <link id="TScreen.Monitors"/>
          <link id="TScreen.WorkareaRect"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveControl" link="TScreen.ActiveControl"/>
      <element name="TScreen.FActiveCustomForm" link="TScreen.ActiveCustomForm"/>
      <element name="TScreen.FActiveForm" link="TScreen.ActiveForm"/>
      <element name="TScreen.FCursor" link="TScreen.Cursor"/>
      <element name="TScreen.FCursorCount" link="TScreen.Cursors"/>
      <element name="TScreen.FCursorMap" link="TScreen.Cursors"/>
      <element name="TScreen.FCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.FCustomFormsZOrdered" link="TScreen.CustomFormsZOrdered"/>
      <element name="TScreen.FDefaultCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.FFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.FFonts" link="TScreen.Fonts"/>
      <element name="TScreen.FFormList" link="TScreen.Forms"/>
      <element name="TScreen.FDataModuleList" link="TScreen.DataModules"/>
      <element name="TScreen.FIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.FMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.FScreenHandlers">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveControl">
        <short>The last active control, used to detect focus changes.</short>
        <descr/>
        <seealso>
          <link id="TScreen.RestoreLastActive"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveCustomForm">
        <short>The last active form, used to detect focus changes.</short>
        <descr/>
        <seealso>
          <link id="TScreen.RestoreLastActive"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FMonitors" link="TScreen.Monitors"/>
      <element name="TScreen.FOnActiveControlChange" link="TScreen.OnActiveControlChange"/>
      <element name="TScreen.FOnActiveFormChange" link="TScreen.OnActiveFormChange"/>
      <element name="TScreen.FPixelsPerInch" link="TScreen.PixelsPerInch"/>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSaveFocusedList">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSystemFont" link="TScreen.SystemFont"/>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DeleteCursor">
        <short>Removes an cursor from Cursors[].
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.DeleteCursor.AIndex">
        <short>The logical cursor ID.
        </short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyCursors">
        <short>Deletes the Cursors list.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyMonitors">
        <short>[?]</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.GetCursors.Result">
        <short/>
      </element>
      <element name="TScreen.GetCursors.AIndex">
        <short>The logical cursor ID.
        </short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormCount" link="TScreen.CustomFormCount"/>
      <element name="TScreen.GetCustomFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormZOrderCount" link="TScreen.CustomFormZOrderCount"/>
      <element name="TScreen.GetCustomFormZOrderCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.GetCustomForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomForms.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormsZOrdered" link="TScreen.CustomFormZOrdered"/>
      <element name="TScreen.GetCustomFormsZOrdered.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModuleCount" link="TScreen.DataModuleCount"/>
      <element name="TScreen.GetDataModuleCount.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModules" link="TScreen.DataModules"/>
      <element name="TScreen.GetDataModules.Result">
        <short></short>
      </element>
      <element name="TScreen.GetDataModules.AIndex">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopLeft" link="TScreen.DesktopLeft"/>
      <element name="TScreen.GetDesktopLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopTop" link="TScreen.DesktopTop"/>
      <element name="TScreen.GetDesktopTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopHeight" link="TScreen.DesktopHeight"/>
      <element name="TScreen.GetDesktopHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopWidth" link="TScreen.DesktopWidth"/>
      <element name="TScreen.GetDesktopWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopRect" link="TScreen.DesktopRect"/>
      <element name="TScreen.GetDesktopRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFonts" link="TScreen.Fonts"/>
      <element name="TScreen.GetFonts.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFormCount" link="TScreen.FormCount"/>
      <element name="TScreen.GetFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetForms" link="TScreen.Forms"/>
      <element name="TScreen.GetForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetForms.IIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetHeight" link="TScreen.Height"/>
      <element name="TScreen.GetHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitor" link="TScreen.Monitors"/>
      <element name="TScreen.GetMonitor.Result">
      <short></short>
      </element>
      <element name="TScreen.GetMonitor.Index">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitorCount" link="TScreen.MonitorCount"/>
      <element name="TScreen.GetMonitorCount.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetPrimaryMonitor" link="TScreen.PrimaryMonitor"/>
      <element name="TScreen.GetPrimaryMonitor.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWidth" link="TScreen.Width"/>
      <element name="TScreen.GetWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddForm">
        <short>Internal notification handler, adds a new form to the lists.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddForm.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveForm">
        <short>Internal notification handler, removes the form from the lists.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveForm.AForm">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.SetFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.SetFocusedForm.Result">
        <short></short>
      </element>
      <element name="TScreen.SetFocusedForm.AForm">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursor" link="TScreen.Cursor"/>
      <element name="TScreen.SetCursor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.SetCursors.AIndex">
        <short/>
      </element>
      <element name="TScreen.SetCursors.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.SetHintFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.SetIconFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.SetMenuFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.SetSystemFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateLastActive">
        <short>Remembers the currently active form and control as last active.
          Notifies all registered handlers of eventual changes.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateMonitors">
        <short>Builds the list of available monitors.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RestoreLastActive">
        <short>Moves the Focus back to the previously focused control.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddHandler">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandler.HandlerType">
        <short>The notification (event) type.</short>
      </element>
      <element name="TScreen.AddHandler.Handler">
        <short>The notification handler.</short>
      </element>
      <element name="TScreen.AddHandler.AsFirst">
        <short>Add the handler as the first (True) or last (False) handler.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveHandler">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandler.HandlerType">
        <short>The notification (event) type.</short>
      </element>
      <element name="TScreen.RemoveHandler.Handler">
        <short>The notification handler.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoAddDataModule" link="TScreen.DataModules">
        <short>Adds the DataModule to the list.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoAddDataModule.DataModule">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoRemoveDataModule" link="TScreen.DataModules">
        <short>Removes the DataModule from the list.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoRemoveDataModule.DataModule">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.NotifyScreenFormHandler">
        <short>Notifies all registered handlers for the given event.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.HandlerType">
        <short>The event type.</short>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.Form">
        <short>The related form.</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaHeight" link="TScreen.WorkAreaHeight"/>
      <element name="TScreen.GetWorkAreaHeight.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaLeft" link="TScreen.WorkAreaLeft"/>
      <element name="TScreen.GetWorkAreaLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaRect" link="TScreen.WorkAreaRect"/>
      <element name="TScreen.GetWorkAreaRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaTop" link="TScreen.WorkAreaTop"/>
      <element name="TScreen.GetWorkAreaTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaWidth" link="TScreen.WorkAreaWidth"/>
      <element name="TScreen.GetWorkAreaWidth.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.GetHintFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.GetIconFont.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.GetMenuFont.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.GetSystemFont.Result">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScreen.Create"/>
      <element name="TScreen.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScreen.Destroy"/>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormIndex" link="TScreen.CustomForms">
        <short>Returns the CustomForms[] Index of the form.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormIndex.Result">
        <short>The form Index, -1 if not found.
        </short>
      </element>
      <element name="TScreen.CustomFormIndex.AForm">
        <short>The Form to which the Index refers.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FormIndex">
        <short>Returns the Forms[] Index of the form.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.FormIndex.Result">
        <short>The form Index, -1 if not found.</short>
      </element>
      <element name="TScreen.FormIndex.AForm">
        <short>The Form to which the Index refers.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormZIndex">
        <short>The index of the form  in the Z dimension (Front to Back).</short>
        <descr>The index reflects the activation order of the forms,
          with the currently active form at index zero.
        </descr>
        <errors>
        </errors>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormZIndex.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormZIndex.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToFocusFront">
        <short>Moves the form to the front of all form lists.
        </short>
        <descr/>
        <errors>GDB exception when the form is (being) destroyed, or the application is shutting down.
        </errors>
        <seealso/>
      </element>
      <element name="TScreen.MoveFormToFocusFront.ACustomForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToZFront">
        <short>Moves the form to the front of the Z-order list (notification only).</short>
        <descr/>
        <errors>GDB exception when the form is (being) destroyed, or the application is shutting down.
        </errors>
        <seealso>
          <link id="TScreen.MoveFormToFocusFront"/>
        </seealso>
      </element>
      <element name="TScreen.MoveFormToZFront.ACustomForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalForm">
        <short>Returns the topmost Modal form (ie a form that is awaiting a user response).</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalForm.Result">
        <short>The modal form, or Nil if none is active.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalFormZIndex">
        <short>Returns the index of the tompost modal form in CustomFormsZOrdered[].
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalFormZIndex.Result">
        <short>The index, or -1 if no modal form is active.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormBelongsToActiveGroup">
        <short>Checks whether the form is visible[?]
          and either modal or not blocked by another modal form.[?]
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.AForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerForm">
        <short>Finds the named form, excluding designer forms.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.FindForm"/>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerForm.Result">
        <short></short>
      </element>
      <element name="TScreen.FindNonDesignerForm.FormName">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindForm">
        <short>Finds a form by its name.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TScreen.FindNonDesignerForm"/>
        </seealso>
      </element>
      <element name="TScreen.FindForm.Result">
        <short/>
      </element>
      <element name="TScreen.FindForm.FormName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerDataModule">
        <short>Finds the named DataModule, excluding designer modules.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.FindDataModule"/>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.Result">
        <short></short>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.DataModuleName">
        <short></short>
      </element>
      <element name="TScreen.FindDataModule.Result">
        <short></short>
      </element>
      <element name="TScreen.FindDataModule.DataModuleName">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.FindDataModule">
        <short>Finds the named DataModule.
        </short>
        <seealso>
          <link id="TScreen.FindNonDesignerDataModule"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.UpdateScreen">
        <short>Updates the <link id="TScreen.PixelsPerInch"/> property.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject"/>
      <element name="TScreen.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormAdded">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormAdded">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerRemoveForm">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerRemoveForm">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveControlChanged">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveControlChanged">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveFormChanged">
        <short>Adds an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveFormChanged">
        <short>Removes an notification handler.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormVisibleChanged">
        <short>Adds an notification handler.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short></short>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormVisibleChanged">
        <short>Removes an notification handler.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.RemoveHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.DisableForms">
        <short>Disable all forms except <var>SkipForm</var>.
        </short>
        <descr>
          <p>
             Used to show modal forms or dialogs.
          </p><p>
            The enabled state is determined from the widget, not from LCL properties.
          </p><p>
             If <var>DisabledList</var> is Nil, a new list is created.
             Then all disabled forms are added to that list.
          </p><p>
            When the modal form returns, call EnableForms to restore all forms.
          </p>
        </descr>
        <seealso>
          <link id="TScreen.EnableForms"/>
        </seealso>
      </element>
      <element name="TScreen.DisableForms.Result">
        <short>The list containing all disabled forms.</short>
      </element>
      <element name="TScreen.DisableForms.SkipForm">
        <short>Don't disable this form (ignored if Nil).</short>
      </element>
      <element name="TScreen.DisableForms.DisabledList">
        <short>The list to update. If Nil, a new list is created and returned.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.EnableForms">
        <short>Use this method to restore all
          <link id="TScreen.DisableForms">previously disabled</link> forms.
        </short>
        <seealso>
          <link id="TScreen.DisableForms"/>
        </seealso>
      </element>
      <element name="TScreen.EnableForms.AFormList">
        <short>The list containing the forms to enable. The list is destroyed on exit.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromPoint">
        <short>Find the monitor containing the given screen coordinates.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.MonitorFromRect"/>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromPoint.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromPoint.Point">
        <short>The screen coordinates to find.</short>
      </element>
      <element name="TScreen.MonitorFromPoint.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromRect">
        <short>Find the monitor containing (most of) the given screen coordinates.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.MonitorFromPoint"/>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromRect.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromRect.Rect">
        <short>The screen coordinates to find.</short>
      </element>
      <element name="TScreen.MonitorFromRect.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromWindow">
        <short>Find the monitor containing (most of) the given window.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromWindow.Result">
        <short>The monitor found.</short>
      </element>
      <element name="TScreen.MonitorFromWindow.Handle">
        <short>The window handle to use.</short>
      </element>
      <element name="TScreen.MonitorFromWindow.MonitorDefault">
        <short>What to return when no monitor was found.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveControl">
        <short>The control which has the Focus.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveCustomForm">
        <short>The custom form which has the Focus.
        </short>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveControl"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveForm">
        <short>The form which has the Focus.
        </short>
        <seealso>
          <link id="TScreen.ActiveControl"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursor">
        <short>The current mouse cursor shape.</short>
        <descr>Use one of the predefined cursor styles, e.g. crHourGlass.
        </descr>
        <seealso>
          <link id="Controls.crDefault"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursors">
        <short>The indexed list of available cursor shapes.
        </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Cursors.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormCount">
        <short>The number of Custom Forms.</short>
        <seealso>
          <link id="TScreen.CustomForms"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomForms">
        <short>The indexed list of Custom Forms.</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormCount"/>
        </seealso>
      </element>
      <element name="TScreen.CustomForms.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormsZOrdered">
        <short>The list of Custom Forms, indexed by Z-order (zero is topmost).</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormZOrderCount"/>
        </seealso>
      </element>
      <element name="TScreen.CustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormZOrderCount">
        <short>
          <var>CustomFormZOrderCount</var> - the number of forms arranged in Z-plane order (ie Front to Back)</short>
        <descr/>
        <seealso>
          <link id="TScreen.CustomFormsZOrdered"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModuleCount">
        <short>The number of existing data modules.</short>
        <seealso>
          <link id="TScreen.DataModules"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModules">
        <short>The indexed list of Data Modules.</short>
        <seealso>
          <link id="TScreen.DataModuleCount"/>
        </seealso>
      </element>
      <element name="TScreen.DataModules.Index">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopHeight" link="TScreen.DesktopRect">
        <short>The total vertical size of the desktop.
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopLeft" link="TScreen.DesktopRect">
        <short>The leftmost coordinate of the desktop.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopRect">
        <short>The total extent of the desktop, spanning all monitors.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopTop" link="TScreen.DesktopRect">
        <short>The topmost coordinate of the desktop.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopWidth" link="TScreen.DesktopRect">
        <short>The total horizontal size of the display.
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FocusedForm">
        <short>The form that holds Focus [really?]</short>
        <descr>[what's different from ActiveForm?]
        </descr>
        <seealso>
          <link id="TScreen.ActiveForm"/>
          <link id="TScreen.ActiveCustomForm"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Fonts">
        <short>The names of the available (installed) fonts.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FormCount" link="TScreen.Forms">
        <short>The number of existing Forms.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Forms">
        <short>The indexed list of all Forms, in Z-order.</short>
        <descr/>
        <seealso>
          <link id="TScreen.FormCount"/>
          <link id="TScreen.CustomForms"/>
        </seealso>
      </element>
      <element name="TScreen.Forms.Index">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Height">
        <short>The height of the primary monitor.</short>
        <seealso>
          <link id="TScreen.PrimaryMonitor"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.HintFont">
        <short>The font used to display Hints.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.IconFont">
        <short>The Icon font, used with desktop icons[?].
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.MenuFont">
        <short>The font used in menus.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.MonitorCount" link="TScreen.Monitors">
        <short>The number of available Monitors.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Monitors">
        <short>The indexed list of available monitors.
        </short>
        <seealso>
          <link id="TScreen.MonitorCount"/>
        </seealso>
      </element>
      <element name="TScreen.Monitors.Index">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveControlChange">
        <short>Handler for a Focus changed notification.</short>
        <descr/>
        <seealso>
          <link id="TScreen.AddHandlerActiveControlChanged"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveFormChange">
        <short>Handler for a Focus changed notification.</short>
        <descr/>
        <seealso>
          <link id="TScreen.AddHandlerActiveFormChanged"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PixelsPerInch">
        <short>The number of screen pixels for an virtual inch (DPI), in vertical direction.
        </short>
        <descr>
          The display uses virtual inches,
          which typically are bigger than physical inches.
          This requires that text appears bigger on an screen than e.g. on an printer.
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PrimaryMonitor">
        <short>The primary monitor typically shows the taskbar.
        </short>
        <seealso>
          <link id="TScreen.WorkareaRect"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.SystemFont">
        <short>[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Width">
        <short>The width of the primary monitor.</short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaHeight" link="TScreen.WorkareaRect">
        <short>The usable height of the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaLeft" link="TScreen.WorkareaRect">
        <short>The usable left coordinate on the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaRect">
        <short>The usable display area on the primary monitor, excluding e.g. the taskbar.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TScreen.DesktopRect"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaTop" link="TScreen.WorkareaRect">
        <short>The usable top coordinate on the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaWidth" link="TScreen.WorkareaRect">
        <short>The usable width of the primary monitor.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TQueryEndSessionEvent">
        <short>The type of an <link id="TApplication.OnQueryEndSession"/> handler.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TQueryEndSessionEvent.Cancel">
        <short>Set Cancel to True to prevent an logoff.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TExceptionEvent">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TExceptionEvent.Sender">
        <short/>
      </element>
      <element name="TExceptionEvent.E">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetHandleEvent">
        <short>[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TGetHandleEvent.Handle">
        <short></short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TIdleEvent">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TIdleEvent.Sender">
        <short/>
      </element>
      <element name="TIdleEvent.Done">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnUserInputEvent">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TOnUserInputEvent.Sender">
        <short/>
      </element>
      <element name="TOnUserInputEvent.Msg">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDataEvent">
        <short>The type of an asynchronous callback method.</short>
        <descr/>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TDataEvent.Data">
        <short>The argument passed to the method.</short>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Msg">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Reserved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.HintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShowPause">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.WasActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Pause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TAppHintTimerType">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TAppHintTimerType.ahttNone">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttShowHint">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttHideHint">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttReshowHint">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShowHintEvent">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TShowHintEvent.HintStr">
        <short/>
      </element>
      <element name="TShowHintEvent.CanShow">
        <short/>
      </element>
      <element name="TShowHintEvent.HintInfo">
        <short/>
      </element>
<!-- record type Visibility: default -->
      <element name="THintInfoAtMouse">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="THintInfoAtMouse.MousePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintInfoAtMouse.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintInfoAtMouse.ControlHasHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationFlag">
        <short>Application state flags.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationFlag.AppWaiting">
        <short>In Idle state[?]</short>
      </element>
      <element name="TApplicationFlag.AppIdleEndSent">
        <short>IdleEnd handlers have been notified[?]</short>
      </element>
      <element name="TApplicationFlag.AppHandlingException">
        <short>In exception handling[?]</short>
      </element>
      <element name="TApplicationFlag.AppNoExceptionMessages">
        <short>Suppress [or Panic on?] further exceptions[?]</short>
      </element>
      <element name="TApplicationFlag.AppActive">
        <short>Application has the focus.</short>
      </element>
      <element name="TApplicationFlag.AppDestroying">
        <short>Shutting down[?]</short>
      </element>
      <element name="TApplicationFlag.AppDoNotCallAsyncQueue">
        <short>Skip asynchronous callbacks between handling messages[?]</short>
      </element>
      <element name="TApplicationFlag.AppInitialized">
        <short>Application has been initialized.</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationFlags" link="TApplicationFlag"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationNavigationOption">
        <short>Which keys can be used for the navigation within a form[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationNavigationOption.anoTabToSelectNext">
        <short>The Tab key moves the Focus to the next (or previous) control in TabOrder.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoReturnForDefaultControl">
        <short>The Enter key triggers the default action.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoEscapeForCancelControl">
        <short>The Escape key triggers the Cancel action.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoF1ForHelp">
        <short>The F1 key brings up context sensitive help.
        </short>
      </element>
      <element name="TApplicationNavigationOption.anoArrowToSelectNextInParent">
        <short>The Arrow keys move the focus.[?]
        </short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationNavigationOptions" link="TApplicationNavigationOption"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationHandlerType">
        <short>Types of Application notification handlers.</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationHandlerType.ahtIdle">
        <short>Application becoming idle[?]</short>
      </element>
      <element name="TApplicationHandlerType.ahtIdleEnd">
        <short>Application becoming busy[?]</short>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownBefore">
        <short>Handler for KeyDown events, invoked before interface and LCL handlers[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownAfter">
        <short>Default handler for KeyDown events, invoked after interface and LCL handlers[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtActivate">
        <short>Handler invoked on
          application activated[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtDeactivate">
        <short>Handler invoked on
          application deactivated[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtUserInput">
        <short>Handler invoked on
          user input [what's this?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtException">
        <short>Handler invoked on
          unhandled[?] exception.
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtEndSession">
        <short>Handler invoked on
          session end [what's this?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtQueryEndSession">
        <short>Handler invoked before
          session ends[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtMinimize">
        <short>Handler invoked on
          application minimized[what's this?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtModalBegin">
        <short>Handler invoked on
          application entering modal state[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtModalEnd">
        <short>Handler invoked on
          application exiting modal state[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtRestore">
        <short>Handler invoked on
          application restored (from minimized state)[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtDropFiles">
        <short>Handler invoked on
          files dropped[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtHelp">
        <short>Handler invoked on
          F1 key (help request)[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtHint">
        <short>Handler invoked on
          Hint request[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtShowHint">
        <short>Handler invoked on
          Hint becoming visible[?]
        </short>
      </element>
      <element name="TApplicationHandlerType.ahtGetMainFormHandle">
        <short>Handler providing the Handle of the main form[?] [application/taskbar window?]
        </short>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PAsyncCallQueueItem" link="TAsyncCallQueueItem">
        <short>A queued asynchronous callback request node.</short>
        <descr/>
        <seealso/>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueueItem">
        <short>A queued asynchronous callback request node.</short>
        <descr/>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueueItem.Method">
        <short>The callback method.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.Data">
        <short>The method call argument.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.NextItem">
        <short>The next list node.</short>
        <descr/>
      </element>
      <element name="TAsyncCallQueueItem.PrevItem">
        <short>The preceding list node.
          [superfluous, could be removed?]
        </short>
        <descr>
        </descr>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueue">
        <short>The queue head for asynchronous callbacks.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueue.Top">
        <short>The first queued method.</short>
      </element>
      <element name="TAsyncCallQueue.Last">
        <short>The last queued method.</short>
      </element>
<!-- record type Visibility: default -->
      <element name="TAsyncCallQueues">
        <short>Management information for asynchronous callbacks.</short>
        <descr>
          <p>
            Two queues are used:
          </p><p>
            New calls are added to the Next queue.
          </p><p>
            When the application starts processing the calls,
            the Next queue becomes the Cur queue, and a new Next queue is created.
            This simplifies thread-safe addition of further calls.
          </p>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <element name="TAsyncCallQueues.CritSec">
        <short>The critical section for adding and removing queue elements.
        </short>
        <descr>
        </descr>
      </element>
      <element name="TAsyncCallQueues.Cur">
        <short>The currently processed queue. Processed entries are removed.
        </short>
        <descr>
        </descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueues.Next">
        <short>New calls are added to this queue.</short>
        <descr>
        </descr>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationType">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationType.atDefault">
        <short/>
      </element>
      <element name="TApplicationType.atDesktop">
        <short/>
      </element>
      <element name="TApplicationType.atPDA">
        <short/>
      </element>
      <element name="TApplicationType.atKeyPadDevice">
        <short></short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationShowGlyphs">
        <short>How glyphs are shown [on Button or Tab controls, and menus?]
        </short>
        <descr>
          <p>sbgAlways - show glyphs always (inspite of system preferences)</p>
          <p>sbgNever - show glyphs never (inspite of system preferences)</p>
          <p>sbgSystem - use system preferences for glyphs showing</p>
        </descr>
      </element>
      <element name="TApplicationShowGlyphs.sbgAlways">
        <short>Show glyphs always.</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgNever">
        <short>Show glyphs never.</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgSystem">
        <short>Show glyphs according to the platform default.</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TTaskBarBehavior">
        <short>How forms are represented in the TaskBar[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TTaskBarBehavior.tbDefault">
        <short>Show TaskBar buttons according to the platform default.</short>
      </element>
      <element name="TTaskBarBehavior.tbMultiButton">
        <short>Show buttons for Forms with ShowInTaskBar=stDefault.</short>
      </element>
      <element name="TTaskBarBehavior.tbSingleButton">
        <short>Hide buttons for Forms with ShowInTaskBar=stDefault.</short>
      </element>
<!-- object Visibility: default -->
      <element name="TApplication">
        <short>Application management and configuration for a GUI application.
        </short>
        <descr>
          <p>
            Provides a message loop, hooks for application event handlers, and more.
          </p><p>
            Includes the useful function <var>MessageBox</var>,
            a simple dialog intended for displaying error messages,
            but also usable as an alternative to the various Message Dialogs.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="TScreen"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationHandlers">
        <short>Holds the registered event handlers.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationType" link="TApplication.ApplicationType"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FAsyncCall">
        <short>Queues for asynchronous calls.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.QueueAsyncCall"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.FBigIconHandle">
        <short>The Handle of the big application icon.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsReleasing">
        <short>The list of components which currently are released (destroyed).</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Release"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsToRelease">
        <short>The list of components marked for release.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Release"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCreatingForm">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FFindGlobalComponentEnabled" link="TApplication.FindGlobalComponentEnabled"/>
      <element name="TApplication.FFlags" link="TApplication.Flags"/>
      <element name="TApplication.FHint" link="TApplication.Hint"/>
      <element name="TApplication.FHintColor" link="TApplication.HintColor"/>
      <element name="TApplication.FHintControl" link="TApplication.HintControl"/>
      <element name="TApplication.FHintHidePause" link="TApplication.HintHidePause"/>
      <element name="TApplication.FHintHidePausePerChar" link="TApplication.HintHidePausePerChar"/>
      <element name="TApplication.FHintPause" link="TApplication.HintPause"/>
      <element name="TApplication.FHintRect">
        <short>The screen area of the current Hint window[?]</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintShortCuts" link="TApplication.HintShortCuts"/>
      <element name="TApplication.FHintShortPause" link="TApplication.HintShortPause"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimer">
        <short>The timer for showing and hiding Hints[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimerType">
        <short>The Hint time mode[?]</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintWindow">
        <short>The current Hint window[?]</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FIcon" link="TApplication.Icon"/>
      <element name="TApplication.FIdleLockCount">
        <short>Counter for nested Idle locks, preventing execution of OnIdle handlers[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownKey">
        <short>Cached key event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownSender">
        <short>Cached key event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownShift">
        <short>Cached key event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControl">
        <short>Cached mouse event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControlValid">
        <short>Cached mouse event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMousePos">
        <short>Cached mouse event parameter[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FMainForm" link="TApplication.MainForm"/>
      <element name="TApplication.FMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.FModalLevel" link="TApplication.ModalLevel"/>
      <element name="TApplication.FMouseControl" link="TApplication.MouseControl"/>
      <element name="TApplication.FNavigation" link="TApplication.Navigation"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExceptProc">
        <short>The previously installed exception handler[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExitProc">
        <short>The previously installed Exit procedure[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnActionExecute" link="TApplication.OnActionExecute"/>
      <element name="TApplication.FOnActionUpdate" link="TApplication.OnActionUpdate"/>
      <element name="TApplication.FOnActivate" link="TApplication.OnActivate"/>
      <element name="TApplication.FOnDeactivate" link="TApplication.OnDeactivate"/>
      <element name="TApplication.FOnDestroy" link="TApplication.OnDestroy"/>
      <element name="TApplication.FOnDropFiles" link="TApplication.OnDropFiles"/>
      <element name="TApplication.FOnEndSession" link="TApplication.OnEndSession"/>
      <element name="TApplication.FOnGetMainFormHandle" link="TApplication.OnGetMainFormHandle"/>
      <element name="TApplication.FOnHelp" link="TApplication.OnHelp"/>
      <element name="TApplication.FOnHint" link="TApplication.OnHint"/>
      <element name="TApplication.FOnIdle" link="TApplication.OnIdle"/>
      <element name="TApplication.FOnIdleEnd" link="TApplication.OnIdleEnd"/>
      <element name="TApplication.FOnMinimize" link="TApplication.OnMinimize"/>
      <element name="TApplication.FOnModalBegin" link="TApplication.OnModalBegin"/>
      <element name="TApplication.FOnModalEnd" link="TApplication.OnModalEnd"/>
      <element name="TApplication.FOnQueryEndSession" link="TApplication.OnQueryEndSession"/>
      <element name="TApplication.FOnRestore" link="TApplication.OnRestore"/>
      <element name="TApplication.FOnShortcut" link="TApplication.OnShortcut"/>
      <element name="TApplication.FOnShowHint" link="TApplication.OnShowHint"/>
      <element name="TApplication.FOnUserInput" link="TApplication.OnUserInput"/>
      <element name="TApplication.FRestoreStayOnTop">
        <short>The list of all forms that should be restored to StayOnTop.</short>
        <descr>The list is created in RemoveStayOnTop, processed in RestoreStayOnTop.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.FShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.FShowMainForm" link="TApplication.ShowMainForm"/>
      <element name="TApplication.FShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FSmallIconHandle">
        <short>The Handle of the small application icon.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <!-- procedure Visibility: private -->
      <element name="TApplication.DoOnIdleEnd">
        <short>Notifies the OnIdleEnd handlers; called when the application exits Idle state.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetActive" link="TApplication.Active"/>
      <element name="TApplication.GetActive.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetCurrentHelpFile">
        <short>Searches for an HelpFile name in the active form, then in Application.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetCurrentHelpFile.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetExename">
        <short>[Useless, drop!?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetExename.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetMainFormHandle">
        <short>Determines the main form handle, using all available handlers.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnGetMainFormHandle"/>
          <link id="TApplicationHandlerType.ahtOnGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.GetMainFormHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetTitle">
        <short>When no Title was stored, extracts the program name from the commandline arguments.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetTitle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.FreeIconHandles">
        <short>Reloads the (new) application icons, notifies the widgetset and all forms.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.IconChanged">
        <short>Loads the new application icons, notifies the widgetset and all forms.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IconChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.SetBidiMode.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetFlags" link="TApplication.Flags"/>
      <element name="TApplication.SetFlags.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.SetMainFormOnTaskBar.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetNavigation" link="TApplication.Navigation"/>
      <element name="TApplication.SetNavigation.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.SetShowButtonGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <element name="TApplication.SetShowMenuGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <element name="TApplication.SetTaskBarBehavior.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseControl">
        <short>Handles mouse moving onto a new control.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMouseControl.NewMouseControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseHint">
        <short>Sets Hint to the (new) hint that applies to CurrentControl.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <element name="TApplication.UpdateMouseHint.CurrentControl">
        <short>The control under the mouse.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <element name="TApplication.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHint" link="TApplication.Hint"/>
      <element name="TApplication.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHintColor" link="TApplication.HintControl"/>
      <element name="TApplication.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetIcon" link="TApplication.Icon"/>
      <element name="TApplication.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.StopHintTimer">
        <short>Disables the Hint timer.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.ValidateHelpSystem">
        <short>Checks for an installed <link id="#lcl.HelpIntfs.HelpManager">HelpManager</link>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ValidateHelpSystem.Result">
        <short>True when HelpManager is not Nil.</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.WndProc">
        <short>Here: handles CM_ACTIONEXECUTE and CM_ACTIONUPDATE messages.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.WndProc.AMessage">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.DispatchAction">
        <short>Asks the active form and MainForm to handle the action.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.DispatchAction.Result">
        <short>True when the action was handled.</short>
      </element>
      <element name="TApplication.DispatchAction.Msg">
        <short/>
      </element>
      <element name="TApplication.DispatchAction.Action">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.AddHandler">
        <short>Adds an application notification handler.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplicationHandlerType"/>
        </seealso>
      </element>
      <element name="TApplication.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.AddHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RemoveHandler">
        <short>Removes an application notification handler.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplicationHandlerType"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RunLoop">
        <short>Encapsulates the application message loop (HandleMessage).
        </short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Activate">
        <short>Handler for application activation, notifies all activation handlers.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Deactivate">
        <short>Handler for application deactivation, notifies all deactivation handlers.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Deactivate.Force">
        <short>True when called from the widgetset.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.GetConsoleApplication">
        <short>Here: returns False, because this is a GUI application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.GetConsoleApplication.Result">
        <short>False for a GUI application.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleHandler">
        <short>Notifies all Idle handlers.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplication.OnIdle"/>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyIdleHandler.Done">
        <short>True when all handlers are done, meaning: wait for next message.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleEndHandler">
        <short>Notifies all Idle End handlers, when a new message arrived.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnIdleEnd"/>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyActivateHandler">
        <short>Notifies all Activation handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnActivate"/>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyDeactivateHandler">
        <short>Notifies all Deactivation handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnDeactivate"/>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyCustomForms">
        <short>Notifies all CustomForms of Msg arrived.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.NotifyCustomForms.Msg">
        <short>The message to process.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.IsHintMsg">
        <short>Nop, exists for Delphi compatibility only.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.IsHintMsg.Result">
        <short>Always False.</short>
      </element>
      <element name="TApplication.IsHintMsg.Msg">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.DoOnHelp">
        <short>OnHelp message handler. Tries OnHelp handlers of the active form, Application OnHelp and application Help handlers.
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnHelp"/>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.DoOnHelp.Result">
        <short>True when the message was handled.</short>
      </element>
      <element name="TApplication.DoOnHelp.Command">
        <short></short>
      </element>
      <element name="TApplication.DoOnHelp.Data">
        <short></short>
      </element>
      <element name="TApplication.DoOnHelp.CallHelp">
        <short>[?]</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoOnMouseMove">
        <short>OnMouseMove message handler, updates the Hint.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ShowHintWindow">
        <short>Shows or hides the Hint window.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHintWindow.Info">
        <short>Is updated with the Hint related information.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.OnHintTimer">
        <short>Event handler for timing the duration of hints.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.OnHintTimer.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.SetTitle" link="TApplication.Title"/>
      <element name="TApplication.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.StartHintTimer">
        <short>Starts the timer for display of a hint message.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <element name="TApplication.StartHintTimer.Interval">
        <short/>
      </element>
      <element name="TApplication.StartHintTimer.TimerType">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.UpdateVisible">
        <short>Asks the widgetset to update the TaskBar entries.[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoIdleActions">
        <short>Updates all Actions, hides splash screens.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.MenuPopupHandler">
        <short>Hides the Hint window.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.MenuPopupHandler.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ProcessAsyncCallQueue">
        <short>Calls all methods queued by QueueAsyncCall.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.FreeComponent" link="TApplication.ReleaseComponents"/>
      <element name="TApplication.FreeComponent.Data">
        <short>Ignored, should be zero.</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ReleaseComponents">
        <short>Destroys all components marked for release.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoBeforeFinalization">
        <short>Destroys all components.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.GetParams">
        <short>Returns the indexed commandline argument.</short>
      </element>
      <element name="TApplication.GetParams.Result">
        <short></short>
      </element>
      <element name="TApplication.GetParams.Index">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplication.Create"/>
      <element name="TApplication.Create.AOwner">
        <short>The Owner object that invoked this instance of TApplication</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplication.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ActivateHint">
        <short>[?]</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.ActivateHint.CursorPos">
        <short></short>
      </element>
      <element name="TApplication.ActivateHint.CheckHintControlChange">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetControlAtMouse">
        <short>Finds the control under the mouse.
        </short>
        <descr>Updates the LastMouse... info.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetControlAtMouse.Result">
        <short>The control, Nil if no control found.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlDestroyed">
        <short>Clears all references to the destroyed control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlDestroyed.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BigIconHandle">
        <short>The Handle of the large application Icon.</short>
        <seealso>
          <link id="TApplication.Icon"/>
        </seealso>
      </element>
      <element name="TApplication.BigIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.SmallIconHandle">
        <short>The Handle of the small application Icon.</short>
        <seealso>
          <link id="TApplication.Icon"/>
        </seealso>
      </element>
      <element name="TApplication.SmallIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BringToFront">
        <short>Asks the widgetset to bring the application's form(s) to the front[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CreateForm">
        <short>Creates a Form or component, owned by Application.</short>
        <descr>
          <p>
            Note: The name is confusing and only kept for Delphi compatibility.
            It can actually create any kind of component.
          </p><p>
            Creates a Component instance of the given class,
            sets the pointer to the component variable [and loads the component?].
          </p><p>
            [If it is a form it will be added to the application's forms list.?]
          </p><p>
            A splash form is shown immediately.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TApplication.CreateForm.InstanceClass">
        <short>The component class.</short>
      </element>
      <element name="TApplication.CreateForm.Reference">
        <short>The variable receiving the new component reference.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.UpdateMainForm">
        <short>When MainForm is Nil, this form becomes the application MainForm.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMainForm.AForm">
        <short>The form that may become the MainForm.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.QueueAsyncCall">
        <short>Inserts an asynchronous call into the queue.</short>
        <descr>This is thread safe.</descr>
        <errors>Exceptions on various inconsistencies of the queue.
        </errors>
        <seealso/>
        <example file="forms/tapplication_queueasynccall.pas"/>
      </element>
      <element name="TApplication.QueueAsyncCall.AMethod">
        <short>The method to call asynchronously.</short>
      </element>
      <element name="TApplication.QueueAsyncCall.Data">
        <short>The argument passed to the method.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAsyncCalls">
        <short>Removes all calls added via QueueAsyncCall.
        </short>
        <descr>This is thread safe.
        </descr>
        <errors>Exceptions on various inconsistencies of the queue.
        </errors>
      </element>
      <element name="TApplication.RemoveAsyncCalls.AnObject">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ReleaseComponent">
        <short>Safe destruction of a component, can be requested by the component itself.
        </short>
        <descr>Unless the application is shutting down, all requests are queued.
          Queued requests are processed when the application is not currently processing a message.
        </descr>
        <seealso/>
      </element>
      <element name="TApplication.ReleaseComponent.AComponent">
        <short>The component to destroy.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.ExecuteAction">
        <short>Invokes the <var>OnActionExecute</var> handler.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
      </element>
      <element name="TApplication.ExecuteAction.Result">
        <short>True when the Action was handled.</short>
      </element>
      <element name="TApplication.ExecuteAction.ExeAction">
        <short>The Action to execute.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.UpdateAction">
        <short>Invokes the <var>OnActionUpdate</var> handler.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.UpdateAction">TComponent.UpdateAction</link>
        </seealso>
      </element>
      <element name="TApplication.UpdateAction.Result">
        <short/>
      </element>
      <element name="TApplication.UpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleException">
        <short>
          <var>HandleException</var> method for handling an exception;
          attempts to maintain program execution if possible, otherwise exits gracefully
        </short>
        <descr>Individual exception handler methods should be supplied by the application programmer,
          to override place-holder entries declared in ancestor classes.<br/>
          This method checks whether the application is required to halt if an exception occurs, or invokes the appropriate handler. <br/>
          It also writes details of the exception to the appropriate place for debugging.
        </descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.HandleException">TCustomApplication.HandleException</link>
        </seealso>
      </element>
      <element name="TApplication.HandleException.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleMessage">
        <short>Handles all messages, then enters Idle state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpCommand">
        <short>Shhow help on [what?]</short>
        <descr>Currently relies on OnHelp handlers, CallHelp is not implemented.
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.HelpCommand.Result">
        <short>[?]</short>
      </element>
      <element name="TApplication.HelpCommand.Command">
        <short></short>
      </element>
      <element name="TApplication.HelpCommand.Data">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpContext">
        <short>Show context sensitive help.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.HelpContext.Result">
        <short>Request handled[?]</short>
      </element>
      <element name="TApplication.HelpContext.Context">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpKeyword">
        <short>Show help for a keyword.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.HelpKeyword.Result">
        <short/>
      </element>
      <element name="TApplication.HelpKeyword.Keyword">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowHelpForObject">
        <short>When Sender is a TControl, invoke its ShowHelp method.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHelpForObject.Sender">
        <short>Should be a TControl, else nothing will happen.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveStayOnTop">
        <short>Remove StayOnTop from all forms. Builds a form list for use in RestoreStayOnTop.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.RestoreStayOnTop"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveStayOnTop.ASystemTopAlso">
        <short>[?]</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RestoreStayOnTop">
        <short>Restores StayOnTop for all forms changed by RemoveStayOnTop.</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.RemoveStayOnTop"/>
        </seealso>
      </element>
      <element name="TApplication.RestoreStayOnTop.ASystemTopAlso">
        <short>[?]</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsWaiting">
        <short>True if the application is awaiting an event[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.IsWaiting.Result">
        <short>True if the application is in AppWaiting state.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CancelHint">
        <short>Called when the Hint time has expired, to stop showing the Hint.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HideHint">
        <short>Hides the Hint window.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HintMouseMessage">
        <short>Called when the the mouse is over a control with a Hint[?]
        </short>
        <descr/>Does nothing [exists for Delphi compatibility only?]
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.HintMouseMessage.Control">
        <short/>
      </element>
      <element name="TApplication.HintMouseMessage.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Initialize">
        <short>Initializes the widgetset (and more).
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.Initialize">TCustomApplication.Initialize</link>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.MessageBox">
        <short>Display an message dialog with several response buttons.</short>
        <descr>
          <p>The function is used internally to display messages during the handling of <var>Exceptions</var>,
            but is also available to application programmers as an alternative to some of the message dialogs found in <var>Dialogs</var>.
          </p>
          <p>The function returns an integer value corresponding to the button that was pressed; its value can be determined by reference to the constants [IDOK..IDHELP].</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.Dialogs.MessageDlg">MessageDlg</link>
        </seealso>
        <example file="dialogs/displaymessagebox.pas"/>
      </element>
      <element name="TApplication.MessageBox.Result">
        <short>Indicates the pressed button.</short>
        <descr>Can be one of the following values:<br/>
          IDOK<br/>
          IDCANCEL<br/>
          IDABORT<br/>
          IDRETRY<br/>
          IDIGNORE<br/>
          IDYES<br/>
          IDNO<br/>
          IDCLOSE<br/>
          IDHELP
    		</descr>
      </element>
      <element name="TApplication.MessageBox.Text">
        <short>The text in the MessageBox.</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Caption">
        <short>The Caption of the MessageBox.</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Flags">
        <short>The icon and buttons appearing in the box.
        </short>
        <descr>
          <p>
            Several constants are declared in the LCLType unit.
          </p><p>
            Add (better: OR) an icon constant and a buttons constant, for example<br/>
  		      MB_ABORTRETRYIGNORE + MR_ICONQUESTION will cause the application to display a query (?) icon in a box with three buttons: <br/>
            ABORT RETRY IGNORE.
          </p><p>
            Buttons can be one of:
          </p><p>
             MB_OK<br/>
             MB_OKCANCEL<br/>
             MB_ABORTRETRYIGNORE<br/>
             MB_YESNOCANCEL<br/>
             MB_YESNO<br/>
             MB_RETRYCANCEL
          </p><p>
            The icon can be one of:
          </p><p>
            MB_ICONHAND<br/>
            MB_ICONQUESTION<br/>
            MB_ICONEXCLAMATION<br/>
            MB_ICONASTERISK<br/>
            MB_ICONWARNING = MB_ICONEXCLAMATION<br/>
            MB_ICONERROR = MB_ICONHAND<br/>
            MB_ICONSTOP = MB_ICONHAND<br/>
            MB_ICONINFORMATION = MB_ICONASTERISK
          </p>
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Minimize">
        <short>Asks the widgetset to minimize the application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalStarted">
        <short>Called when a form is shown modally.</short>
        <descr>Invokes all OnModalBegin handlers when entering Modal state.
        </descr>
        <seealso>
          <link id="TApplication.ModalFinished"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalFinished">
        <short>Called when a modal form is closed.</short>
        <descr>Invokes all OnModalEnd handlers when exiting Modal state.
        </descr>
        <seealso>
          <link id="TApplication.ModalStarted"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Restore">
        <short>Restores the previously minimized application.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Minimize"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Notification">
        <short>Invokes the notification handlers.
        </short>
        <descr>Special handling, here: Clears the reference to a removed component,
          terminates the application when the MainForm is removed.
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TApplication.Notification.AComponent">
        <short/>
      </element>
      <element name="TApplication.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ProcessMessages">
        <short>
          Call this method during lengthy operations, to keep the GUI responsive.
        </short>
        <descr>
          Processes all waiting messages, then the queued asynchronous callbacks.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Idle">
        <short>Invoked when the application enters the idle state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Idle.Wait">
        <short>Wait for next message?</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Run" link="#fcl.CustApp.TCustomApplication.Run">
        <short>MainForm is loaded and control is passed to the event loop.
        </short>
        <descr>
        </descr>
        <errors/>
        <seealso>
          <link id="TApplication.RunLoop"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowException" link="#fcl.CustApp.TCustomApplication.ShowException">
        <short>Shows the exception message and asks the user to abort or continue.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowException.E">
        <short>The exception to show.
        </short>
        <seealso>
          <link id="#rtl.sysutils.exception"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Terminate" link="#fcl.CustApp.TCustomApplication.Terminate">
        <short>The application is terminated and the component engine is shutdown.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DisableIdleHandler">
        <short>Blocks Idle handling. Can be called moreoften, every call must be followed by EnableIdleHandler.
        </short>
        <descr>[what does this mean to application behaviour?]</descr>
        <seealso>
          <link id="TApplication.EnableIdleHandler"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.EnableIdleHandler">
        <short>Resume Idle handling.
        </short>
        <descr/>
        <errors>GDB exception when not previously disabled.
        </errors>
        <seealso>
          <link id="TApplication.DisableIdleHandler"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyUserInputHandler">
        <short>Notifies all user input handlers [of what?]
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyUserInputHandler.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownBeforeHandler">
        <short>Notifies all ahtKeyDownBefore handlers.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownHandler">
        <short>Notifies all ahtKeyDownAfter handlers, eventually reacts on F1 (Help).
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyDown">
        <short>Handles KeyDown events in a Control, e.g. handles navigation keys.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyDown.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyUp">
        <short>Handles KeyUp events in a Control, e.g. handles Enter and Esc keys.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyUp.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleHandler">
        <short>Adds an application Idle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnIdleHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleHandler">
        <short>Removes an application Idle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnIdleHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleEndHandler">
        <short>Adds an application IdleEnd handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleEndHandler">
        <short>Removes an application IdleEnd handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnIdleEndHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnUserInputHandler">
        <short>Adds an application user input handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnUserInputHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnUserInputHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnUserInputHandler">
        <short>Removes an application user input handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnUserInputHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownBeforeHandler">
        <short>Adds an application key down before interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownBeforeHandler">
        <short>Removes an application key down before interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownHandler">
        <short>Adds an application key down after interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownHandler">
        <short>Removes an application key down after interface handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownAfter"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnKeyDownHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnActivateHandler">
        <short>Adds an application activation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnActivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnActivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnActivateHandler">
        <short>Removes an application activation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnActivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDeactivateHandler">
        <short>Adds an application deactivation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDeactivateHandler">
        <short>Removes an application deactivation handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnDeactivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnExceptionHandler">
        <short>Adds an application exception handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtException"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnExceptionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnExceptionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnExceptionHandler">
        <short>Removes an application exception handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtException"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnExceptionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnEndSessionHandler">
        <short>Adds an application logoff[?] handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnEndSessionHandler">
        <short>Removes an application logoff[?] handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnQueryEndSessionHandler">
        <short>Adds an application logoff query handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnQueryEndSessionHandler">
        <short>Removes an application logoff query handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnMinimizeHandler">
        <short>Adds an application minimizing handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnMinimizeHandler">
        <short>Removes an application minimizing handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnMinimizeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalBeginHandler">
        <short>Adds an application becoming modal handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalBeginHandler">
        <short>Removes an application becoming modal handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalBeginHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalEndHandler">
        <short>Adds an application exiting modal state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalEndHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnModalEndHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalEndHandler">
        <short>Removes an application exiting modal state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalEndHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnRestoreHandler">
        <short>Adds an application exiting minimized state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnRestoreHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnRestoreHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnRestoreHandler">
        <short>Removes an application exiting minimized state handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnRestoreHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDropFilesHandler">
        <short>Adds an application dropped files handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDropFilesHandler">
        <short>Removes an application dropped files handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnDropFilesHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHelpHandler">
        <short>Adds an application Help handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnHelpHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHelpHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHelpHandler">
        <short>Removes an application Help handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnHelpHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHintHandler">
        <short>Adds an application Hint handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHintHandler">
        <short>Removes an application Hint handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnShowHintHandler">
        <short>Adds an application Hint show handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnShowHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnShowHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnShowHintHandler">
        <short>Removes an application Hint show handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnShowHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnGetMainFormHandleHandler">
        <short>Adds an application MainForm Handle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnGetMainFormHandleHandler">
        <short>Removes an application MainForm Handle handler.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnGetMainFormHandleHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAllHandlersOfObject">
        <short>Removes all handlers implemented in the given object.
         </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoBeforeMouseMessage">
        <short>Things to be done before a mouse message is processed.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoBeforeMouseMessage.CurMouseControl">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsShortcut">
        <short>Asks all shortcut handlers to handle the key.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IsShortcut.Result">
        <short>True when the shortcut was handled.</short>
      </element>
      <element name="TApplication.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfQueryEndSession">
        <short>Called by the interface to confirm the end of a session.</short>
        <descr>Asks all QueryEndSession handlers to confirm termination of the application.
        </descr>
        <seealso>
          <link id="TApplication.OnQueryEndSession"/>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <element name="TApplication.IntfQueryEndSession.Cancel">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfEndSession">
        <short>Called by the interface when the session ends.
        </short>
        <descr>Notifies all OnEndSession handlers.
        </descr>
        <seealso>
          <link id="TApplication.OnEndSession"/>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppActivate">
        <short>Called by the interface on application activation[?]
        </short>
        <descr>Notifies all activation handlers.
        </descr>
        <seealso>
          <link id="TApplication.OnActivate"/>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppDeactivate">
        <short>Called by the interface on application deactivation[?]
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnDeactivate"/>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppMinimize">
        <short>Called by the interface when the application is minimized.
          </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnMinimize"/>
          <link id="TApplicationHandlerType.ahtMinimize"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppRestore">
        <short>Called by the interface when the application is restored.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnRestore"/>
          <link id="TApplicationHandlerType.ahtRestore"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfDropFiles">
        <short>Called by the interface when files have been dropped.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.OnDropFiles"/>
          <link id="TApplicationHandlerType.ahtDropFiles"/>
        </seealso>
      </element>
      <element name="TApplication.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfThemeOptionChange">
        <short>Called by the interface when a theme option has changed.
        </short>
        <descr/>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AThemeServices">
        <short></short>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AOption">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsRTLLang">
        <short>Checks the given language name for right-to-left reading.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IsRTLLang.Result">
        <short></short>
      </element>
      <element name="TApplication.IsRTLLang.ALang">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.Direction">
        <short>Checks the given language name for right-to-left reading.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.Direction.Result">
        <short></short>
      </element>
      <element name="TApplication.Direction.ALang">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.DoArrowKey">
        <short>Uses arrow keys for navigation, if enabled.
        </short>
      </element>
      <element name="TApplication.DoArrowKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoArrowKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoArrowKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoEscapeKey">
        <short>Interprets Esc as Cancel action, if applicable.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.DoEscapeKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoEscapeKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoEscapeKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoReturnKey">
        <short>Interprets Enter as the default action, if applicable.
        </short>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplication.DoReturnKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoReturnKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoReturnKey.Shift">
        <short>The active modifier keys.</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoTabKey">
        <short>Uses the Tab key for navigation, if enabled.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoTabKey.AControl">
        <short>The control receiving the key.</short>
      </element>
      <element name="TApplication.DoTabKey.Key">
        <short>The virtual key; becomes VK_UNKNOWN when handled.</short>
      </element>
      <element name="TApplication.DoTabKey.Shift">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Active">
        <short>True if the application has the focus.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ApplicationType">
        <short>The type of the application (ie the sort of device for which it is intended).</short>
        <descr>
          <p>The type of the application:</p>
          <p>Default, Desktop, Handheld, PDA, Smartphone</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.BidiMode">
        <short>The bidirectional mode to use.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.CaptureExceptions">
        <short>Enables exception handling by Application.
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.FindGlobalComponentEnabled">
        <short>Enables searching for global components by name.[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Flags">
        <short>Application state flags.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Hint">
        <short>The current Hint text.</short>
        <descr>
          <p>
            A hint is a small pop-up mesage that appears briefly
            while the mouse hovers over a control.
          </p><p>
            It usually displays useful information about how to use an object or what data should be entered, etc
          </p><p>
            Several properties allow to customize the delay before a Hint is shown,
            after an mouse move, and how long it will stay visible.
          </p>
        </descr>
        <seealso>
          <link id="TApplication.HintPause"/>
          <link id="TApplication.HintHidePause"/>
          <link id="TApplication.HintHidePausePerChar"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintColor">
        <short>The color of Hint windows.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePause">
        <short>How long a Hint stays visible, after an mouse move.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePausePerChar">
        <short>How much a keystroke extends the time a Hint stays visible (added to HintHidePause).
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.HintHidePause"/>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintPause">
        <short>The delay before a Hint is shown.
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortCuts">
        <short>Enables the display of keyboard shortcuts (e.g. on menu entries).
          [not implemented?]
        </short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortPause">
        <short>The pause before a different Hint is displayed.</short>
        <descr/>
        <seealso>
          <link id="TApplication.Hint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Icon">
        <short>The icon associated with this application.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainForm">
        <short>The application terminates when this form is closed.
        </short>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormHandle">
        <short>The Handle of the MainForm[?]</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplication.OnGetMainFormHandle"/>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormOnTaskBar">
        <short>[?]
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ModalLevel">
        <short>The number of modal forms shown.</short>
        <descr>Tracks modal forms showing another form modally.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MouseControl">
        <short>The control currently under the mouse.</short>
        <descr>Used to detect mouse entering and leaving a control.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Navigation">
        <short>Allows to switch between controls by pressing keys.
        </short>
        <descr>
          <p>These keys can be enabled for navigation:</p>
          <ul>
          <li>
            The Tab key moves the Focus to the next (or previous) control in TabOrder.
          </li><li>
            The Enter key triggers the default action.
          </li><li>
            The Escape key triggers the Cancel action.
          </li><li>
            The F1 key brings up context sensitive help.
          </li><li>
            The Arrow keys move the focus.[?]
          </li>
          </ul>
        </descr>
        <seealso>
          <link id="TApplicationNavigationOptions"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionExecute">
        <short>Default handler for unhandled Actions[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionUpdate">
        <short>Default handler for unhandled Action updates[?]
        </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActivate">
        <short>Event handler for activation of the application.</short>
        <seealso>
          <link id="TApplicationHandlerType.ahtActivate"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDeactivate">
        <short>Event handler for deactivation of the application.</short>
        <seealso>
          <link id="TApplicationHandlerType.ahtDeactivate"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDestroy">
        <short>[?]
        </short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDropFiles">
        <short>The default handler for dropped files[?]
        </short>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnEndSession">
        <short>Event handler for ending a session of the application [or logoff?]
        </short>
        <seealso>
          <link id="TApplicationHandlerType.ahtEndSession"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnGetMainFormHandle">
        <short>[?]</short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtGetMainFormHandle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHelp">
        <short>Event handler when help is requested.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHelp"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHint">
        <short>Event handler when a hint is requested.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtHint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdle">
        <short>Event handler for application entering Idle state.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdleEnd">
        <short>Event handler for application leaving Idle state.</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtIdleEnd"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnMinimize">
        <short>Event handler for application minimized.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalBegin">
        <short>Event handler for a modal form opened (application entering modal mode).
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalBegin"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalEnd">
        <short>Event handler for all modal forms closed (application exiting modal mode).
        </short>
        <descr>
        </descr>
        <seealso>
          <link id="TApplicationHandlerType.ahtModalEnd"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnQueryEndSession">
        <short>This event handler can deny to end the session.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtQueryEndSession"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnRestore">
        <short>Event handler for application restored (from minimized/maximized state).</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShortcut">
        <short>This event handler can interpret keystrokes as shortcuts,
          before the normal target handles the key[?].
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtKeyDownBefore"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShowHint">
        <short>Event handler for showing an Hint.
        </short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtShowHint"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnUserInput">
        <short>[?]</short>
        <descr/>
        <seealso>
          <link id="TApplicationHandlerType.ahtUserInput"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowButtonGlyphs">
        <short>Allows to override the platform default for glyphs on buttons.
        </short>
        <descr>Some platforms show glyphs on all buttons, others don't.
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowHint">
        <short>Enables Hint display[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMainForm">
        <short>Allows to show or hide the main form, on application start.
          Default TRUE.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMenuGlyphs">
        <short>Allows to show glyphs in menus[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.TaskBarBehavior">
        <short>How forms are represented in the TaskBar.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Title" link="#fcl.CustApp.TCustomApplication.Title"/>
<!-- constant Visibility: default -->
      <element name="DefHintColor">
        <short>The default hint window color.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintPause">
        <short>The default pause before hint window displays (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintShortPause">
        <short>The default Hint reshow pause.</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePause">
        <short>The default pause before hint is hidden (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePausePerChar">
        <short>The default pause added to DefHintHidePause (ms).</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- object Visibility: default -->
      <element name="TApplicationProperties">
        <short>
          <var>TApplicationProperties</var>: The properties of the current application</short>
        <descr>
          <p>TApplication Properties can be set as a local default set of properties to be used for any new instance fo TApplication</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.FHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.FHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.FHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.FHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.FHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.FHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.FHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.FOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.FOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.FOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.FOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.FOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.FOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.FOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.FOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.FOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.FOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.FOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.FOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.FOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.FOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.FOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.FShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.FShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.FShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.FShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.FTitle" link="TApplicationProperties.Title"/>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.SetHelpFile.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.SetHintHidePause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.SetHintPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.SetHintShortCuts.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.SetHintShortPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.SetShowButtonGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.SetShowMenuGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.SetShowMainForm.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetTitle" link="TApplicationProperties.Title"/>
      <element name="TApplicationProperties.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.SetOnException.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.SetOnGetMainFormHandle.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.SetOnIdle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.SetOnIdleEnd.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.SetOnEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.SetOnQueryEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.SetOnMinimize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.SetOnModalBegin.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.SetOnModalEnd.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.SetOnRestore.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.SetOnDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.SetOnHelp.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.SetOnHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.SetOnShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.SetOnUserInput.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplicationProperties.Create">
        <short>
          <var>Create</var> - constructor for TApplicationProperties: calls inherited <var>Create</var>, then sets some defaults if new application is being designed, or loads local values from existing application </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.LCLClasses.TLCLComponent.Create">TLCLComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplicationProperties.Destroy">
        <short>
          <var>Destroy</var> - destructor for TApplicationProperties: removes a number of handlers then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.LCLClasses.TLCLComponent.Destroy">TLCLComponent.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.CaptureExceptions">
        <short>
          <var>CaptureExceptions</var> - Determine whether exceptions are being captured</short>
        <descr>Boolean property (true if exceptions are being captured); reads or writes flag to see if they are being captured
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HelpFile">
        <short>
          <var>HelpFile</var> - Determines which file to use for Help</short>
        <descr>Reads or writes flag to determine name of Help file - name is stored as a string
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Hint">
        <short>
          <var>Hint</var> - Determines Hint to be used</short>
        <descr>Reads or writes flag to determine Hint - stored as a string
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintColor">
        <short>
          <var>HintColor</var> - Colour to be used when displaying Hint</short>
        <descr>Reads or writes flag to determine Hint colour (stored as a TColor integer)
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintHidePause">
        <short>
          <var>HintHidePause</var> - the length of pause before a hint becomes hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintPause">
        <short>
          <var>HintPause</var> - the length of pause before a hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortCuts">
        <short>
          <var>HintShortCuts</var> - the hints for shortcut keys (present if True)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortPause">
        <short>
          <var>HintShortPause</var> - the length of pause before a shortcut hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnDropFiles">
        <short>
          <var>OnDropFiles</var> - Event handler when files are dropped on the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnEndSession">
        <short>
          <var>OnEndSession</var> - Event handler for the end of the session</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnException">
        <short>
          <var>OnException</var> - Event handler for exceptions</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnGetMainFormHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHelp">
        <short>
          <var>OnHelp</var> - Event handler when help is needed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHint">
        <short>
          <var>OnHint</var> - Event handler when a hint is needed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdle">
        <short>
          <var>OnIdle</var> - event handler for the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdleEnd">
        <short>
          <var>OnIdleEnd</var> - event handler for the end of the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnMinimize">
        <short>
          <var>OnMinimize</var> - Event handler for minimising the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnModalBegin">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnModalEnd">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnQueryEndSession">
        <short>
          <var>OnQueryEndSession</var> - Event handler for a query at the end of a  session</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnRestore">
        <short>
          <var>OnRestore</var> - Event handler for restoring a form which has been minimised or maximised</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnShowHint">
        <short>
          <var>OnShowHint</var> - Event handler for showing a hint</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnUserInput">
        <short>
          <var>OnUserInput</var> - Event handler when user input is received</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowButtonGlyphs">
        <short>
          <var>ShowButtonGlyphs</var> - determines whether to show show or not glyphs on TBitBtn controls</short>
        <descr>This option allows to set rule for all application TBitBtn controls which have GlyphShowMode = gsmApplication.

Different operation systems has different preferences regards showing button glyphs. Mac OS X and Windows UI guidlines suggests not to use them. Gnome has a special theme setting for this. sbgSystem option allows application to use system preferences for glyphs showing. sbgAlways is the default value because of Delphi compatibility.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowHint">
        <short>
          <var>ShowHint</var> - Determines whether a hint is to be displayed</short>
        <descr>Read or write flag to determine whether to display hint (stored as boolean, True if hint is to be displayed)
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowMainForm">
        <short>
          <var>ShowMainForm</var> - Determines whether main form is to be displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowMenuGlyphs">
        <short>
          <var>ShowMenuGlyphs</var> - Deturmines whether show or not glyphs in menu</short>
        <descr>This option allows to set rule for all application TMenuItem components which have GlyphShowMode = gsmApplication.

Different operation systems has different preferences regards showing images in menus. Mac OS X suggests not to use them. Gnome has a special theme setting for this. sbgSystem option allows application to use system preferences for menu icons showing. sbgAlways is the default value because of Delphi compatibility.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Title">
        <short>
          <var>Title</var> to be shown in Application's top Border</short>
        <descr/>
        <seealso/>
      </element>
<!-- function Visibility: public -->
      <element name="TIDesigner.IsDesignMsg">
        <short>
          <var>IsDesignMsg</var> - receives a message from Sender, and returns True if it is a design message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Modified">
        <short>Method when design is <var>Modified</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Notification">
        <short>
          <var>Notification</var> that the suppied Operation has been applied to the specified Component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.PaintGrid">
        <short>
          <var>PaintGrid</var> - method for painting the grid in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.ValidateRename">
        <short>
          <var>ValidateRename</var> - method to validate the Rename process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.CurName">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.NewName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.GetShiftState">
        <short>
          <var>GetShiftState</var> - returns the value of the shift state (whether shifted, Cntl key, Alt key etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.GetShiftState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.SelectOnlyThisComponent">
        <short>
          <var>SelectOnlyThisComponent</var> - method to select only the currrent component in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.SelectOnlyThisComponent.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.UniqueName">
        <short>
          <var>UniqueName</var> - returns a Unique name for the designer, using the BaseName as a starting point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.UniqueName.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.UniqueName.BaseName">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TFormPropertyStorage">
        <short>
          <var>TFormPropertyStorage</var> - class for storage of a Form's properties</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormCreate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TFormPropertyStorage.FormCreate.Sender">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TFormPropertyStorage.FormClose.Sender">
        <short/>
      </element>
      <element name="TFormPropertyStorage.FormClose.CloseAction">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFormPropertyStorage.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TFormPropertyStorage.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFormPropertyStorage.Destroy" link="#rtl.Classes.TComponent.Destroy"/>
<!-- function Visibility: default -->
      <element name="KeysToShiftState">
        <short>
          <var>KeysToShiftState</var> - converts an actual physical key code to a shift state (ie Shift, Ctrl, Alt etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="KeysToShiftState.Result">
        <short/>
      </element>
      <element name="KeysToShiftState.Keys">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="KeyDataToShiftState">
        <short>
          <var>KeyDataToShiftState</var> - converts Key data to a shift state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="KeyDataToShiftState.Result">
        <short/>
      </element>
      <element name="KeyDataToShiftState.KeyData">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ShiftStateToKeys">
        <short>[?]</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="ShiftStateToKeys.Result">
        <short></short>
      </element>
      <element name="ShiftStateToKeys.ShiftState">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="WindowStateToStr">
        <short>
          <var>WindowStateToStr</var> - converts a Window state to a string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="WindowStateToStr.Result">
        <short/>
      </element>
      <element name="WindowStateToStr.State">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="StrToWindowState">
        <short>
          <var>StrToWindowState</var> - converts a string to a Window state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="StrToWindowState.Result">
        <short/>
      </element>
      <element name="StrToWindowState.Name">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="dbgs">
        <short>[?]</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="dbgs.Result">
        <short></short>
      </element>
      <element name="dbgs.State">
        <short></short>
      </element>
      <element name="dbgs.Action">
        <short></short>
      </element>
      <element name="dbgs.Kind">
        <short></short>
      </element>
<!-- alias type Visibility: default -->
      <element name="TFocusState">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="SaveFocusState">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SaveFocusState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RestoreFocusState">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="RestoreFocusState.FocusState">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TGetDesignerFormEvent">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TGetDesignerFormEvent.Result">
        <short/>
      </element>
      <element name="TGetDesignerFormEvent.APersistent">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="OnGetDesignerForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetParentForm">
        <short>The topmost Form containing Control.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetParentForm.Result">
        <short/>
      </element>
      <element name="GetParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFirstParentForm">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetFirstParentForm.Result">
        <short/>
      </element>
      <element name="GetFirstParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDesignerForm">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetDesignerForm.Result">
        <short/>
      </element>
      <element name="GetDesignerForm.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindRootDesigner">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="FindRootDesigner.Result">
        <short/>
      </element>
      <element name="FindRootDesigner.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsAccel">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="IsAccel.Result">
        <short/>
      </element>
      <element name="IsAccel.VK">
        <short/>
      </element>
      <element name="IsAccel.Str">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyApplicationUserInput">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="NotifyApplicationUserInput.Msg">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetShortHint">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetShortHint.Result">
        <short/>
      </element>
      <element name="GetShortHint.Hint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetLongHint">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetLongHint.Result">
        <short/>
      </element>
      <element name="GetLongHint.Hint">
        <short/>
      </element>
<!-- variable Visibility: default -->
      <element name="Application">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Screen">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="ExceptionObject">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="HintWindowClass">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="RequireDerivedFormResource">
        <short>[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- function type Visibility: default -->
      <element name="TMessageBoxFunction">
        <short>
          <var>TMessageBoxFunction</var> - the function to be used by a message box: specifies Text and Flags, and returns an integer value</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TMessageBoxFunction.Result">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Text">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Caption">
        <short/>
      </element>
      <element name="TMessageBoxFunction.Flags">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="MessageBoxFunction">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultBorderIcons">
        <short>[?]</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CreateWidgetset">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateWidgetset.AWidgetsetClass">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FreeWidgetSet">
        <short>[?]</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TDefaultMonitor">
        <short>The preferred monitor for showing a form.
        </short>
        <descr>
          <p>When a form is not assigned to a specific monitor,
            assume the following display context:
          </p>
          <ul>
            <li>
              dmDesktop - on the full desktop
            </li><li>
              dmPrimary - on the primary monitor
            </li><li>
              dmMainForm - on the same monitor as the main form. If there is no main form then use dmPrimary behavior.
            </li><li>
              dmActiveForm - on the same monitor as the currently active form. If there is no active form use dmMainForm behavior.
            </li>
          </ul>
        </descr>
      </element>
      <element name="TDefaultMonitor.dmDesktop">
        <short>Place the form on the full desktop.</short>
      </element>
      <element name="TDefaultMonitor.dmPrimary">
        <short>Place the form on the primary monitor.</short>
      </element>
      <element name="TDefaultMonitor.dmMainForm">
        <short>Place the form on the same monitor as the main form.
          If there is no such form then use the primary monitor.
        </short>
      </element>
      <element name="TDefaultMonitor.dmActiveForm">
        <short>Place the form on the same monitor as the currently active form.
          If there is no such form then use the primary monitor.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPopupMode">
        <short>[?]</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TPopupMode.pmNone">
        <short></short>
      </element>
      <element name="TPopupMode.pmAuto">
        <short></short>
      </element>
      <element name="TPopupMode.pmExplicit">
        <short></short>
      </element>
    </module>
    <!-- Forms -->
  </package>
</fpdoc-descriptions>
