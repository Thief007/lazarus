<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    LCLIntf
  ====================================================================
-->
    <module name="LCLIntf">
      <short>Contains winapi like functions for Delphi compatibility.</short>
      <descr>
        <p>This unit was created for Delphi compatibility. It
          contains selected functions from the Delphi Windows unit,
          which finally are implemented in the widgetsets.
        </p><p>
          For LCL users:<br/>
          The functions can be used to make porting of Delphi applications easier,
          and are not 100% emulating winapi functions, not even under windows.
          They were implemented and tested with some common Delphi libraries.
          The LCL contains many extra functions that the Delphi VCL does not have.
        </p>
        <remark>Some functions are not exactly Delphi or WinAPI compatible.
        </remark>
        <p>
          For example:<br/>
          Instead of using the common windows functions SaveDC and RestoreDC use
          the Canvas.SaveHandleState and Canvas.RestoreHandleState.
          [really? where's an according map?]
        </p>
      </descr>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- function Visibility: default -->
      <element name="Arc">
        <short>Draws an elliptical curve.</short>
        <descr>
          <p>Use Arc to draw an elliptically curved line with the current Pen.</p>
          <p>[this looks outdated?]
            The angles angle1 and angle2 are 1/16th of a degree. For example, a full
            circle equals 5760 (16*360). Positive values of Angle and AngleLength mean
            counter-clockwise while negative values mean clockwise direction.
          </p>
          <p>Zero degrees is at the 3'o clock position (right).</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="Arc.Result">
        <short/>
      </element>
      <element name="Arc.DC">
        <short/>
      </element>
      <element name="Arc.Left">
        <short></short>
      </element>
      <element name="Arc.Top">
        <short></short>
      </element>
      <element name="Arc.Right">
        <short></short>
      </element>
      <element name="Arc.Bottom">
        <short></short>
      </element>
      <element name="Arc.Angle16Deg">
        <short>The starting angle in 1/16 degrees, starting right and continuing counter-clockwise.</short>
      </element>
      <element name="Arc.Angle16DegLength">
        <short>[?]</short>
      </element>
<!-- function Visibility: default -->
      <element name="AngleChord">
        <short>Draws a filled Chord described by two angles.</short>
        <descr>
          <p>
            AngleChord is a Lazarus addition, similar to the Windows API Chord,
            but uses angles to control the location of the chord inside the ellipse
            instead of two points like the Windows API Chord.
          </p><p>
            A Chord is a section of an ellipse between two angles (angle1 and angle2),
            closed by a straight line (secant).
            It's equivalent to a Pie without the triangle between the arc and the center of the ellipse.
          </p><p>
            The curve part of the chord is defined by the ellipse which fits in the
            bounding rectangle specified by the coordinates x1, y1, x2 and y2.
          </p><p>
            The Chord is outlined by the current Pen and filled with the current Brush.
          </p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.LCLIntf.Pie">LCLIntf.Pie</link>
          <link id="#lcl.Graphics.TCanvas.Chord">Graphics.TCanvas.Chord</link>
          <link id="#lcl.Graphics.TCanvas.Pie">Graphics.TCanvas.Pie</link>
        </seealso>
      </element>
      <element name="AngleChord.Result">
        <short>False on failure.</short>
      </element>
      <element name="AngleChord.DC">
        <short/>
      </element>
      <element name="AngleChord.x1">
        <short></short>
      </element>
      <element name="AngleChord.y1">
        <short></short>
      </element>
      <element name="AngleChord.x2">
        <short></short>
      </element>
      <element name="AngleChord.y2">
        <short></short>
      </element>
      <element name="AngleChord.angle1">
        <short>The starting angle in 1/16 degrees, starting right and continuing counter-clockwise.</short>
      </element>
      <element name="AngleChord.angle2">
        <short>The ending angle in 1/16 degrees, starting right and continuing counter-clockwise.</short>
      </element>
<!-- function Visibility: default -->
      <element name="BeginPaint">
        <short>Start painting in a window.</short>
        <descr>This function is for use in WM_PAINT handlers only.
          Not all platforms allow for painting outside WM_PAINT messages.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="BeginPaint.Result">
        <short/>
      </element>
      <element name="BeginPaint.Handle">
        <short/>
      </element>
      <element name="BeginPaint.PS">
        <short/>
      </element>
<!-- function Visibility: default -->
      <element name="BitBlt">
        <short>Copies a section of a Canvas to another one, performing a raster operation (ROP).</short>
        <descr>
          <p>
            This routine implements the equivalent Windows GDI API
            of the same name in all platforms supported by Lazarus.
            It copies a section of a Canvas to another one, without any stretching.
            It allows to select the kind of operation which should be
            performed to draw the pixels into the destination in the parameter ROP.
            Allowed operations go from simply copying the pixels without change
            to inverting them and also to executing logical operations involving the source pixels and the previously
            existing pixels in the destination Canvas.
          </p><p>
            For normal usage one should only use SRCOPY in the ROP parameter,
            other operations may not be supported by all widgetsets.
          </p><p>
            There exist 16 raster operations, according to the possible combinations
            of two (boolean) values.
            Excluding the NOP case, that doesn't modify the target area,
            the possible values for ROP are:</p>
          <ul>
            <li>BLACKNESS - Fills the destination rectangle with black</li>
            <li>DSTINVERT - Inverts the colors of the destination area</li>
            <li>MERGECOPY -</li>
            <li>MERGEPAINT -</li>
            <li>NOTSRCCOPY -</li>
            <li>NOTSRCERASE -</li>
            <li>PATCOPY -</li>
            <li>PATINVERT -</li>
            <li>PATPAINT -</li>
            <li>SRCAND -</li>
            <li>SRCCOPY -</li>
            <li>SRCERASE -</li>
            <li>SRCINVERT -</li>
            <li>SRCPAINT - Combines the colors of the source and the destination using the operator OR on each pixel</li>
            <li>WHITENESS - Fills the destination rectangle with white</li>
          </ul>
          <p>These flags can be added to above ROPs:
          </p>
          <ul>
            <li>CAPTUREBLT - Includes windows which are on top of the specified Canvas.
              This option is not recommended and is very hard to implement in all supported platforms.
            </li>
            <li>NOMIRRORBITMAP - Prevents the bitmap from being mirrored.
              (The coordinates are sorted before painting?)
            </li>
          </ul>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.LCLType.SRCCOPY"/>
        </seealso>
      </element>
      <element name="BitBlt.Result">
        <short>False on failure.</short>
      </element>
      <element name="BitBlt.DestDC">
        <short>The destination Device Context.</short>
      </element>
      <element name="BitBlt.X">
        <short>The origin in the destination DC.</short>
      </element>
      <element name="BitBlt.Y">
        <short>The origin in the destination DC.</short>
      </element>
      <element name="BitBlt.Width">
        <short>The image size.</short>
      </element>
      <element name="BitBlt.Height">
        <short>The image size.</short>
      </element>
      <element name="BitBlt.SrcDC">
        <short>The source Device Context.</short>
      </element>
      <element name="BitBlt.XSrc">
        <short>The origin in the source DC.</short>
      </element>
      <element name="BitBlt.YSrc">
        <short>The origin in the source DC.</short>
      </element>
      <element name="BitBlt.Rop">
        <short>The raster operation.</short>
      </element>
<!-- function Visibility: default -->
      <element name="CallNextHookEx">
        <short>Invokes the next installed system Hook handler.
        </short>
        <descr>Useless without SetWindowsHookEx().
          [How to install an system Hook?]
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CallNextHookEx.Result">
        <short>Depends on the Hook type.</short>
      </element>
      <element name="CallNextHookEx.hhk">
        <short>Ignored.</short>
      </element>
      <element name="CallNextHookEx.ncode">
        <short>The Hook code (ID).</short>
      </element>
      <element name="CallNextHookEx.WParam">
        <short>Message parameter.</short>
      </element>
      <element name="CallNextHookEx.LParam">
        <short>Message parameter.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CallWindowProc">
        <short>Calls another Window procedure, to handle a message.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CallWindowProc.Result">
        <short/>
      </element>
      <element name="CallWindowProc.lpPrevWndFunc">
        <short/>
      </element>
      <element name="CallWindowProc.Handle">
        <short/>
      </element>
      <element name="CallWindowProc.Msg">
        <short/>
      </element>
      <element name="CallWindowProc.WParam">
        <short/>
      </element>
      <element name="CallWindowProc.LParam">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClientToScreen">
        <short>Converts (relative) Client coordinates into absolute Screen coordinates.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="ScreenToClient"/>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClientToScreen.Result">
        <short>False on failure.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClientToScreen.Handle">
        <short>The window with the client area.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClientToScreen.P">
        <short>The point to convert.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CombineRgn">
        <short>Combines two regions</short>
        <descr>
          <pre>
The following parameters are present in this function:
Dest - The Handle of a region which will receive the result of the operation
Src1 - One of the two regions to combine
Src2 - The other region to combinee
fnCombineMode - The method to use to combine the regions.
As for the parameter fnCombineMode, the following constants from the unit LCLType can be used:
RGN_AND	- The result is the intersection of the two combined regions.
RGN_COPY - The result is a copy of the region Src1
RGN_DIFF - Combines the parts of Src1 that are not part of Src2.
RGN_OR - The result is the union of the two regions.
RGN_XOR - The result is the union of two combined regions except for any overlapping areas.
          </pre>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CombineRgn.Result">
        <short></short>
      </element>
      <element name="CombineRgn.Dest">
        <short>The Handle of the destination region. This region must already exist!
        </short>
      </element>
      <element name="CombineRgn.Src1">
        <short>The handle of a region to combine.</short>
      </element>
      <element name="CombineRgn.Src2">
        <short>The handle of a region to combine.</short>
      </element>
      <element name="CombineRgn.fnCombineMode">
        <short>How the regions are combined.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateBitmap">
        <short>Creates a bitmap object.</short>
        <descr>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateBitmap.Result">
        <short>The bitmap Handle.</short>
      </element>
      <element name="CreateBitmap.Width">
        <short></short>
      </element>
      <element name="CreateBitmap.Height">
        <short></short>
      </element>
      <element name="CreateBitmap.Planes">
        <short>The number of color planes.</short>
      </element>
      <element name="CreateBitmap.BitCount">
        <short>The number of color bits per pixel.</short>
      </element>
      <element name="CreateBitmap.BitmapBits">
        <short>The bitmap pixels. Scanlines must be word-aligned.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateBrushIndirect">
        <short>Creates a brush object (bitmap).</short>
        <descr>A brush is used to fill image areas (background...).
          It has a color and a pattern, e.g. BS_SOLID.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateBrushIndirect.Result">
        <short>The brush Handle.</short>
      </element>
      <element name="CreateBrushIndirect.LogBrush">
        <short>Description of the brush.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateCaret">
        <short>Creates a Caret (text cursor).</short>
        <descr>This description is taken from the WinAPI,
          no guarantee for other platforms.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateCaret.Result">
        <short>False on failure.</short>
      </element>
      <element name="CreateCaret.Handle">
        <short>The window that owns the caret.</short>
      </element>
      <element name="CreateCaret.Bitmap">
        <short>Bitmap Handle, or zero for a solid (black) caret, 1 for a grey caret.</short>
      </element>
      <element name="CreateCaret.width">
        <short>The width of the caret, in logical units.</short>
      </element>
      <element name="CreateCaret.Height">
        <short>The height of the caret, in logical units.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateCompatibleBitmap">
        <short>Creates a bitmap that is compatible with the given DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateCompatibleBitmap.Result">
        <short>The bitmap handle.</short>
      </element>
      <element name="CreateCompatibleBitmap.DC">
        <short>The Device Context for the bitmap.</short>
      </element>
      <element name="CreateCompatibleBitmap.Width">
        <short>The bitmap width in pixels.</short>
      </element>
      <element name="CreateCompatibleBitmap.Height">
        <short>The bitmap height in pixels.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateCompatibleDC">
        <short>Creates an memory Device Context, compatible with the device of the given DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateCompatibleDC.Result">
        <short>The memory DC, zero on failure.</short>
      </element>
      <element name="CreateCompatibleDC.DC">
        <short>The device DC.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateDIBitmap">
        <short>Creates a Device Dependent Bitmap (DDB) from a Device Independent Bitmap (DIB).</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateDIBitmap.Result">
        <short>The bitmap handle, zero on failure.</short>
      </element>
      <element name="CreateDIBitmap.DC">
        <short>The context for the DDB.</short>
      </element>
      <element name="CreateDIBitmap.InfoHeader">
        <short>The bitmap info header.</short>
      </element>
      <element name="CreateDIBitmap.dwUsage">
        <short>[?]</short>
      </element>
      <element name="CreateDIBitmap.InitBits">
        <short>An array containing the bitmap pixels.</short>
      </element>
      <element name="CreateDIBitmap.InitInfo">
        <short>CBM_INIT when InitBits contains valid data, else zero.[?]</short>
      </element>
      <element name="CreateDIBitmap.wUsage">
        <short>[?]</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateDIBSection">
        <short>Creates a bitmap into which the application can write.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateDIBSection.Result">
        <short>The bitmap Handle, zero on failure.</short>
      </element>
      <element name="CreateDIBSection.DC">
        <short>The DC for the bitmap.</short>
      </element>
      <element name="CreateDIBSection.BitmapInfo">
        <short>Contains all information about the bitmap, except the pixels.</short>
      </element>
      <element name="CreateDIBSection.Usage">
        <short>The type of the bitmap colors, e.g. DIB_RGB_COLORS.</short>
      </element>
      <element name="CreateDIBSection.Bits">
        <short>Returns the pointer to the bitmap pixels.</short>
      </element>
      <element name="CreateDIBSection.SectionHandle">
        <short>Zero or the Handle of a file-mapping object, from which the bitmap is initialized
          (needs CreateFileMapping).
        </short>
      </element>
      <element name="CreateDIBSection.Offset">
        <short>The offset to the bitmap bits in the file-mapping object.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateEllipticRgn">
        <short>Creates an elliptical region.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateEllipticRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="CreateEllipticRgn.X1">
        <short></short>
      </element>
      <element name="CreateEllipticRgn.Y1">
        <short></short>
      </element>
      <element name="CreateEllipticRgn.X2">
        <short></short>
      </element>
      <element name="CreateEllipticRgn.Y2">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateFontIndirect">
        <short>Creates an logical font, selectable into any DC.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="CreateFontIndirectEx"/>
        </seealso>
      </element>
      <element name="CreateFontIndirect.Result">
        <short>The font handle, zero on failure.</short>
      </element>
      <element name="CreateFontIndirect.LogFont">
        <short>The font description.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateFontIndirectEx">
        <short>Creates an logical font, selectable into any DC. Allows for an long fontname.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="CreateFontIndirect"/>
        </seealso>
      </element>
      <element name="CreateFontIndirectEx.Result">
        <short>The font handle, zero on failure.</short>
      </element>
      <element name="CreateFontIndirectEx.LogFont">
        <short>The font description.</short>
      </element>
      <element name="CreateFontIndirectEx.LongFontName">
        <short>The font name, can be longer than 32 characters.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateIconIndirect">
        <short>Creates an icon or cursor.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreateIconIndirect.Result">
        <short>The Handle, zero on failure.</short>
      </element>
      <element name="CreateIconIndirect.IconInfo">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePalette">
        <short>Creates a logical palette, selectable into any DC.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreatePalette.Result">
        <short>The palette Handle, zero on failure.</short>
      </element>
      <element name="CreatePalette.LogPalette">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePatternBrush">
        <short>Creates a logical brush, selectable into any DC.</short>
        <descr>
          <p>
            The bitmap pattern is repeated for areas of larger width or height,
            it should allow for smooth transitions.
          </p><p>
            Monochrome bitmaps obtain the text (0) and background (1) color of the DC.
          </p>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreatePatternBrush.Result">
        <short>The brush handle, zero on failure.</short>
      </element>
      <element name="CreatePatternBrush.ABitmap">
        <short>The bitmap to use for the brush.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePenIndirect">
        <short>Creates an logical Pen, selectable into any DC.</short>
        <descr>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CreatePenIndirect.Result">
        <short>The pen Handle, zero on failure.</short>
      </element>
      <element name="CreatePenIndirect.LogPen">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePolygonRgn">
        <short>Creates a polygonial region.</short>
        <descr>The last point is connected to the first point, to close the region.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="CreatePolygonRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="CreatePolygonRgn.Points">
        <short>The array of points.</short>
      </element>
      <element name="CreatePolygonRgn.NumPts">
        <short>The number of points in Points.</short>
      </element>
      <element name="CreatePolygonRgn.FillMode">
        <short>Can be ALTERNATE or WINDING.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRectRgn">
        <short>Creates a rectangular region.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateRectRgn.Result">
        <short>The region handle, zero on failure.</short>
      </element>
      <element name="CreateRectRgn.X1">
        <short/>
      </element>
      <element name="CreateRectRgn.Y1">
        <short/>
      </element>
      <element name="CreateRectRgn.X2">
        <short/>
      </element>
      <element name="CreateRectRgn.Y2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRoundRectRgn">
        <short>Creates a rectangular region with rounded corners.
          All parameters in logical units.
        </short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreateRoundRectRgn.Result">
        <short>The region Handle, zero on failure.</short>
      </element>
      <element name="CreateRoundRectRgn.X1">
        <short></short>
      </element>
      <element name="CreateRoundRectRgn.Y1">
        <short></short>
      </element>
      <element name="CreateRoundRectRgn.X2">
        <short></short>
      </element>
      <element name="CreateRoundRectRgn.Y2">
        <short></short>
      </element>
      <element name="CreateRoundRectRgn.nWidthEllipse">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <element name="CreateRoundRectRgn.nHeightEllipse">
        <short>The extent of the ellipse, used for the rounded corners.</short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DeleteCriticalSection">
        <short>Deletes an unowned crititcal section.</short>
        <descr/>
        <errors>Results are unpredictable when the section is owned,
          i.e. has been entered but not yet left.
        </errors>
        <seealso/>
      </element>
      <element name="DeleteCriticalSection.CritSection">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DeleteDC">
        <short>Deletes an Device Context, created by CreateDC.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="ReleaseDC"/>
        </seealso>
      </element>
      <element name="DeleteDC.Result">
        <short>False on failure.</short>
      </element>
      <element name="DeleteDC.hDC">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DeleteObject">
        <short>Frees an GDI object.</short>
        <descr>The bitmap of a pattern brush is not destroyed with the brush.
        </descr>
        <errors>The function fails when the Handle is selected into an DC.
        </errors>
        <seealso/>
      </element>
      <element name="DeleteObject.Result">
        <short>False on failure.</short>
      </element>
      <element name="DeleteObject.GDIObject">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DestroyCaret">
        <short></short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="DestroyCaret.Result">
        <short></short>
      </element>
      <element name="DestroyCaret.Handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DestroyCursor">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DestroyCursor.Result">
        <short></short>
      </element>
      <element name="DestroyCursor.Handle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DestroyIcon">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DestroyIcon.Result">
        <short></short>
      </element>
      <element name="DestroyIcon.Handle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DPtoLP">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="DPtoLP.Result">
        <short/>
      </element>
      <element name="DPtoLP.DC">
        <short/>
      </element>
      <element name="DPtoLP.Points">
        <short/>
      </element>
      <element name="DPtoLP.Count">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DrawFrameControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DrawFrameControl.Result">
        <short/>
      </element>
      <element name="DrawFrameControl.DC">
        <short/>
      </element>
      <element name="DrawFrameControl.Rect">
        <short/>
      </element>
      <element name="DrawFrameControl.uType">
        <short/>
      </element>
      <element name="DrawFrameControl.uState">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DrawFocusRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DrawFocusRect.Result">
        <short></short>
      </element>
      <element name="DrawFocusRect.DC">
        <short></short>
      </element>
      <element name="DrawFocusRect.Rect">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DrawEdge">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="DrawEdge.Result">
        <short/>
      </element>
      <element name="DrawEdge.DC">
        <short/>
      </element>
      <element name="DrawEdge.Rect">
        <short/>
      </element>
      <element name="DrawEdge.edge">
        <short/>
      </element>
      <element name="DrawEdge.grfFlags">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DrawText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DrawText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawText.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawText.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawText.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawText.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DrawText.Flags">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="EnableScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="EnableScrollBar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EnableScrollBar.Wnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EnableScrollBar.wSBflags">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EnableScrollBar.wArrows">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="EnableWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="EnableWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EnableWindow.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EnableWindow.bEnable">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="EndPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="EndPaint.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EndPaint.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="EndPaint.PS">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="EnterCriticalSection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="EnterCriticalSection.CritSection">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="EnumDisplayMonitors">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="EnumDisplayMonitors.Result">
        <short></short>
      </element>
      <element name="EnumDisplayMonitors.hdc">
        <short></short>
      </element>
      <element name="EnumDisplayMonitors.lprcClip">
        <short></short>
      </element>
      <element name="EnumDisplayMonitors.lpfnEnum">
        <short></short>
      </element>
      <element name="EnumDisplayMonitors.dwData">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="EnumFontFamilies">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="EnumFontFamilies.Result">
        <short></short>
      </element>
      <element name="EnumFontFamilies.DC">
        <short></short>
      </element>
      <element name="EnumFontFamilies.Family">
        <short></short>
      </element>
      <element name="EnumFontFamilies.EnumFontFamProc">
        <short></short>
      </element>
      <element name="EnumFontFamilies.LParam">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="EnumFontFamiliesEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="EnumFontFamiliesEx.Result">
        <short></short>
      </element>
      <element name="EnumFontFamiliesEx.DC">
        <short></short>
      </element>
      <element name="EnumFontFamiliesEx.lpLogFont">
        <short></short>
      </element>
      <element name="EnumFontFamiliesEx.Callback">
        <short></short>
      </element>
      <element name="EnumFontFamiliesEx.Lparam">
        <short></short>
      </element>
      <element name="EnumFontFamiliesEx.Flags">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="Ellipse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Ellipse.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Ellipse.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Ellipse.x1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Ellipse.y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Ellipse.x2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Ellipse.y2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExcludeClipRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExcludeClipRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRect.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRect.Left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRect.Top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRect.Right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRect.Bottom">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtCreatePen">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="ExtCreatePen.Result">
        <short></short>
      </element>
      <element name="ExtCreatePen.dwPenStyle">
        <short></short>
      </element>
      <element name="ExtCreatePen.dwWidth">
        <short></short>
      </element>
      <element name="ExtCreatePen.lplb">
        <short></short>
      </element>
      <element name="ExtCreatePen.dwStyleCount">
        <short></short>
      </element>
      <element name="ExtCreatePen.lpStyle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtTextOut">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtTextOut.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Options">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtTextOut.Dx">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtSelectClipRGN">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtSelectClipRGN.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtSelectClipRGN.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtSelectClipRGN.rgn">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtSelectClipRGN.Mode">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FillRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FillRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRect.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRect.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRect.Brush">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FillRgn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FillRgn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRgn.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRgn.RegionHnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FillRgn.hbr">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FloodFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FloodFill.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.Color">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.FillStyle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FloodFill.Brush">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FrameRect">
        <short>Draws the border of a rectangle with the brush</short>
        <descr>Draws the border of a rectangle with the current brush</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FrameRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FrameRect.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FrameRect.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FrameRect.hBr">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetActiveWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetActiveWindow.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetBitmapBits">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetBitmapBits.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetBitmapBits.Bitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetBitmapBits.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetBitmapBits.Bits">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetBkColor">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetBkColor.Result">
        <short></short>
      </element>
      <element name="GetBkColor.DC">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCapture.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCaretPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCaretPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCaretPos.lpPoint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetClientRect">
        <short>Returns the client rectangle of a control. Left and Top are always 0.</short>
        <descr>
          <p>
            The client rectangle is the size of the inner area of a control,
            where the child controls are visible.
          </p><p>
            A child control with Align=alClient will completely fill the clientrect.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="GetClientRect.Result">
        <short/>
      </element>
      <element name="GetClientRect.handle">
        <short/>
      </element>
      <element name="GetClientRect.Rect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetClipBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetClipBox.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClipBox.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClipBox.lpRect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetClipRGN">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetClipRGN.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClipRGN.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClipRGN.RGN">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCursorPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetCursorPos.Result">
        <short/>
      </element>
      <element name="GetCursorPos.lpPoint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCurrentObject">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetCurrentObject.Result">
        <short></short>
      </element>
      <element name="GetCurrentObject.DC">
        <short></short>
      </element>
      <element name="GetCurrentObject.uObjectType">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCharABCWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCharABCWidths.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCharABCWidths.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCharABCWidths.p2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCharABCWidths.p3">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCharABCWidths.ABCStructs">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDC.hWnd">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDeviceCaps">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetDeviceCaps.Result">
        <short/>
      </element>
      <element name="GetDeviceCaps.DC">
        <short/>
      </element>
      <element name="GetDeviceCaps.Index">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDoubleClickTime">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetDoubleClickTime.Result">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDIBits">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDIBits.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.Bitmap">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.StartScan">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.NumScans">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.Bits">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.BitInfo">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDIBits.Usage">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetFocus.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFontLanguageInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetFontLanguageInfo.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetFontLanguageInfo.DC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetForegroundWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetForegroundWindow.Result">
        <short></short>
      </element>
      <element name="GetIconInfo">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetIconInfo.Result">
        <short></short>
      </element>
      <element name="GetIconInfo.AIcon">
        <short></short>
      </element>
      <element name="GetIconInfo.AIconInfo">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetKeyState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetKeyState.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetKeyState.nVirtKey">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetMapMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetMapMode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetMapMode.DC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetMonitorInfo">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetMonitorInfo.Result">
        <short></short>
      </element>
      <element name="GetMonitorInfo.hMonitor">
        <short></short>
      </element>
      <element name="GetMonitorInfo.lpmi">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetObject.GDIObject">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetObject.BufSize">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetObject.Buf">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetPaletteEntries">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetPaletteEntries.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetPaletteEntries.Palette">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetPaletteEntries.StartIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetPaletteEntries.NumEntries">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetPaletteEntries.PaletteEntries">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetParent.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetParent.Handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetProp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetProp.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetProp.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetProp.Str">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetRgnBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetRgnBox.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetRgnBox.RGN">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetRgnBox.lpRect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetROP2">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetROP2.Result">
        <short></short>
      </element>
      <element name="GetROP2.DC">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetScrollInfo">
        <short>Returns all or selected information about a ScrollBar.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#lcl.LCLType.tagScrollInfo"/>
          <link id="SetScrollInfo"/>
        </seealso>
      </element>
      <element name="GetScrollInfo.Result">
        <short>False on failure.</short>
      </element>
      <element name="GetScrollInfo.Handle">
        <short>The ScrollBar or window handle.</short>
      </element>
      <element name="GetScrollInfo.SBStyle">
        <short>The ScrollBar kind.
        </short>
      </element>
      <element name="GetScrollInfo.ScrollInfo">
        <short>Initialize ScrollInfo.fMask with the flags for the desired values.
        </short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetStockObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetStockObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetStockObject.Value">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetSysColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetSysColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSysColor.nIndex">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetSysColorBrush">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetSysColorBrush.Result">
        <short></short>
      </element>
      <element name="GetSysColorBrush.nIndex">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetSystemPaletteEntries">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetSystemPaletteEntries.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSystemPaletteEntries.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSystemPaletteEntries.StartIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSystemPaletteEntries.NumEntries">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSystemPaletteEntries.PaletteEntries">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetSystemMetrics">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetSystemMetrics.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetSystemMetrics.nIndex">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTextColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTextColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextColor.DC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTextExtentExPoint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTextExtentExPoint.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.MaxWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.MaxCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.PartialWidths">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentExPoint.Size">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTextExtentPoint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTextExtentPoint.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint.Size">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTextExtentPoint32">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTextExtentPoint32.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint32.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint32.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint32.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextExtentPoint32.Size">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTextMetrics">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTextMetrics.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextMetrics.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTextMetrics.TM">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetViewPortExtEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetViewPortExtEx.Result">
        <short></short>
      </element>
      <element name="GetViewPortExtEx.DC">
        <short></short>
      </element>
      <element name="GetViewPortExtEx.Size">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetViewPortOrgEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetViewPortOrgEx.Result">
        <short></short>
      </element>
      <element name="GetViewPortOrgEx.DC">
        <short></short>
      </element>
      <element name="GetViewPortOrgEx.P">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetWindowExtEx">
      <short></short>
      <descr>
      </descr>
      <errors>
      </errors>
      <seealso>
      </seealso>
      </element>

      <!-- function result Visibility: default -->
      <element name="GetWindowExtEx.Result">
      <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="GetWindowExtEx.DC">
      <short></short>
      </element>

      <!-- argument Visibility: default -->
      <element name="GetWindowExtEx.Size">
      <short></short>
      </element>

      <!-- function Visibility: default -->
      <element name="GetWindowLong">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetWindowLong.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowLong.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowLong.int">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetWindowRect">
        <short>After the call, ARect will be the control area in screen coordinates.
        </short>
        <descr>That means, Left and Top will be the screen coordinates of
          the TopLeft pixel of the Handle object and Right and Bottom
          will be the screens coordinate of the BottomRight pixel.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="GetWindowRect.Result">
        <short/>
      </element>
      <element name="GetWindowRect.Handle">
        <short/>
      </element>
      <element name="GetWindowRect.Rect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetWindowSize">
        <short>Returns the Width and Height of the window.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetWindowSize.Result">
        <short/>
      </element>
      <element name="GetWindowSize.Handle">
        <short/>
      </element>
      <element name="GetWindowSize.Width">
        <short/>
      </element>
      <element name="GetWindowSize.Height">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetWindowOrgEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetWindowOrgEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowOrgEx.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowOrgEx.P">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GradientFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GradientFill.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.Vertices">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.NumVertices">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.Meshes">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.NumMeshes">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GradientFill.Mode">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="HideCaret">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="HideCaret.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="HideCaret.hWnd">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IntersectClipRect">
        <short>Shrinks the current clipping region in the device context dc
          to the boundary defined by Left, Top, Right, Bottom.
        </short>
        <descr>The result can be one of the following constants:<br/>
          Error
          NullRegion
          SimpleRegion
          ComplexRegion
          Region_Error
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IntersectClipRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IntersectClipRect.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IntersectClipRect.Left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IntersectClipRect.Top">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IntersectClipRect.Right">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IntersectClipRect.Bottom">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="InvalidateRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="InvalidateRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateRect.aHandle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateRect.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateRect.bErase">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="InvalidateRgn">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="InvalidateRgn.Result">
        <short></short>
      </element>
      <element name="InvalidateRgn.Handle">
        <short></short>
      </element>
      <element name="InvalidateRgn.Rgn">
        <short></short>
      </element>
      <element name="InvalidateRgn.Erase">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IsDBCSLeadByte">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IsDBCSLeadByte.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IsDBCSLeadByte.TestChar">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsIconic">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="IsIconic.Result">
        <short></short>
      </element>
      <element name="IsIconic.handle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IsWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="IsWindow.Result">
        <short></short>
      </element>
      <element name="IsWindow.handle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IsWindowEnabled">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="IsWindowEnabled.Result">
        <short></short>
      </element>
      <element name="IsWindowEnabled.handle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IsWindowVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IsWindowVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="IsWindowVisible.handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsZoomed">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="IsZoomed.Result">
        <short></short>
      </element>
      <element name="IsZoomed.handle">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="InitializeCriticalSection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InitializeCriticalSection.CritSection">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="LeaveCriticalSection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="LeaveCriticalSection.CritSection">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="LineTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="LineTo.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="LineTo.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="LineTo.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="LineTo.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="LPtoDP">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="LPtoDP.Result">
        <short></short>
      </element>
      <element name="LPtoDP.DC">
        <short></short>
      </element>
      <element name="LPtoDP.Points">
        <short></short>
      </element>
      <element name="LPtoDP.Count">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MaskBlt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MaskBlt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.DestDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.XSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.YSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Mask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.XMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.YMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Rop">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MaskBlt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MaskBlt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.DestDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.XSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.YSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.Mask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.XMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MaskBlt.YMask">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MessageBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MessageBox.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageBox.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageBox.lpText">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageBox.lpCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MessageBox.uType">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MonitorFromPoint">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="MonitorFromPoint.Result">
        <short></short>
      </element>
      <element name="MonitorFromPoint.ptScreenCoords">
        <short></short>
      </element>
      <element name="MonitorFromPoint.dwFlags">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MonitorFromRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="MonitorFromRect.Result">
        <short></short>
      </element>
      <element name="MonitorFromRect.lprcScreenCoords">
        <short></short>
      </element>
      <element name="MonitorFromRect.dwFlags">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MonitorFromWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="MonitorFromWindow.Result">
        <short></short>
      </element>
      <element name="MonitorFromWindow.hWnd">
        <short></short>
      </element>
      <element name="MonitorFromWindow.dwFlags">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MoveToEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="MoveToEx.Result">
        <short/>
      </element>
      <element name="MoveToEx.DC">
        <short/>
      </element>
      <element name="MoveToEx.X">
        <short/>
      </element>
      <element name="MoveToEx.Y">
        <short/>
      </element>
      <element name="MoveToEx.OldPoint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="OffsetRgn">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="OffsetRgn.Result">
        <short></short>
      </element>
      <element name="OffsetRgn.RGN">
        <short></short>
      </element>
      <element name="OffsetRgn.nXOffset">
        <short></short>
      </element>
      <element name="OffsetRgn.nYOffset">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="PeekMessage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PeekMessage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PeekMessage.lpMsg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PeekMessage.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PeekMessage.wMsgFilterMin">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PeekMessage.wMsgFilterMax">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PeekMessage.wRemoveMsg">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="Pie">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Pie.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Pie.DC">
        <short/>
      </element>
      <element name="Pie.x1">
        <short></short>
      </element>
      <element name="Pie.y1">
        <short></short>
      </element>
      <element name="Pie.x2">
        <short></short>
      </element>
      <element name="Pie.y2">
        <short></short>
      </element>
      <element name="Pie.sx">
        <short></short>
      </element>
      <element name="Pie.sy">
        <short></short>
      </element>
      <element name="Pie.ex">
        <short></short>
      </element>
      <element name="Pie.ey">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="PolyBezier">
        <short>Draws Bézier curves</short>
        <descr>Use Polybezier to draw cubic Bézier curves. The first curve is drawn from the
  first point to the fourth point with the second and third points being the
  control points. If the Continuous flag is TRUE then each subsequent curve
  requires three more points, using the end-point of the previous Curve as its
  starting point, the first and second points being used as its control points,
  and the third point its end-point. If the continous flag is set to FALSE,
  then each subsequent Curve requires 4 additional points, which are used
  exactly as in the first curve. Any additonal points which do not add up to
  a full bezier(4 for Continuous, 3 otherwise) are ignored. There must be at
  least 4 points for an drawing to occur. If the Filled Flag is set to TRUE
  then the resulting Poly-Bézier will be drawn as a Polygon.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PolyBezier.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PolyBezier.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PolyBezier.Points">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PolyBezier.NumPts">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PolyBezier.Filled">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PolyBezier.Continuous">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="Polygon">
        <short>Draws a Polygon</short>
        <descr>Use Polygon to draw a closed, many-sided shape on the canvas, using the value
  of Pen. After drawing the complete shape, Polygon fills the shape using the
  value of Brush.
  The Points parameter is an array of points that give the vertices of the
  polygon.
  Winding determines how the polygon is filled. When Winding is True, Polygon
  fills the shape using the Winding fill algorithm. When Winding is False,
  Polygon uses the even-odd (alternative) fill algorithm.
  StartIndex gives the index of the first point in the array to use. All points
  before this are ignored.
  NumPts indicates the number of points to use, starting at StartIndex.
  If NumPts is -1 (the default), Polygon uses all points from StartIndex to the
  end of the array.
  The first point is always connected to the last point.
  To draw a polygon on the canvas, without filling it, use the Polyline method,
  specifying the first point a second time at the end.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Polygon.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polygon.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polygon.Points">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polygon.NumPts">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polygon.Winding">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="Polyline">
        <short>Draws a sequence of lines</short>
        <descr>Use Polyline to connect a set of points on the canvas. If you specify only two
  points, Polyline draws a single line.
  The Points parameter is an array of points to be connected.
  StartIndex identifies the first point in the array to use.
  NumPts indicates the number of points to use. If NumPts is -1 (the default),
  PolyLine uses all the points from StartIndex to the end of the array.
  Calling the MoveTo function with the value of the first point, and then
  repeatedly calling LineTo with all subsequent points will draw the same image
  on the canvas. However, unlike LineTo, Polyline does not change the value of
  PenPos.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Polyline.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polyline.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polyline.Points">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Polyline.NumPts">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PostMessage">
        <short>Sends a message directed to a window to the message pool of the application</short>
        <descr><p>This method is a thread-safe solution to send messages to windows. Those messages will be handled in the message loop of the application and therefore can be sent from any thread. They are not immediate, but they will awake the main thread if it is waiting for messages. These messages can be handled by procedures with the keyword message in the class of a form for example. One would then use the handle of this form as the Handle parameter of this routine. Custom messages should always have an identification number (represented by the parameter Msg) larger then the constant LM_USER. The two parameters WParam and LParam will be passed along to the window together with the Msg identification number.</p>
        <p>The difference between SendMessage and PostMessage is the way that they return control to the calling thread. With SendMessage control is not returned until the window that the message was sent to has completed processing the sent message, however with PostMessage control is returned immediately.</p></descr>
        <errors/>
        <seealso>
          <link id="#lcl.LCLIntf.SendMessage">LCLIntf.SendMessage</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="PostMessage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PostMessage.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PostMessage.Msg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PostMessage.WParam">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PostMessage.LParam">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PtInRegion">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PtInRegion.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PtInRegion.RGN">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PtInRegion.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PtInRegion.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RealizePalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RealizePalette.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RealizePalette.DC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="Rectangle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Rectangle.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Rectangle.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Rectangle.X1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Rectangle.Y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Rectangle.X2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Rectangle.Y2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RectVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RectVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RectVisible.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RectVisible.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RedrawWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RedrawWindow.Result">
        <short></short>
      </element>
      <element name="RedrawWindow.Wnd">
        <short></short>
      </element>
      <element name="RedrawWindow.lprcUpdate">
        <short></short>
      </element>
      <element name="RedrawWindow.hrgnUpdate">
        <short></short>
      </element>
      <element name="RedrawWindow.flags">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="ReleaseCapture">
        <short></short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="ReleaseCapture.Result">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="ReleaseDC">
        <short>Releases an Device Context obtained by GetDC.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="DeleteDC"/>
        </seealso>
      </element>
      <element name="ReleaseDC.Result">
        <short>Zero on failure.</short>
      </element>
      <element name="ReleaseDC.hWnd">
        <short>The window associated with the DC.</short>
      </element>
      <element name="ReleaseDC.DC">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RemoveProp">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RemoveProp.Result">
        <short></short>
      </element>
      <element name="RemoveProp.Handle">
        <short></short>
      </element>
      <element name="RemoveProp.Str">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RoundRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RoundRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.X1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.Y1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.X2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.Y2">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.RX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RoundRect.RY">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RestoreDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RestoreDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RestoreDC.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RestoreDC.SavedDC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SaveDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SaveDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SaveDC.DC">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ScreenToClient">
        <short>Converts absolute Screen coordinates into Client relative coordinates.
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="ClientToScreen"/>
        </seealso>
      </element>
      <element name="ScreenToClient.Result">
        <short>False on failure.</short>
      </element>
      <element name="ScreenToClient.Handle">
        <short>The window with the client area.</short>
      </element>
      <element name="ScreenToClient.P">
        <short>The point to convert.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="ScrollWindowEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ScrollWindowEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.dx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.dy">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.prcScroll">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.prcClip">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.hrgnUpdate">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.prcUpdate">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ScrollWindowEx.flags">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SendMessage">
<short>Sends a message directed to a window to the message pool of the application</short>
        <descr><p>This method is a thread-safe solution to send messages to windows. Those messages will be handled in the message loop of the application and therefore can be sent from any thread. They are not immediate, but they will awake the main thread if it is waiting for messages. These messages can be handled by procedures with the keyword message in the class of a form for example. One would then use the handle of this form as the HandleWnd parameter of this routine. Custom messages should always have an identification number (represented by the parameter Msg) larger then the constant LM_USER. The two parameters WParam and LParam will be passed along to the window together with the Msg identification number.</p>
        <p>The difference between SendMessage and PostMessage is the way that they return control to the calling thread. With SendMessage control is not returned until the window that the message was sent to has completed processing the sent message, however with PostMessage control is returned immediately.</p></descr>        <errors/>
        <seealso>
          <link id="#lcl.LCLIntf.PostMessage">LCLIntf.PostMessage</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="SendMessage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SendMessage.HandleWnd">
        <short>The handle of the window to receive the message.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="SendMessage.Msg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SendMessage.WParam">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SendMessage.LParam">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetActiveWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetActiveWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetActiveWindow.Handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetBkColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetBkColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetBkColor.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetBkColor.Color">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetBkMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetBkMode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetBkMode.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetBkMode.bkMode">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetCapture.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCapture.AHandle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCaretPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetCaretPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretPos.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretPos.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCaretPosEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetCaretPosEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretPosEx.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretPosEx.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretPosEx.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetCursor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCursor.hCursor">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCursorPos">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetCursorPos.Result">
        <short></short>
      </element>
      <element name="SetCursorPos.X">
        <short></short>
      </element>
      <element name="SetCursorPos.Y">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetMapMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SetMapMode.Result">
        <short/>
      </element>
      <element name="SetMapMode.DC">
        <short/>
      </element>
      <element name="SetMapMode.fnMapMode">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetMenu">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetMenu.Result">
        <short></short>
      </element>
      <element name="SetMenu.AWindowHandle">
        <short></short>
      </element>
      <element name="SetMenu.AMenuHandle">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetParent">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetParent.Result">
        <short></short>
      </element>
      <element name="SetParent.hWndChild">
        <short></short>
      </element>
      <element name="SetParent.hWndParent">
        <short></short>
      </element>

      <!-- function Visibility: default -->
      <element name="SetProp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetProp.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetProp.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetProp.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetProp.Data">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetROP2">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetROP2.Result">
        <short></short>
      </element>
      <element name="SetROP2.DC">
        <short></short>
      </element>
      <element name="SetROP2.Mode">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SelectClipRGN">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SelectClipRGN.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectClipRGN.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectClipRGN.RGN">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SelectObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SelectObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectObject.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectObject.GDIObj">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SelectPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SelectPalette.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectPalette.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectPalette.Palette">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SelectPalette.ForceBackground">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetFocus.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetFocus.hWnd">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetForegroundWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetForegroundWindow.Result">
        <short></short>
      </element>
      <element name="SetForegroundWindow.hWnd">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetScrollInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetScrollInfo.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetScrollInfo.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetScrollInfo.SBStyle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetScrollInfo.ScrollInfo">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetScrollInfo.Redraw">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetStretchBltMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetStretchBltMode.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetStretchBltMode.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetStretchBltMode.StretchMode">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetSysColors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetSysColors.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetSysColors.cElements">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetSysColors.lpaElements">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetSysColors.lpaRgbValues">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetTextCharacterExtra">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetTextCharacterExtra.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetTextCharacterExtra._hdc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetTextCharacterExtra.nCharExtra">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetTextColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetTextColor.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetTextColor.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetTextColor.Color">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetViewPortExtEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetViewPortExtEx.Result">
        <short></short>
      </element>
      <element name="SetViewPortExtEx.DC">
        <short></short>
      </element>
      <element name="SetViewPortExtEx.XExtent">
        <short></short>
      </element>
      <element name="SetViewPortExtEx.YExtent">
        <short></short>
      </element>
      <element name="SetViewPortExtEx.OldSize">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetViewPortOrgEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetViewPortOrgEx.Result">
        <short></short>
      </element>
      <element name="SetViewPortOrgEx.DC">
        <short></short>
      </element>
      <element name="SetViewPortOrgEx.NewX">
        <short></short>
      </element>
      <element name="SetViewPortOrgEx.NewY">
        <short></short>
      </element>
      <element name="SetViewPortOrgEx.OldPoint">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetWindowExtEx">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetWindowExtEx.Result">
        <short></short>
      </element>
      <element name="SetWindowExtEx.DC">
        <short></short>
      </element>
      <element name="SetWindowExtEx.XExtent">
        <short></short>
      </element>
      <element name="SetWindowExtEx.YExtent">
        <short></short>
      </element>
      <element name="SetWindowExtEx.OldSize">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetWindowLong">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetWindowLong.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowLong.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowLong.Idx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowLong.NewLong">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetWindowOrgEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetWindowOrgEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowOrgEx.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowOrgEx.NewX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowOrgEx.NewY">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowOrgEx.OldPoint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetWindowPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetWindowPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.hWndInsertAfter">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.cx">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.cy">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetWindowPos.uFlags">
        <short/>
      </element>
      <!-- function SetWindowRgn Visibility: default -->
      <element name="SetWindowRgn">
        <short>Defines the visible region of a window or control</short>
        <descr>This function sets the visible region of a window or control. It's parameters are:
hWnd - The handle of the window or control
hRgn - The handle to the region which contains the visible section of the window or control
bRedraw - True if the control or window should be repainted following the call of this function, false otherwise
See also the wiki documentation: http://wiki.lazarus.freepascal.org/LCL_Tips#Creating_a_non-rectangular_window_or_control</descr>
        <seealso>
          <link id="#lcl.Controls.TWinControl.SetShape">TWinControl.SetShape</link>
          <link id="#lcl.LCLIntf.CreateRectRgn">LCLIntf.CreateRectRgn</link>
        </seealso>
      </element>
      <element name="SetWindowRgn.Result">
        <short></short>
      </element>
      <element name="SetWindowRgn.hWnd">
        <short></short>
      </element>
      <element name="SetWindowRgn.hRgn">
        <short></short>
      </element>
      <element name="SetWindowRgn.bRedraw">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="ShowCaret">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ShowCaret.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowCaret.hWnd">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ShowScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ShowScrollBar.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowScrollBar.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowScrollBar.wBar">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowScrollBar.bShow">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ShowWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowWindow.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ShowWindow.nCmdShow">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="StretchBlt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="StretchBlt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.DestDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.XSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.YSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.SrcWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.SrcHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchBlt.Rop">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="StretchDIBits">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="StretchDIBits.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.DestX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.DestY">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.DestWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.DestHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.SrcX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.SrcY">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.SrcWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.SrcHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.Bits">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.BitsInfo">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.Usage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchDIBits.Rop">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SystemParametersInfo">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SystemParametersInfo.Result">
        <short></short>
      </element>
      <element name="SystemParametersInfo.uiAction">
        <short></short>
      </element>
      <element name="SystemParametersInfo.uiParam">
        <short></short>
      </element>
      <element name="SystemParametersInfo.pvParam">
        <short></short>
      </element>
      <element name="SystemParametersInfo.fWinIni">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="TextOut">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TextOut.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TextOut.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TextOut.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TextOut.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TextOut.Str">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TextOut.Count">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="UpdateWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="UpdateWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="UpdateWindow.Handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="WindowFromPoint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="WindowFromPoint.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="WindowFromPoint.Point">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="AdjustWindowRectEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="AdjustWindowRectEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="AdjustWindowRectEx.Rect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="AdjustWindowRectEx.Style1">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="AdjustWindowRectEx.MenuExist">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="AdjustWindowRectEx.Style2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CharLowerBuff">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CharLowerBuff.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CharLowerBuff.pStr">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CharLowerBuff.Len">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CopyRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CopyRect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CopyRect.DestRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CopyRect.SrcRect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateEllipticRgnIndirect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateEllipticRgnIndirect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateEllipticRgnIndirect.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateFont.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Escapement">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Orientation">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Weight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Italic">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Underline">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.StrikeOut">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.CharSet">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.OutputPrecision">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.ClipPrecision">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.Quality">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.PitchAndFamily">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateFont.FaceName">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreatePen.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreatePen.Style">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreatePen.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreatePen.Color">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRectRgnIndirect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="CreateRectRgnIndirect.Result">
        <short/>
      </element>
      <element name="CreateRectRgnIndirect.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateSolidBrush">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreateSolidBrush.Result">
        <short></short>
      </element>
      <element name="CreateSolidBrush.Color">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="EqualRect">
        <short>Returns True when the rectangles are identical.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="EqualRect.Result">
        <short/>
      </element>
      <element name="EqualRect.lprc1">
        <short/>
      </element>
      <element name="EqualRect.lprc2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetScrollPos">
        <short>Returns the scollbar position.</short>
        <descr>If the scrollbar is not visible, then the return value is 0.</descr>
        <errors/>
        <seealso/>
      </element>
      <element name="GetScrollPos.Result">
        <short>The position, zero if the scrollbar is not visible.</short>
      </element>
      <element name="GetScrollPos.Handle">
        <short/>
      </element>
      <element name="GetScrollPos.nBar">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetScrollRange">
        <short>Returns the minimum and maximum Position values of a ScrollBar.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetScrollRange.Result">
        <short/>
      </element>
      <element name="GetScrollRange.Handle">
        <short/>
      </element>
      <element name="GetScrollRange.nBar">
        <short/>
      </element>
      <element name="GetScrollRange.lpMinPos">
        <short/>
      </element>
      <element name="GetScrollRange.lpMaxPos">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetRValue">
        <short>Extracts the red color value from a COLORREF.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetRValue.Result">
        <short/>
      </element>
      <element name="GetRValue.RGB">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetGValue">
        <short>Extracts the green color value from a COLORREF.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetGValue.Result">
        <short/>
      </element>
      <element name="GetGValue.RGB">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetBValue">
        <short>Extracts the blue color value from a COLORREF.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetBValue.Result">
        <short/>
      </element>
      <element name="GetBValue.RGB">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="GetRGBValues">
        <short>Extracts the red, green and blue color values from a COLORREF.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetRGBValues.RGB">
        <short></short>
      </element>
      <element name="GetRGBValues.R">
        <short></short>
      </element>
      <element name="GetRGBValues.G">
        <short></short>
      </element>
      <element name="GetRGBValues.B">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="GetRGBIntValues">
        <short>Extracts the red, green and blue color values from a COLORREF.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetRGBIntValues.RGB">
        <short></short>
      </element>
      <element name="GetRGBIntValues.R">
        <short></short>
      </element>
      <element name="GetRGBIntValues.G">
        <short></short>
      </element>
      <element name="GetRGBIntValues.B">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IndexToOverlayMask">
        <short>Converts an imagelist index into an overlay index.
        </short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="IndexToOverlayMask.Result">
        <short>Ready for combination with another imagelist index.
        </short>
      </element>
      <element name="IndexToOverlayMask.iOverlay">
        <short>The imagelist index of the overlay.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="InflateRect">
        <short>Inflates the rectangle in all directions.
        </short>
        <descr>
          <p>
            The deltas are applied to every side,
            i.e. the width and height increase by the double amount.
          </p><p>
            Positive values inflate, negative values deflate.
          </p><p>
            The rectangle is clipped so that width and height never can become negative.
          </p><p>
            This method can be used to add or subtract a border around the rectangle.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="InflateRect.Result">
        <short>Always True.</short>
      </element>
      <element name="InflateRect.ARect">
        <short>This rectangle is modified.</short>
      </element>
      <element name="InflateRect.dx">
        <short>The horizontal increase, negative to decrease.</short>
      </element>
      <element name="InflateRect.dy">
        <short>The vertical increase, negative to decrease.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="IntersectRect">
        <short>Intersects SrcRect1 and SrcRect2 into DestRect.</short>
        <descr>
          <p>
            Intersecting means that DestRect will be the overlapping area of SrcRect1 and SrcRect2.
          </p><p>
            If SrcRect1 and SrcRect2 do not overlap the Result is false, else true.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="IntersectRect.Result">
        <short>False when the rectangles don't overlap.</short>
      </element>
      <element name="IntersectRect.DestRect">
        <short>Receives the intersection.</short>
      </element>
      <element name="IntersectRect.SrcRect1">
        <short/>
      </element>
      <element name="IntersectRect.SrcRect2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsCharAlphaNumeric">
        <short>Checks for ASCII letter or digit characters.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="IsCharAlphaNumeric.Result">
        <short>True when the character is a letter or digit.</short>
      </element>
      <element name="IsCharAlphaNumeric.c">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="IsRectEmpty">
        <short>Returns True if the rectangle is empty.</short>
        <descr>
          IsEmptyRect returns true if the area of the rectangle is empty,
           i.e. has a zero or negative width or height.
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="IsRectEmpty.Result">
        <short>True if the rectangle is empty.</short>
      </element>
      <element name="IsRectEmpty.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="KillTimer">
        <short>Removes an timer.</short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
          <link id="SetTimer"/>
        </seealso>
      </element>
      <element name="KillTimer.Result">
        <short>Zero on failure!</short>
      </element>
      <element name="KillTimer.Wnd">
        <short>The window handle associated with the timer, can be zero.</short>
      </element>
      <element name="KillTimer.uIDEvent">
        <short>The timer ID.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeLong">
        <short>Copies two words into a double word.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="MakeLong.Result">
        <short>The combined doubleword.</short>
      </element>
      <element name="MakeLong.A">
        <short>The low word.</short>
      </element>
      <element name="MakeLong.B">
        <short>The high word.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeROP4">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="MakeROP4.Result">
        <short></short>
      </element>
      <element name="MakeROP4.fore">
        <short></short>
      </element>
      <element name="MakeROP4.back">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeWord">
        <short>Copies two bytes into a word.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MakeWord.Result">
        <short></short>
      </element>
      <element name="MakeWord.A">
        <short>The low byte.</short>
      </element>
      <element name="MakeWord.B">
        <short>The high byte.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeWParam">
        <short>Copies two words into a double word, usable as a message wParam.</short>
        <descr>The result has the size of an pointer.
          Excess bits are sign extended[?].
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="MakeWParam.Result">
        <short></short>
      </element>
      <element name="MakeWParam.l">
        <short>The low word.</short>
      </element>
      <element name="MakeWParam.h">
        <short>The high word.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeLParam" link="MakeWParam">
        <short>Copies two words into a double word, usable as a message lParam.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="MakeLParam.Result">
        <short></short>
      </element>
      <element name="MakeLParam.l">
        <short>The low word.</short>
      </element>
      <element name="MakeLParam.h">
        <short>The high word.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="MakeLResult" link="MakeWParam">
        <short>Copies two words into a double word, usable as a message Result.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="MakeLResult.Result">
        <short></short>
      </element>
      <element name="MakeLResult.l">
        <short>The low word.</short>
      </element>
      <element name="MakeLResult.h">
        <short>The high word.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="OffSetRect">
        <short>Move Left/Right by dx, Top/Bottom by dy.
          Return Top and Left are &gt;= 0.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="OffSetRect.Result">
        <short>False if resulting Top or Left are negative.</short>
      </element>
      <element name="OffSetRect.Rect">
        <short/>
      </element>
      <element name="OffSetRect.dx">
        <short/>
      </element>
      <element name="OffSetRect.dy">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PtInRect">
        <short>Checks whether a Point is within a Rect.</short>
        <descr>
          <p>
            Top and Left side are part of the rectangle,
            but Bottom and Right side are outside.
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="PtInRect.Result">
        <short>True when Point is within Rect.</short>
      </element>
      <element name="PtInRect.Rect">
        <short/>
      </element>
      <element name="PtInRect.Point">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PointToSmallPoint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PointToSmallPoint.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PointToSmallPoint.P">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RGB">
        <short>Combines Red, Green and Blue values into an Color value.
        </short>
        <descr>
          <p>
            The bytes are shifted into place, for a standard COLORREF.
            Their physical order depends on the endianness of the machine.
          </p><p>
            Depending on the application and hardware,
            the color components may not be in the desired order.
            [see also?]
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="RGB.Result">
        <short>The combined doubleword.</short>
      </element>
      <element name="RGB.R">
        <short>The low byte.</short>
      </element>
      <element name="RGB.G">
        <short>The mid byte (*16).</short>
      </element>
      <element name="RGB.B">
        <short>The high byte (*256).</short>
      </element>
      <!-- function Visibility: default -->
      <element name="ScrollWindow">
        <short>Scrolls the content of a window, by a number of pixels.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="ScrollWindow.Result">
        <short/>
      </element>
      <element name="ScrollWindow.hWnd">
        <short/>
      </element>
      <element name="ScrollWindow.XAmount">
        <short>Horizontal distance (positive to scroll down)</short>
      </element>
      <element name="ScrollWindow.YAmount">
        <short>Vertical distance (positive to scroll right)</short>
      </element>
      <element name="ScrollWindow.Rect">
        <short>The part of the window, that is to be scrolled.
        </short>
      </element>
      <element name="ScrollWindow.ClipRect">
        <short>Pixels falling outside this rectangle are lost.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetRect">
        <short>Copies coordinates into a rectangle.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SetRect.Result">
        <short>Always True.</short>
      </element>
      <element name="SetRect.ARect">
        <short/>
      </element>
      <element name="SetRect.xLeft">
        <short/>
      </element>
      <element name="SetRect.yTop">
        <short/>
      </element>
      <element name="SetRect.xRight">
        <short/>
      </element>
      <element name="SetRect.yBottom">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetRectEmpty">
        <short>Clears the rectangle to all zero coordinates.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SetRectEmpty.Result">
        <short>Always True.</short>
      </element>
      <element name="SetRectEmpty.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetScrollPos">
        <short>Changes the Position of an ScrollBar slider.
        </short>
        <descr>
          The SetScrollPos function sets the position of the scroll box (thumb)
          in the specified scroll bar and, if requested, redraws the scroll bar
          to reflect the new position of the scroll box.
        </descr>
        <seealso>
          <link id="SetScrollInfo"/>
        </seealso>
      </element>
      <element name="SetScrollPos.Result">
        <short>The previous Position, zero if invisible.</short>
      </element>
      <element name="SetScrollPos.Handle">
        <short>The ScrollBar or Window Handle.</short>
      </element>
      <element name="SetScrollPos.nBar">
        <short>
          <link id="#lcl.LCLType.SB_CTL">SB_CTL</link>
          means a ScrollBar control.</short>
      </element>
      <element name="SetScrollPos.nPos">
        <short>The new Position.</short>
      </element>
      <element name="SetScrollPos.bRedraw">
        <short>True forces a repaint.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SetScrollRange">
        <short>Sets the minimum and maximum position values of an ScrollBar.
        </short>
        <descr/>
        <seealso>
          <link id="SetScrollInfo"/>
        </seealso>
      </element>
      <element name="SetScrollRange.Result">
        <short>Always True.</short>
      </element>
      <element name="SetScrollRange.Handle">
        <short/>
      </element>
      <element name="SetScrollRange.nBar">
        <short/>
      </element>
      <element name="SetScrollRange.nMinPos">
        <short/>
      </element>
      <element name="SetScrollRange.nMaxPos">
        <short/>
      </element>
      <element name="SetScrollRange.bRedraw">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetTimer">
        <short>Creates or resets an timer for the given time interval.</short>
        <descr>
          <p>
            Every timer has a unique ID, which is reported in the timer message
            and can be used to reset or kill the timer.
          </p><p>
            When the time has elapsed, the callback procedure is invoked.
            If no procedure is given, a WM_TIMER message is sent to the window.
            If also no window is given, the function fails.
          </p><p>
            When the timer already exists, it is reset to the new interval.
          </p>
        </descr>
        <seealso>
          <link id="KillTimer"/>
          <link id="#lcl.LCLType.TTimerProc"/>
        </seealso>
      </element>
      <element name="SetTimer.Result">
        <short>The timer ID, or zero on failure.</short>
      </element>
      <element name="SetTimer.Wnd">
        <short>The window associated with the timer.</short>
      </element>
      <element name="SetTimer.nIDEvent">
        <short>The ID of the timer, ignored when Wnd is zero.</short>
      </element>
      <element name="SetTimer.uElapse">
        <short>The time interval to wait.</short>
      </element>
      <element name="SetTimer.lpTimerFunc">
        <short>The callback procedure, can be Nil.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="SmallPointToPoint">
        <short>Converts an TSmallPoint into an TPoint.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SmallPointToPoint.Result">
        <short/>
      </element>
      <element name="SmallPointToPoint.P">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SubtractRect">
        <short>Computes the bounding box of the geometric difference of two rectangles.</short>
        <descr>
          <p>
            When the rectangles do not overlap completely in either x or y direction,
            the result is the first rectangle (lprcSrc1).
          </p><p>
            Otherwise the overlapping area is excluded from the first rectangle.
          </p><p>
            The bounding box is the <b>rectangle</b> that covers the entire resulting area.
          </p>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SubtractRect.Result">
        <short>False when the resulting rectangle is empty.</short>
      </element>
      <element name="SubtractRect.lprcDst">
        <short></short>
      </element>
      <element name="SubtractRect.lprcSrc1">
        <short></short>
      </element>
      <element name="SubtractRect.lprcSrc2">
        <short>The rectangle to subtract.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="UnionRect">
        <short>Computes the bounding box of the union of two rectangles.
        </short>
        <descr>
          <p>
            The bounding box is the <b>rectangle</b> that covers the entire resulting area.
            Here the result covers both rectangles.
          </p><p>
            The rectangles can be disjoint.
          </p><p>
            Rectangles with a zero or negative width or height
            are treated as empty rectangles (ignored).
          </p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <element name="UnionRect.Result">
        <short>False when the resulting rectangle is empty, i.e. when both source rectangles are empty.</short>
      </element>
      <element name="UnionRect.DestRect">
        <short/>
      </element>
      <element name="UnionRect.SrcRect1">
        <short/>
      </element>
      <element name="UnionRect.SrcRect2">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="AddEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="AddEventHandler.Result">
        <short></short>
      </element>
      <element name="AddEventHandler.AHandle">
        <short></short>
      </element>
      <element name="AddEventHandler.AFlags">
        <short></short>
      </element>
      <element name="AddEventHandler.AEventHandler">
        <short></short>
      </element>
      <element name="AddEventHandler.AData">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="AddProcessEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="AddProcessEventHandler.Result">
        <short></short>
      </element>
      <element name="AddProcessEventHandler.AHandle">
        <short></short>
      </element>
      <element name="AddProcessEventHandler.AEventHandler">
        <short></short>
      </element>
      <element name="AddProcessEventHandler.AData">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="AddPipeEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="AddPipeEventHandler.Result">
        <short></short>
      </element>
      <element name="AddPipeEventHandler.AHandle">
        <short></short>
      </element>
      <element name="AddPipeEventHandler.AEventHandler">
        <short></short>
      </element>
      <element name="AddPipeEventHandler.AData">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="AllocateHWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="AllocateHWnd.Result">
        <short></short>
      </element>
      <element name="AllocateHWnd.Method">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="AskUser">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="AskUser.Result">
        <short></short>
      </element>
      <element name="AskUser.DialogCaption">
        <short></short>
      </element>
      <element name="AskUser.DialogMessage">
        <short></short>
      </element>
      <element name="AskUser.DialogType">
        <short></short>
      </element>
      <element name="AskUser.Buttons">
        <short></short>
      </element>
      <element name="AskUser.HelpCtx">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CallDefaultWndHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CallDefaultWndHandler.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CallDefaultWndHandler.Message">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClipboardFormatToMimeType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipboardFormatToMimeType.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardFormatToMimeType.FormatID">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClipboardGetData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipboardGetData.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetData.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetData.FormatID">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetData.Stream">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClipboardGetFormats">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipboardGetFormats.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetFormats.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetFormats.Count">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetFormats.List">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClipboardGetOwnerShip">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipboardGetOwnerShip.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetOwnerShip.ClipboardType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetOwnerShip.OnRequestProc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetOwnerShip.FormatCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardGetOwnerShip.Formats">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ClipboardRegisterFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipboardRegisterFormat.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipboardRegisterFormat.AMimeType">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateEmptyRegion">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateEmptyRegion.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreatePixmapIndirect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreatePixmapIndirect.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreatePixmapIndirect.Data">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreatePixmapIndirect.TransColor">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRegionCopy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateRegionCopy.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateRegionCopy.SrcRGN">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRubberBand">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreateRubberBand.Result">
        <short></short>
      </element>
      <element name="CreateRubberBand.ARect">
        <short></short>
      </element>
      <element name="CreateRubberBand.ABrush">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateStandardCursor">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="CreateStandardCursor.Result">
        <short></short>
      </element>
      <element name="CreateStandardCursor.ACursor">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="DCClipRegionValid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DCClipRegionValid.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DCClipRegionValid.DC">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DeallocateHWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DeallocateHWnd.Wnd">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DestroyRubberBand">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DestroyRubberBand.ARubberBand">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DrawDefaultDockImage">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DrawDefaultDockImage.AOldRect">
        <short></short>
      </element>
      <element name="DrawDefaultDockImage.ANewRect">
        <short></short>
      </element>
      <element name="DrawDefaultDockImage.AOperation">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DrawGrid">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="DrawGrid.DC">
        <short></short>
      </element>
      <element name="DrawGrid.R">
        <short></short>
      </element>
      <element name="DrawGrid.DX">
        <short></short>
      </element>
      <element name="DrawGrid.DY">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtUTF8Out">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="ExtUTF8Out.Result">
        <short/>
      </element>
      <element name="ExtUTF8Out.DC">
        <short/>
      </element>
      <element name="ExtUTF8Out.X">
        <short/>
      </element>
      <element name="ExtUTF8Out.Y">
        <short/>
      </element>
      <element name="ExtUTF8Out.Options">
        <short/>
      </element>
      <element name="ExtUTF8Out.Rect">
        <short/>
      </element>
      <element name="ExtUTF8Out.Str">
        <short/>
      </element>
      <element name="ExtUTF8Out.Count">
        <short/>
      </element>
      <element name="ExtUTF8Out.Dx">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FontCanUTF8">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="FontCanUTF8.Result">
        <short/>
      </element>
      <element name="FontCanUTF8.Font">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FontIsMonoSpace">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="FontIsMonoSpace.Result">
        <short></short>
      </element>
      <element name="FontIsMonoSpace.Font">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="Frame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Frame.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="Frame3d">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="Frame3d.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame3d.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame3d.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame3d.FrameWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="Frame3d.Style">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetAcceleratorString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetAcceleratorString.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetAcceleratorString.AVKey">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetAcceleratorString.AShiftState">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCaretRespondToFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCaretRespondToFocus.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCaretRespondToFocus.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCaretRespondToFocus.ShowHideOnFocus">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetClientBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetClientBounds.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClientBounds.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetClientBounds.ARect">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetCmdLineParamDescForInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCmdLineParamDescForInterface.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetControlConstraints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetControlConstraints.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetControlConstraints.Constraints">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDCOriginRelativeToWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDCOriginRelativeToWindow.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDCOriginRelativeToWindow.PaintDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDCOriginRelativeToWindow.WindowHandle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDCOriginRelativeToWindow.OriginDiff">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDesignerDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDesignerDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDesignerDC.WindowHandle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDeviceSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetDeviceSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDeviceSize.DC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetDeviceSize.p">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetLCLOwnerObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetLCLOwnerObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetLCLOwnerObject.Handle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetScrollBarSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetScrollBarSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetScrollBarSize.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetScrollBarSize.SBStyle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetScrollbarVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetScrollbarVisible.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetScrollbarVisible.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetScrollbarVisible.SBStyle">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetWindowRelativePosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetWindowRelativePosition.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowRelativePosition.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowRelativePosition.Left">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetWindowRelativePosition.Top">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IntfSendsUTF8KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IntfSendsUTF8KeyPress.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="InvalidateFrame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="InvalidateFrame.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateFrame.aHandle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateFrame.ARect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateFrame.bErase">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="InvalidateFrame.BorderWidth">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsDesignerDC">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="IsDesignerDC.Result">
        <short></short>
      </element>
      <element name="IsDesignerDC.WindowHandle">
        <short></short>
      </element>
      <element name="IsDesignerDC.DC">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="MoveWindowOrgEx">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="MoveWindowOrgEx.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrgEx.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrgEx.dX">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrgEx.dY">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUser.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.EscapeResult">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUserAtXY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RadialArc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="RadialArc.Result">
        <short/>
      </element>
      <element name="RadialArc.DC">
        <short/>
      </element>
      <element name="RadialArc.left">
        <short></short>
      </element>
      <element name="RadialArc.top">
        <short></short>
      </element>
      <element name="RadialArc.right">
        <short></short>
      </element>
      <element name="RadialArc.bottom">
        <short></short>
      </element>
      <element name="RadialArc.sx">
        <short/>
      </element>
      <element name="RadialArc.sy">
        <short/>
      </element>
      <element name="RadialArc.ex">
        <short/>
      </element>
      <element name="RadialArc.ey">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RadialChord">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="RadialChord.Result">
        <short/>
      </element>
      <element name="RadialChord.DC">
        <short/>
      </element>
      <element name="RadialChord.x1">
        <short></short>
      </element>
      <element name="RadialChord.y1">
        <short></short>
      </element>
      <element name="RadialChord.x2">
        <short></short>
      </element>
      <element name="RadialChord.y2">
        <short></short>
      </element>
      <element name="RadialChord.sx">
        <short/>
      </element>
      <element name="RadialChord.sy">
        <short/>
      </element>
      <element name="RadialChord.ex">
        <short/>
      </element>
      <element name="RadialChord.ey">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="RadialPie">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="RadialPie.Result">
        <short/>
      </element>
      <element name="RadialPie.DC">
        <short/>
      </element>
      <element name="RadialPie.x1">
        <short></short>
      </element>
      <element name="RadialPie.y1">
        <short></short>
      </element>
      <element name="RadialPie.x2">
        <short></short>
      </element>
      <element name="RadialPie.y2">
        <short></short>
      </element>
      <element name="RadialPie.Angle1">
        <short></short>
      </element>
      <element name="RadialPie.Angle2">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_CreateBitmaps">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_CreateBitmaps.Result">
        <short></short>
      </element>
      <element name="RawImage_CreateBitmaps.ARawImage">
        <short></short>
      </element>
      <element name="RawImage_CreateBitmaps.ABitmap">
        <short></short>
      </element>
      <element name="RawImage_CreateBitmaps.AMask">
        <short></short>
      </element>
      <element name="RawImage_CreateBitmaps.ASkipMask">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_DescriptionFromBitmap">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_DescriptionFromBitmap.Result">
        <short></short>
      </element>
      <element name="RawImage_DescriptionFromBitmap.ABitmap">
        <short></short>
      </element>
      <element name="RawImage_DescriptionFromBitmap.ADesc">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_DescriptionFromDevice">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_DescriptionFromDevice.Result">
        <short></short>
      </element>
      <element name="RawImage_DescriptionFromDevice.ADC">
        <short></short>
      </element>
      <element name="RawImage_DescriptionFromDevice.ADesc">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_FromBitmap">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_FromBitmap.Result">
        <short></short>
      </element>
      <element name="RawImage_FromBitmap.ARawImage">
        <short></short>
      </element>
      <element name="RawImage_FromBitmap.ABitmap">
        <short></short>
      </element>
      <element name="RawImage_FromBitmap.AMask">
        <short></short>
      </element>
      <element name="RawImage_FromBitmap.ARect">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_FromDevice">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_FromDevice.Result">
        <short></short>
      </element>
      <element name="RawImage_FromDevice.ARawImage">
        <short></short>
      </element>
      <element name="RawImage_FromDevice.ADC">
        <short></short>
      </element>
      <element name="RawImage_FromDevice.ARect">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RawImage_QueryDescription">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RawImage_QueryDescription.Result">
        <short></short>
      </element>
      <element name="RawImage_QueryDescription.AFlags">
        <short></short>
      </element>
      <element name="RawImage_QueryDescription.ADesc">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RegroupMenuItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RegroupMenuItem.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RegroupMenuItem.hndMenu">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RegroupMenuItem.GroupIndex">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ReleaseDesignerDC">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ReleaseDesignerDC.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ReleaseDesignerDC.hWnd">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ReleaseDesignerDC.DC">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RemoveEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RemoveEventHandler.AHandler">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RemoveProcessEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RemoveProcessEventHandler.AHandler">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RemovePipeEventHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="RemovePipeEventHandler.AHandler">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="RequestInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="RequestInput.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RequestInput.InputCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RequestInput.InputPrompt">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RequestInput.MaskInput">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RequestInput.Value">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="SendCachedLCLMessages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="DrawSplitter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetCaretRespondToFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetCaretRespondToFocus.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretRespondToFocus.handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaretRespondToFocus.ShowHideOnFocus">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SetComboMinDropDownSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SetComboMinDropDownSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetComboMinDropDownSize.Handle">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetComboMinDropDownSize.MinItemsWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetComboMinDropDownSize.MinItemsHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetComboMinDropDownSize.MinItemCount">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="SetEventHandlerFlags">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetEventHandlerFlags.AHandler">
        <short></short>
      </element>
      <element name="SetEventHandlerFlags.NewFlags">
        <short></short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="SetRubberBandRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="SetRubberBandRect.ARubberBand">
        <short></short>
      </element>
      <element name="SetRubberBandRect.ARect">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="StretchMaskBlt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="StretchMaskBlt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.DestDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.Y">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.Width">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.Height">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.SrcDC">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.XSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.YSrc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.SrcWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.SrcHeight">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.Mask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.XMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.YMask">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="StretchMaskBlt.Rop">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="TextUTF8Out">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TextUTF8Out.Result">
        <short></short>
      </element>
      <element name="TextUTF8Out.DC">
        <short></short>
      </element>
      <element name="TextUTF8Out.X">
        <short></short>
      </element>
      <element name="TextUTF8Out.Y">
        <short></short>
      </element>
      <element name="TextUTF8Out.Str">
        <short></short>
      </element>
      <element name="TextUTF8Out.Count">
        <short></short>
      </element>

      <!-- function Visibility: default -->
      <element name="ExcludeClipRgn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExcludeClipRgn.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRgn.dc">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExcludeClipRgn.rgn">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUser.DialogType">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUser.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUser.DialogType">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.Y">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="NotifyUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUser.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.EscapeResult">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUser.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.EscapeResult">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUser">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUser.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUser.EscapeResult">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUserAtXY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUserAtXY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.ButtonCount">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PromptUserAtXY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PromptUserAtXY.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogCaption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogMessage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DialogType">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Buttons">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.DefaultIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.EscapeResult">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PromptUserAtXY.Y">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="PredefinedClipboardFormat">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="PredefinedClipboardFormat.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="PredefinedClipboardFormat.AFormat">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="MsgKeyDataToShiftState">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="MsgKeyDataToShiftState.Result">
        <short></short>
      </element>
      <element name="MsgKeyDataToShiftState.KeyData">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTickCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTickCount.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTickCount64">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="GetTickCount64.Result">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="FindDefaultBrowser">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="FindDefaultBrowser.Result">
        <short></short>
      </element>
      <element name="FindDefaultBrowser.ABrowser">
        <short></short>
      </element>
      <element name="FindDefaultBrowser.AParams">
        <short></short>
      </element>

      <element name="OpenURL">
        <short>Open a given URL with the default browser</short>
        <descr>The function uses FindDefaultBrowser to find the default browser. If it can be found it starts it and returns true. The AURL is passed as parameter. AURL must be an URL like http://www.lazarus.freepascal.org or file:///tmp/test.txt or file://C:\test.txt.</descr>
      </element>
      <element name="OpenURL.Result">
        <short></short>
      </element>
      <element name="OpenURL.AURL">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="OpenDocument">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="OpenDocument.Result">
        <short></short>
      </element>
      <element name="OpenDocument.APath">
        <short></short>
      </element>

      <!-- function Visibility: default -->
      <element name="CharLower">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CharLower.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CharLower.c">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CharUpper">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CharUpper.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CharUpper.c">
        <short/>
      </element>
    </module>
    <!-- LCLIntf -->
  </package>
</fpdoc-descriptions>
