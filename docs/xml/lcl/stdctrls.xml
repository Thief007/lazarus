<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
  ====================================================================
    StdCtrls
  ====================================================================
-->
    <module name="StdCtrls">
      <short/>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ExtendedStrings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TEditCharCase">
        <short>Determines the case of text displayed in the edit box or combobox.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecNormal">
        <short>Normal mode - Character case according to what the user types.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecUppercase">
        <short>Converts every character that the user types into upper case characters.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecLowerCase">
        <short>Converts every character that the user types into lower case characters.</short>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TEchoMode">
        <short>TEchoMode: Determines how strings in the edit box are displayed.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emNormal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emPassword"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssVertical"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssBoth"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoVertical"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoBoth"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollCode">
        <short>The scroll action type.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scLineUp">
        <short>Scroll one line up.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scLineDown">
        <short>Scroll one line down.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPageUp">
        <short>Scroll one page up.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPageDown">
        <short>Scroll one page down.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPosition">
        <short>Scroll to the specified position.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scTrack">
        <short>Scroll tracking to the specified position.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scTop">
        <short>Scroll to the top.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scBottom">
        <short>Scroll to the bottom.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scEndScroll">
        <short>Scroll ends.</short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TScrollEvent">
        <short>The scroll event.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.ScrollCode">
        <short>Determines the scroll action.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.ScrollPos">
        <short>Contains the current scroll position.</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomScrollBar">
        <short>Custom Scroll Bar</short>
        <descr>Custom Scroll Bar:  the base type from which Control Bars are derived</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FRTLFactor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FSmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FLargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.DoScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.DoScroll.Message"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomScrollBar.NotRightToLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBar.NotRightToLeft.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetKind">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetKind.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMax.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMin.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPosition.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPageSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPageSize.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNHScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNHScroll.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNVScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNVScroll.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNCtlColorScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNCtlColorScrollBar.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.WMEraseBkgnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.WMEraseBkgnd.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CreateParams.Params"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Scroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Scroll.ScrollCode"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Scroll.ScrollPos"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomScrollBar.Create">
        <short>
          <i>TCustomScrollBar</i>
        </short>
        <descr>
          <i>TCustomScrollBar</i>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.SetParams">
        <short>Defines the Max and Min values, the size of the page and the position of the scroller</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.APosition"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.AMin"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.AMax"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.APageSize"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Kind">
        <short>Whether Horizontal or Vertical</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.LargeChange">
        <short>The size of the step to be taken by the scroller for a large change</short>
        <descr>A large change is produced by the user clicking on the blank area above or below the scroller; it is rather analogous to the Page Down or Page Up functions of the Keyboard and is typically set up to move the scroller and the contents of the page or canvas by a whole paragraph or half a page or a full page.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Max">
        <short>The maximum value (for bottom of the scroll bar or the right-most extent)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Min">
        <short>the minimum value, for the top of the scroll bar or its left-most extent</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.PageSize">
        <short>the size of the page on which this scrollbar is found</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Position">
        <short>The position of the scrollbar on the current page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.SmallChange">
        <short>The size of the step to be taken by the scroller for a small change</short>
        <descr>A small change is produced by the user clicking on one of the triangular tags at either end of the scrollbar. It is rather analogous to the effect of using the up or down arrows on the keyboard, and is typically set to produce a movement of a few pixels or a single line of text</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.TabStop">
        <short>Whether the scrollbar can be reached by use of the Tab key - default is True</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.OnChange">
        <short>Event handler for any change in position of the scroller or other mouse movement or keyboard event associated with the scrollbar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.OnScroll">
        <short>Handler for a scrolling event</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollBar">
        <short>Control for scrolling a page thumb in specified range.</short>
        <descr>Scroll Bar is a control that allows user to scroll its page thumb in specified range. Can be horizontal or vertical.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Kind">
        <short>Determines whether Scroll Bar is vertical or horizontal.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.LargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.SmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnChange">
        <short>The OnChange event is called when the Position is changed.</short>
        <descr/>
        <seealso><link id="TScrollBar.OnScroll"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnScroll">
        <short>The OnScroll event is called when user scrolls the page thumb.</short>
        <descr/>
        <seealso><link id="TScrollBar.OnChange"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGroupBox">
        <short>Custom Group Box</short>
        <descr>Custom Group Box: the base type from which Group Box and related components are derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomGroupBox.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGroupBox.GetControlClassDefaultSize.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGroupBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGroupBox.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TGroupBox">
        <short>Group Box</short>
        <descr>Group Box. Allows a number of objects to be grouped physically and conceptually
on the form; they can be moved around together and have certain properties in
common.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption">
        <short>Defines the behavior of the <i>AutoComplete</i> feature in a combobox control.</short>
        <descr><i>TComboBoxAutoCompleteTextOption</i> defines the behavior of the <i>AutoComplete</i> feature.
<ul>            <li>cbactEnabled: Enable Auto-Completion feature.</li>
            <li>cbactEndOfLineComplete: Perform Auto-Complete only when cursor is at the end of the string.</li>
            <li>cbactRetainPrefixCase: Retains the case of characters user has typed. (This option has no effect if cbactEndOfLineComplete is False)</li>
            <li>cbactSearchCaseSensitive: Search completion string with case sensitivity.</li>
            <li>cbactSearchAscending: Search completion string in accending order. (False will search in descending order)</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactEnabled"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactEndOfLineComplete"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactRetainPrefixCase"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchCaseSensitive"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchAscending"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TComboBoxAutoCompleteText">
        <short>Set of <i>TComboBoxAutoCompleteTextOption</i></short>
        <descr/>
        <seealso><link id="TComboBoxAutoCompleteTextOption"/></seealso>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TComboBoxStyle">
        <short>ComboBox Style</short>
        <descr>ComboBox Style: may be Simple, a single-line Drop-Down or a Drop-Down list, or some version drawn by the Owner</descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csDropDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csSimple"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csDropDownList"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csOwnerDrawFixed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csOwnerDrawVariable"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TOwnerDrawState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDrawItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.State"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMeasureItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Height"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomComboBox">
        <short>Custom Combo Box</short>
        <descr>Custom Combination Box: the base class from which Combo Box is derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FCharCase">
        <short>FCharCase: TEditCharCase</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoCompleteText">
        <short>FAutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Private variable of property AutoCompleteText.

Options for behavior of the Auto-Complete feature.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoSelect">
        <short>FAutoSelect: Boolean</short>
        <descr>Private variable for property AutoSelect.

When True, the edit control will select all its text when:
<ul>            <li>It recieves focus</li>
            <li>The Enter key is pressed.</li>
            <li>A new item is selected.</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoSelected">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceed normally without selecting the text.

False is set when the edit or combobox control loses focus.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FDropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FDroppedDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FMaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnMeasureItem">
        <short/>
        <descr>
          <short>Combo Box</short>
        </descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FReturnArrowState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomComboBox.GetAutoComplete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetAutoComplete.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomComboBox.GetDroppedDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetDroppedDown.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomComboBox.GetItemWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemWidth.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetAutoComplete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetAutoComplete.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetItemWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemWidth.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItems.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.LMDrawListItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMDrawListItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.LMMeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMMeasureItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.LMSelChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMSelChange.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.CNCommand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.CNCommand.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetReadOnly.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.UpdateSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetArrowKeysTraverseList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetArrowKeysTraverseList.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.WMChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.WMChar.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetCharCase">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetCharCase.eccCharCase"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DoEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DrawItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.State"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetControlClassDefaultSize.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.LMChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMChanged.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Select">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.CloseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.AdjustDropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelLength.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelStart.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelText.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemIndex.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetMaxLength.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.IsReadOnlyStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.IsReadOnlyStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetDropDownCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetDropDownCount.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetDroppedDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetDroppedDown.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemHeight.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemIndex.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetMaxLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelStart.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelText.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSorted.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetStyle.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.RealSetText.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyUp.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyPress.Key"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MouseUp.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MouseUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MouseUp.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MouseUp.Y"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.SelectItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.SelectItem.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SelectItem.AnItem"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.DropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomComboBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomComboBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.AddItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddItem.Item"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddItem.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.AddHistoryItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.Item"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.MaxHistoryCount"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.SetAsText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.CaseSensitive"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.ClearSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
<ul>            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.DroppedDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.MeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MeasureItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MeasureItem.TheHeight"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.SelectAll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoComplete">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoCompleteText">
        <short>property AutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Options for behavior of the Auto-Complete feature.
</descr>
        <seealso><link id="TComboBoxAutoCompleteTextOption"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr>When True, the edit control will select all its text when:
<ul>            <li>It receives focus</li>
            <li>The Enter key is pressed.</li>
            <li>A new item is selected.</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr>True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceed normally without selecting the text.

False is set when the edit or combobox control loses focus.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.ArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomComboBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TComboBox">
        <short>Combo Box</short>
        <descr>Combo box. A simple combination of text box for free text entry, and a drop-down list allowing one of several options to be chosen.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoComplete">
        <short>property AutoComplete: Boolean</short>
        <descr>True: Turns on auto-complete feature.
False: Turns off auto-complete feature.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoCompleteText">
        <short>property AutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Options for behavior of the Auto-Complete feature.
</descr>
        <seealso><link id="TComboBoxAutoCompleteTextOption"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoSelect">
        <short>property AutoSelected: Boolean</short>
        <descr>When True, the edit control will select all its text when:
<ul>            <li>It receives focus</li>
            <li>The Enter key is pressed.</li>
            <li>A new item is selected.</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
<ul>            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.DropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListBoxStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbStandard"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbOwnerDrawFixed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbOwnerDrawVariable"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TSelectionChangeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectionChangeEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSelectionChangeEvent.User"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomListBox">
        <short>Custom List Box</short>
        <descr>Custom List Box: the base type from which List Box is derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FCacheValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FClickTriggeredBySelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FIntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FLockSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FMultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FSorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FTopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.GetTopIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetTopIndex.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetColumns.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.SetTopIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetTopIndex.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.UpdateSelectionMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.UpdateSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.LMDrawListItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.LMDrawListItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.LMMeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.LMMeasureItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.LMSelChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.LMSelChange.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.WMLButtonUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.WMLButtonUp.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.SendItemSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SendItemSelected.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SendItemSelected.IsSelected"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.AssignItemDataToCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignItemDataToCache.AIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignItemDataToCache.AData"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.AssignCacheToItemData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignCacheToItemData.AIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignCacheToItemData.AData"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.FinalizeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetControlClassDefaultSize.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.CheckIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.CheckIndex.AIndex"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetItemHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetItemIndex.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetSelCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetSelCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetSelected.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetSelected.Index"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetCachedDataSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetCachedDataSize.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetCachedData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetCachedData.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetCachedData.AIndex"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetExtendedSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetExtendedSelect.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItemIndex.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItems.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItemHeight.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetMultiSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetMultiSelect.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSelected.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSelected.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSorted.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetStyle.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.DrawItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.State"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.DoSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DoSelectionChange.User"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SendItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.OnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomListBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomListBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.GetIndexAtY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetIndexAtY.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetIndexAtY.Y"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.GetSelectedText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetSelectedText.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Pos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Existing"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemRect.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemRect.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemVisible.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemVisible.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemFullyVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemFullyVisible.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemFullyVisible.Index"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.MakeCurrentVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.MeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.MeasureItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.MeasureItem.TheHeight"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.LockSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.UnlockSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Count">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.IntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.SelCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Selected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Selected.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListBox">
        <short>List Box</short>
        <descr>List Box: a simple drop-down list from which a choice is made</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.IntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomEdit">
        <short>Custom Edit</short>
        <descr>Custom Edit: the base type from which Edit Box is derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FAutoSelect">
        <short>FAutoSelect: Boolean</short>
        <descr>Private variable for property AutoSelect.<br/>
		When True, the edit control will select all its text when:
<ul>            <li>It receives focus</li>
            <li>The Enter key is pressed.</li>
            <li>A new item is selected.</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FAutoSelected">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect opertation so that subsequent mouse-clicks and keystrokes
proceds normally without selecting the text.

False is set when the edit or combobox control loses focus.</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FCharCase">
        <short>FCharCase: TEditCharCase</short>
        <descr>Private variable for property CharCase.

Indicates how text is displayed in a text editing control.
<ul>            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul></descr>
        <seealso>
          <link id="TEditCharCase"/>
          <link id="TEditCharCase.ecNormal"/>
          <link id="TEditCharCase.ecUppercase"/>
          <link id="TEditCharCase.ecLowerCase"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FEchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FMaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FPasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomEdit.GetModified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetModified.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetCharCase">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetCharCase.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetMaxLength.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetModified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetModified.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetPasswordChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetPasswordChar.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetReadOnly.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CalculatePreferredSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CalculatePreferredSize.PreferredWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CalculatePreferredSize.PreferredHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CalculatePreferredSize.WithThemeSpace"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.TextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.DoEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelLength.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelStart.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelText.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetEchoMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetEchoMode.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelStart.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelText.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.RealSetText.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.ChildClassAllowed.ChildClass"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetControlClassDefaultSize.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.KeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.KeyUp.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.WMChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.WMChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.MouseUp.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.MouseUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.MouseUp.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.MouseUp.Y"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr>When True, the edit control will select all its text when it
receives focus or when the Enter key is pressed.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr>True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceed normally without selecting the text.

False is set when the edit or combobox control loses focus.
</descr>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomEdit.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.SelectAll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.ClearSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.CopyToClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.CutToClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.PasteFromClipboard">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
<ul>            <li>Normal case letters</li>
            <li>Upper case letters</li>
            <li>Lower case letters</li>
          </ul></descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.EchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.MaxLength">
        <short>Max Length</short>
        <descr>Max Length: maximum length allowed for text string</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.Modified">
        <short>Modified</short>
        <descr>Modified: has the text been modified since creation?</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.PasswordChar">
        <short>Password Character</short>
        <descr>Password Character: the character which appears in the Edit box replacing and masking the actual character typed. Typically used in password input, to prevent the typed characters from being seen by passers-by or casual observers (or even malicious observers!)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelLength">
        <short>Sel Length</short>
        <descr>Sel Length: the length (in characters) of the text that has been selected for editing</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelStart">
        <short>Sel Start</short>
        <descr>Sel Start: the index of the character from which selection (for editing) begins</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelText">
        <short>Sel Text</short>
        <descr>Sel Text: the text of the actual string that has been selected for editing</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.Text">
        <short>Text</short>
        <descr>Text: the character string contained in the Edit Box</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMemoScrollbar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TMemoScrollbar.GetHorzScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMemoScrollbar.GetHorzScrollBar.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMemoScrollbar.GetVertScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMemoScrollbar.GetVertScrollBar.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Increment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Page">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Smooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Range">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Size">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomMemo">
        <short>Custom Memo</short>
        <descr>Custom Memo: the base type from which Memo is derived</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FHorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FLines">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FVertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FWantReturns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FWantTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FWordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMemo.SetHorzScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetHorzScrollBar.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMemo.SetVertScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetVertScrollBar.AValue"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomMemo.StoreScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.StoreScrollBars.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.CreateHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMemo.RealGetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.RealGetText.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.RealSetText.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomMemo.GetCachedText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.GetCachedText.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.GetCachedText.CachedText"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetAlignment.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetLines">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetLines.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetSelText.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetWantReturns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetWantReturns.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetWantTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetWantTabs.NewWantTabs"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetWordWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetWordWrap.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetScrollBars.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMemo.WordWrapIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.WordWrapIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.ControlKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.ControlKeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.ControlKeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.CNChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.CNChar.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomMemo.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.GetControlClassDefaultSize.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomMemo.Create">
        <short>Create</short>
        <descr>Create the Custom memo widget</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomMemo.Destroy">
        <short>Destroy</short>
        <descr>Destroy the CustomMemo widget when you have finished with it</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomMemo.Append">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.Append.Value"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.Lines">
        <short>Lines</short>
        <descr>Lines: an array of strings (representing single lines of characters) which contains the textual material held or being entered in the Memo.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.HorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.VertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.WantReturns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.WantTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word nears the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TEdit">
        <short>Edit Box</short>
        <descr>Edit Box: for entry or display of a single line of text.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TEdit.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Action">
        <short>Action</short>
        <descr>Action: the task to be performed when the component is activated by a mouse movement or key press. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.CharCase">
        <short>Char Case</short>
        <descr>Character Case: the default character case (Upper or Lower case) to be used in the Edit Box. Can, of course, be over-ridden by use of the [shift] key.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.EchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Enabled">
        <short>Enabled</short>
        <descr>Enabled: flag to determine whether or not the control is able to be used</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnChange">
        <short>On Change - Action</short>
        <descr>On Change - Action to be taken when any of the properties of the control change (especially the textual content).</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnChangeBounds">
        <short>On Change Bounds - Action</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnEnter">
        <short>On Entry - Action</short>
        <descr>On Entry - Action to be taken when the mouse cursor or text cursor enters the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnExit">
        <short>On Exit - Action</short>
        <descr>On Exit - Action to be taken when the mouse or text cursor leaves this control or when focus is relinquished. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyDown">
        <short>On Key Down - Action</short>
        <descr>On Key Down - Action to be taken if a key is down while focus is in this control. Subtly different from On Key Pressed - for example the key might already have been down when focus entered this control, whereas On Key Pressed requires the key to become pressed while focus is in the control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyPress">
        <short>On Key Press - Action</short>
        <descr>On Key Press - Action to be taken if a key becomes pressed while focus is in this control. Subtly different from On Key Down, which simply responds to a key being down, whether or not it was already down when focus was given to this control. On Key Press requires that a key becomes pressed while focus in in this control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyUp">
        <short>On Key Up - Action</short>
        <descr>On Key Up - Action to be taken if a key is up (ie not pressed) while focus is in this control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseMove">
        <short>On Mouse Move - Action</short>
        <descr>On Mouse Move - Action to be taken if the mouse cursor moves while focus is in this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up (not pressed) while focus is in this control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.PasswordChar">
        <short>Password Character</short>
        <descr>Password Character - defines which character should appear in the edit box when a password is being typed. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.PopupMenu">
        <short>Popup Menu</short>
        <descr>Popup Menu - a menu that appears when the right mouse button is clicked over this control</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ReadOnly">
        <short>Read Only</short>
        <descr>Read Only - a flag that signifies that users can view the contents of this control but are not allowed to modify it.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ShowHint">
        <short>Show Hint</short>
        <descr>Show Hint - allows a small box containing helpful text to be displayed while the mouse cursor 'hovers' over the control</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Text">
        <short>Text</short>
        <descr>Text - the actual character string that represents the contents of the control. May be edited if ReadOnly property is not set</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMemo">
        <short>Memo Box</short>
        <descr>Memo box: for entry or display of multiple lines of text.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Lines">
        <short>Lines</short>
        <descr>Lines: an array of strings (representing single lines of characters) which contains the textual material held or being entered in the Memo.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.MaxLength">
        <short>Max Length</short>
        <descr>Max Length: the maximum permitted length for the textual material in the memo</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.WantReturns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.WantTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word comes near the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TStaticBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsSingle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsSunken"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomStaticText">
        <short>Custom Static Text</short>
        <descr>Custom Static Text: the base type from which Static Text is derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FAlignment">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FFocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FStaticBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStaticText.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetAlignment.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStaticText.SetStaticBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetStaticBorderStyle.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStaticText.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.WMActivate.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.GetLabelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.GetLabelText.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.RealSetText.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetFocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetFocusControl.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetShowAccelChar.Val"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.DialogChar.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.GetControlClassDefaultSize.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomStaticText.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Create.AOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomStaticText.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStaticText.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStaticText.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomStaticText.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStaticText">
        <short>Static Text</short>
        <descr>Static Text: a box to display a Constant Text String</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Static Text box to a border of a parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a static text box a defined distance from certain borders of the parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Caption">
        <short>Caption</short>
        <descr>Caption: the text that actually appears with the Static Text Box</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnDblClick">
        <short>On Double-click - Action</short>
        <descr>On Double-click - Action to be taken when the mouse button is double-clicked while the cursor is over the control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken when the mouse button is down while the cursor is over this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseEnter">
        <short>On Mouse Entry - Action</short>
        <descr>On Mouse Entry - Action to be taken when the mouse cursor enters the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseLeave">
        <short>On Mouse Leaving - Action</short>
        <descr>On Mouse Leaving - Action to be taken when the mouse cursor leaves the boundaries of this control. User-defined Procedure.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseMove">
        <short>On Mouse Movement - Action</short>
        <descr>On Mouse Movement - Action to be taken if the mouse cursor moves within the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up while the cursor is over this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TButtonControl">
        <short>Button Control</short>
        <descr>Button Control:  Base Type for the Button (including Radio Button) and Check Box types ;</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FClicksDisabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FUseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TButtonControl.IsCheckedStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.IsCheckedStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TButtonControl.UseOnChangeIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.UseOnChangeIsStored.Result"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TButtonControl.fLastCheckedOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TButtonControl.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.GetChecked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonControl.SetChecked.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.DoOnChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TButtonControl.ColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.ColorIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.ClicksDisabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TButtonControl.Create">
        <short>
          <i>TButtonControl</i>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonControl.Create.TheOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TButtonActionLink">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TButtonActionLink.FClientButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonActionLink.AssignClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonActionLink.AssignClient.AClient"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TButtonActionLink.IsCheckedLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonActionLink.IsCheckedLinked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonActionLink.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonActionLink.SetChecked.Value"><short/></element>
      <!-- "class of" type Visibility: default -->
      <element name="TButtonActionLinkClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomButton">
        <short>
          <i>TCustomButton</i>
        </short>
        <descr>
          <i>TCustomButton</i>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomButton.FCancel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomButton.FDefault">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomButton.FActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomButton.FModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomButton.FShortCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.SetCancel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.SetCancel.NewCancel"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.SetDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.SetDefault.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.SetModalResult">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.SetModalResult.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.CMUIActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.CMUIActivate.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.WMDefaultClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.WMDefaultClicked.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomButton.WMKillFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.WMKillFocus.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.ControlKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ControlKeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ControlKeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.ControlKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ControlKeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ControlKeyUp.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.SetParent.AParent"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomButton.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomButton.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.DialogChar.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomButton.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomButton.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ChildClassAllowed.ChildClass"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomButton.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomButton.GetControlClassDefaultSize.Result"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomButton.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomButton.UseRightToLeftAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomButton.UseRightToLeftAlignment.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.WSSetDefault">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.WSSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.WSSetText.AText"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomButton.Create">
        <short>Creates a new instance of the TCustomButton class</short>
        <descr>If you drop a component on the form editor you don´t need to add code to explicitly create it. The component is automatically created together with the the form, and destroyed when the form is destroyed.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.Create.TheOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomButton.ExecuteDefaultAction">
        <short>Performs the action associated with the button if it is the Default button</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomButton.ExecuteCancelAction">
        <short>Performs the action associated with the button if it is a Cancel button or if 'Escape' was pressed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomButton.ActiveDefaultControlChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.ActiveDefaultControlChanged.NewControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomButton.UpdateRolesForForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.Active">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.Default">
        <short>Is this the Default button? (default setting is False)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.ModalResult">
        <short>Is a Modal Result awaited? (default is false)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.Cancel">
        <short>Is this the Cancel button? (default setting is False)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.Color">
        <short>What Colour is the button? (default is the same as all other button faces)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomButton.TabStop">
        <short>Is the Button included in the TabStop list? (default setting is True)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TButton">
        <short>The most basic button component</short>
        <descr>Button: Base type for all Buttons. A push button control. The user pushes a button (eg selects it with the mouse cursor and clicks the mouse) to start an action.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TButton.Click">
        <short>Click, calling this method will invoke the OnClick event of the button</short>
        <descr>If you want to programmatically Click on a button you can call its Click method. This will have the same effect as a user clicking on the button.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Action">
        <short>The action executed when the user clicks the button.</short>
        <descr>If you assign an action from an ActionList to a TButton.Action the corresponding execute-method is assigned to the OnClick event of the button. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Align">
        <short/>
        <descr><br/></descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Anchors">
        <short>Anchors are used to keep a button on a defined distance to certain borders of the parent control.</short>
        <descr>Anchors can be used to keep control at a certain distance from a side of its parent control, when the parent control is resized.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.AutoSize">
        <short>Autosize in </short>
        <descr>If this property is set to true, the control will automatically adapt its size to be able to accomodate its content. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.BorderSpacing">
        <short>The fixed spacing around the border of the Button</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Cancel">
        <short>Setting this property will make the OnClick event executed when the user hits ESC.</short>
        <descr>Setting this property to true, will have the effect that when the user hits ESC this button is Clicked. Usually the Button which reacts to ESC sets the ModalResult of the form to mrCancel.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Caption">
        <short>Sets the text displayed on the button.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Constraints">
        <short>Constraints can be used to give a control certain minimum and or maximum dimensions.</short>
        <descr>Sets the minimum and maximum sizes for a control. If a control is resized the new dimensions are allways within the ranges given here. You should take care when setting these options that they do not conflict with the Anchors and Align settings.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Default">
        <short>Setting this property will make the OnClick event executed when the user hits ENTER</short>
        <descr>Defines if a button is the default on a form. That is, pressing enter will execute its onClick wether the control has focus or not!</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Enabled">
        <short>Determines if the button reacts to a click.</short>
        <descr>Setting this property determines if the control can be used. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Font">
        <short>Font is used to set the font of the caption of the Button.</short>
        <descr>Font is used to set the font of the caption of the Button.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.ModalResult">
        <short>If the button gets clicked, the ModalResult of the form will be set to this value.</short>
        <descr>Setting ModalResult of a button makes closing a form easy.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnClick">
        <short>The OnClick event is triggered when a user clicks on the button</short>
        <descr>The OnClick event is triggered when a user clicks on the button. It can also be invoked by calling the Click method.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnEnter">
        <short>The OnEnter event is triggered when the button gets focus.</short>
        <descr>The OnEnter event is triggered when the button gets focus.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnExit">
        <short>The OnExit event is triggered when the button loses focus.</short>
        <descr>The OnExit event is triggered when the button loses focus.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.TabOrder">
        <short>TabOrder - an integer value to show where the button lies in the Tab Order for this Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.TabStop">
        <short>Boolean to determine whether the Button is associated with a Tab Stop in the Tab Order for the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Visible">
        <short>Determines whether the Button is visible.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCheckBoxState">
        <short>Check Box State</short>
        <descr>Check Box State: a set of constants defining the possible states of a Check Box - </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbUnchecked">
        <short/>
        <descr>The check box has no check mark, indicating that the user has not selected the option.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbChecked">
        <short/>
        <descr>The check box has a check mark in it, indicating that the user has selected the option.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbGrayed">
        <short/>
        <descr>The check box has a check mark in it, but it is grayed.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomCheckBox">
        <short>TCustomCheckBox is the ancestor of all check-box components.</short>
        <descr>Custom Check Box: The base (abstract) class from which the TCheckBox is derived.  Check boxes present the user with options that can be selected (checked) or deselected (unchecked).</descr>
        <errors/>
        <seealso><link id="TCheckBox"/></seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FAllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FShortCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckBox.SetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.SetState.Value"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckBox.GetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.GetState.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckBox.DoChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.DoChange.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.RetrieveState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.RetrieveState.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.Toggle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.DialogChar.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.GetChecked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.SetChecked.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.RealSetText.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.ApplyChanges">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.GetControlClassDefaultSize.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.WSSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.WSSetText.AText"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomCheckBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.AllowGrayed">
        <short>Determines whether the check box can be in a "grayed" state.</short>
        <descr>If AllowGrayed is set to True, the check box has three possible states: checked, unchecked and grayed. If AllowGrayed is set to False, the check box has only two possible states: checked and unchecked.</descr>
        <seealso/>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.State">
        <short>Indicates whether the check box is selected, deselected or grayed.</short>
        <descr>See TCheckBoxState for possible values of State.</descr>
        <seealso/>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.TabStop">
        <short>Determines if the user can tab to a control.</short>
        <descr>Use the TabStop to allow or disallow access to the control using the Tab key.

If the TabStop is True, the control is in the tab order. If TabStop is False, the control is not in the tab order and the user can't press the Tab key to move to the control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCheckBox">
        <short>Check Box</short>
        <descr>Check Box: a small box which can contain a check mark to indicate that it has been selected by a mouse click. May be associated with a Caption that describes its function.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Action">
        <short>Action</short>
        <descr>Action: the task to be performed when the component is activated by a mouse movement or key press. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.AllowGrayed">
        <short>Allow Grayed</short>
        <descr>Allow Grayed: a flag to show whether the box is allowed to be Greyed out, </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Caption">
        <short>Caption</short>
        <descr>Caption: a brief description appearing near the check box, usually stating the function of the box or what action will be taken if it becomes checked.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Checked">
        <short>Checked</short>
        <descr>Checked - shows whether or not the box has been checked (ie selected)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Enabled">
        <short>Enabled</short>
        <descr>Enabled: flag to determine whether or not the control is able to be used</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Hint">
        <short>Hint</short>
        <descr>Hint: a short piece of pop-up text that appears if the mouse-cursor hovers over the check box; </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnChange">
        <short>On Change</short>
        <descr>On Change - Action to be taken when any of the properties of the control change.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnChangeBounds">
        <short>On Change Bounds</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnEnter">
        <short>On Entry - Action</short>
        <descr>On Entry - Action to be taken when the mouse cursor or text cursor enters the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnExit">
        <short/>
        <descr>On Exit - Action to be taken when the mouse or text cursor leaves this control or when focus is relinquished. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseMove">
        <short>On Mouse Move - Action</short>
        <descr>On Mouse Move - Action to be taken if the mouse cursor moves while focus is in this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up (not pressed) while focus is in this control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include selection of a different font size etc. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.PopupMenu">
        <short>Popup Menu</short>
        <descr>Popup Menu - a menu that appears when the right mouse button is clicked over this control</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ShowHint">
        <short>Show Hint</short>
        <descr>Show Hint: a flag to show whether or not the hint is to be shown when the mouse cursor hovers over the box.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TToggleBox">
        <short>Toggle Box</short>
        <descr>Toggle Box: a labelled box capable of being checked (when it becomes recessed) or unchecked (when it is raised).</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TToggleBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToggleBox.Create.TheOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.AllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TRadioButton">
        <short>Radio Button</short>
        <descr>Radio Button: a button which works in conjunction with other Radio Buttons in a mutually exclusive manner - if one button of a group is selected, none of the others in that group can be selected.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- function Visibility: protected -->
      <element name="TRadioButton.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TRadioButton.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TRadioButton.DialogChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TRadioButton.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRadioButton.RealSetText.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TRadioButton.ApplyChanges">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TRadioButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRadioButton.Create.TheOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.AllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLabel">
        <short>Custom Label</short>
        <descr>Custom label: the base type from which Label is derived.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FFocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FOptimalFill">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FWordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetOptimalFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetOptimalFill.AValue"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.CanTab.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.DoMeasureTextPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.DoMeasureTextPosition.TextTop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.DoMeasureTextPosition.TextLeft"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.HasMultiLine">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.HasMultiLine.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.CalcSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcSize.AWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcSize.AHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.DialogChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.TextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.Resize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.FontChanged.Sender"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetControlClassDefaultSize.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.WMActivate.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Notification.Operation"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetShowAccelChar.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetAlignment.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetLabelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetLabelText.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetTransparent.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetAlignment.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetColor.NewColor"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetFocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetFocusControl.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetLayout.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetShowAccelChar.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetTransparent.NewTransparent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetWordWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetWordWrap.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.Transparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.WordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.OptimalFill">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLabel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Create.TheOwner"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomLabel.CalcFittingFontHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.TheText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.MaxWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.MaxHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.FontHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.NeededWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.CalcFittingFontHeight.NeededHeight"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomLabel.ColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.ColorIsStored.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomLabel.AdjustFontForOptimalFill">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.AdjustFontForOptimalFill.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomLabel.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLabel">
        <short>Label</short>
        <descr>Label: a brief text label to be placed in the Form near any object that needs to be identified.</descr>
        <seealso><link id="HowToUseStdCtrls"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.BidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Caption">
        <short>Caption</short>
        <descr>Caption - the text string that represents the contents of the label</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ParentBidiMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Transparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word is near the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnClick">
        <short>On Click</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnDblClick">
        <short>On Double-click</short>
        <descr>On Double-click - Action to be taken when the mouse button is double-clicked with the cursor over this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseMove">
        <short>On Mouse Movement - Action</short>
        <descr>On Mouse Movement - Action to be taken if the mouse cursor moves while within the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseUp">
        <short>On Mouse Up</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up while the cursor is over this control. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseEnter">
        <short>On Mouse Entry</short>
        <descr>On Mouse Entry - Action to be taken when the mouse cursor enters the bounds of this control. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseLeave">
        <short>On Mouse Leaving</short>
        <descr>On Mouse Leaving - Action to be taken when the mouse cursor leaves the boundaries of this control. User-defined Procedure.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnChangeBounds">
        <short>On Change Bounds</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. User-defined Procedure</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OptimalFill">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="DefaultButtonControlUseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <topic name="HowToUseStdCtrls">
        <short>How to use <i>StdCtrls</i>, <i>ComCtrls</i> or <i>ExtCtrls</i></short>
        <descr>
          <p>The Units <i>StdCtrls</i>, <i>ComCtrls</i> and <i>ExtCtrls</i> contain definitions and descriptions of many of the most commonly used controls for constructing Forms and other Objects in Lazarus Applications.</p>
          <p>Many of the final target controls that the application developer wants to use, such as <i>TButton</i>, <i>TMemo</i>, <i>TScrollBar</i> etc, have a corresponding ancestor class such as <i>TCustomButton</i>, <i>TCustomMemo</i> or <i>TCustomScrollBar</i>. Several of the properties and methods relevant to the final target control are defined (and explained) more fully in the <i>TCustomXXX</i> class, and are <b>inherited</b> by the final target control.</p>
          <br/>
          <p>If you drop a component on the form editor you don't need to add code explicitly to create it. The component is automatically created by the IDE together with the form, and destroyed when the form is destroyed.</p>
          <p>However, if you create the component yourself by code don't forget to free it when it is no longer needed.</p>
          <br/>
          <p>If you place a component on the Form Designer and look at the Object Inspector, you can observe the properties change as you move the component around.</p>
          <p>For example, if you place a button (TButton) on the form, click on it to select it, then move it around the form with the mouse, you can watch the values of Top and Left change in the Object Inspector to reflect the new position. If you use the object's re-sizing bars to adjust its size, you can watch the Height and Width properties change as well.</p>
          <p>On the other hand, by using the Object Inspector, you can select the value associated with a property such as height, and type in a new value; you can watch the size of the object on the form change to reflect the new value.</p>
          <p>You can also explicitly change the properties of the object in code by typing (in the appropriate Implementation section of the Source editor), for example</p>
          <br/>
          <code>Form1.Button1.Height := 48;</code>
          <br/>
          <p>If you type this new value into the Source Editor and then look back at the Form Designer, you will see that the button on the Form has taken the new size. The new value will also be shown in the Object Inspector.</p>
          <br/>
          <p>In summary, there are usually about three different ways to determine each property of an object:</p>
          <ul>
            <li>by using the mouse,</li>
            <li>by setting the values in the Object Inspector,</li>
            <li>or explicitly by writing code.</li>
          </ul>
          <br/>
          <p>The components defined in these Units have several properties that are common to most of them, and other properties that are specific to the individual components. We shall describe the most common ones here. Unusual or control-specific properties will be described for the individual controls. </p>
          <p>Additional Help can always be obtained by selecting a property or keyword,  in either the Object Inspector or the Source Editor, and pressing <b>F1</b>. You will be taken by your Help browser to the appropriate page in the documentation. </p>
          <p>If the description of a property on that page is insufficient, you can navigate to the corresponding description in the ancestor classes, by selecting the links in the Inheritance listing or by selecting the ancestor Type in the declaration of the object.</p>
          <br/>
          <p><i>Constructors</i>



 such as <i>Create</i> allocate memory and system resources needed by the object. They also call the constructor of any sub-objects present in the class.</p>
          <p><i>Destructors:</i>



 remove the object and de-allocate memory and other resources. If you call <i>Destroy</i> for an object which hasn't being initialized yet it will generate an error. Always use the <i>Free</i> method to deallocate objects, because it checks whether an object's value is <b>nil</b> before invoking <i>Destroy</i>.</p>
          <p>Take the following precautions when creating your own <i>Destroy</i> method:</p>
          <ul>
            <li>Declare <i>Destroy</i> with the <b>override</b> directive, because it is a <b>virtual</b> method.</li>
            <li>Always call '<i>inherited Destroy;</i>' as the last thing on the destructor code.</li>
            <li>Be aware that an <i>exception</i> may be raised on the <i>constructor</i> in case there is not enought memory to create an object, or something else goes wrong. If the <i>exception</i> is not handled inside the constructor, the object will be only partially built. In this case <i>Destroy</i> will be called when you weren't expecting it, so your destructor must check if the resources were really allocated before disposing of them.</li>
            <li>Remember to call <i>Free</i> for all objects created on the constructor.</li>
          </ul>
          <br/>
          <table>
            <caption>Some commonly listed properties</caption>
            <th>
              <td>Property</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>Action</td>
              <td>The main action or event associated with the object. For example selecting an 'Exit' Button might cause the 'Close' action</td>
            </tr>
            <tr>
              <td>Align</td>
              <td>Defines the way in which an object is to be lined up with the parent object. Possible values are alTop (placed at the top and using the full available width), alBottom, alLeft (placed at the left and using the full available height), alRight. alNone (place anywhere on parent control) or alClient (takes all available space next to controls aligned to top, bottom, left or right)</td>
            </tr>
            <tr>
              <td>Anchor</td>
              <td>Used to keep a control a certain distance from the defined edges of a parent control, when the parent is resized. For example <b>[akBottom, akRight]</b> will keep the control a fixed distance from the bottom right corner.</td>
            </tr>
            <tr>
              <td>AutoSelect</td>
              <td>When True, an editing control will select all its text when it receives focus or when the Enter key is pressed.</td>
            </tr>
            <tr>
              <td>AutoSelected</td>
              <td>True indicate that the edit or combobox control has just performed an AutoSelect operation so that subsequent mouse-clicks and keystrokes proceed normally without selecting the text.</td>
            </tr>
            <tr>
              <td>BorderSpacing</td>
              <td>The space around the edge between an <i>Anchored</i> control and its parent.</td>
            </tr>
            <tr>
              <td>Caption</td>
              <td>The text that is displayed on or near the control; it should preferably give some clue as to the function of the control, or an instruction such as 'Close' or 'Execute'. By default Caption is set to be the same as the 'Name' property, and the application programmer should substitute meaningful text instead of the default values.</td>
            </tr>
            <tr>
              <td>CharCase</td>
              <td>Indicates how text is displayed in a text editing control: Normal (retaining the case of the letters typed by the user), converted to uppercase, or converted to lowercase</td>
            </tr>
            <tr>
              <td>Constraints</td>
              <td>Sets the minimum and maximum sizes for a control. If a control is resized the new dimensions are always within the ranges given here. You should take care when setting these options that they do not conflict with the Anchors and Align settings.</td>
            </tr>
            <tr>
              <td>Color</td>
              <td>The Colour to be used to draw the control or to write the text it contains.</td>
            </tr>
            <tr>
              <td>Enabled</td>
              <td>A Boolean property to determine whether or not a control is capable of being selected and performing an action. If it is not <i>Enabled</i>, it is often <b>Grayed</b> out on the Form.</td>
            </tr>
            <tr>
              <td>Font</td>
              <td>The Font to be used for writing the text associated with the control - either the caption or label, or the text-strings contained within the control. The entry on the Object Inspector usually has a (+) box on the left, and selecting this box reveals further options such as character set, colour and size.</td>
            </tr>
            <tr>
              <td>Hint</td>
              <td>A short piece of informative pop-up text that appears if the mouse-cursor hovers over the control.</td>
            </tr>
            <tr>
              <td>Items</td>
              <td>The list of 'Things' that the object contains, such as a group of images, a series of lines of text, a number of actions in an actionlist, etc</td>
            </tr>
            <tr>
              <td>Name</td>
              <td>The identifier by which the control is known in the program. The IDE gives it a default name based on the underlying type, for example successive instances of TBitButton would be named Form1.BitBitton1 and Form1.BitButton2; it is up to the application programmer to give them more meaningful names such as ExitButton or OKButton. By default the Name of the control is applied to the Caption for the control, but the text of the Caption may be changed separately.</td>
            </tr>
            <tr>
              <td>PopUpMenu</td>
              <td>A window containing context-sensitive menu information that pops up when the right mouse button is clicked on the object.</td>
            </tr>
            <tr>
              <td>Position (or Top, Left)</td>
              <td>Determines where the control is located on the parent form or window</td>
            </tr>
            <tr>
              <td>ReadOnly</td>
              <td>Boolean property which, if True, signifies that the contents of the control can be read by the user or the calling routine, but cannot be written or changed.</td>
            </tr>
            <tr>
              <td>ShowHint</td>
              <td>Allows a small window containing a context-sensitive Help or other description to be displayed when the mouse cursor 'hovers' over the control.</td>
            </tr>
            <tr>
              <td>Size (or Height and Width)</td>
              <td>The dimensions of the control</td>
            </tr>
            <tr>
              <td>Style</td>
              <td>The options available for Style depend upon the sort of Control being considered: for instance the Style may be defined by TFormStyle, TBorderStyle, TButtonStyle etc.</td>
            </tr>
            <tr>
              <td>TabOrder</td>
              <td>Integer defining where in the sequence of tabs on the Form this control is to lie</td>
            </tr>
            <tr>
              <td>TabStop</td>
              <td>Boolean property which if True places this control in the sequence of objects that the user can reach by successively pressing the Tab key</td>
            </tr>
            <tr>
              <td>Text</td>
              <td>The String of Text that represents the actual data that this control contains. Applies particularly to Text, Memo and StringList types of object. Most of the editing operations (such as <i>Select</i>, <i>Clear</i>, <i>Cut</i>, <i>Copy</i> are performed in this part of the object, which holds the actual string being edited. If the control contains more than a single line of text, for example TMemo, then the textual elements are arranged as an array of strings in <i>Lines</i>.</td>
            </tr>
            <tr>
              <td>Visible</td>
              <td>If true, the object can be seen on the Form; if False, object is hidden</td>
            </tr>
            <tr>
              <td>WordWrap</td>
              <td>Logical flag to show whether or not word-wrap is enabled, ie if a word comes near the end of a line and is going to be too long for the line, it is wrapped down to the next line.</td>
            </tr>
          </table>
          <p>Many actions are commonly listed in the 'Events' tab of the Object Inspector. If you select an entry in the list, a ComboBox appears with a DropDown list showing any actions that have aleady been defined, and allowing you to choose one to be associated with this event. Alternatively you can select the ellipsis (three dots ...) and you will be taken to an area of the Source Editor where you can begin typing your own action instructions for the selected event.</p>
          <p>While a large number of events is available for any given control, in practice it is only necessary to populate a few of them. For most controls, it is sufficient to provide coding for 'OnClick'; for more complex controls it may be necessary also to provide for 'OnEntry' (when the mouse cursor enters the Control and gives it focus) and 'OnExit' (when the mouse cursor leaves the Control; or you may need to write an event handler for 'OnChange' or 'OnScroll', depending on the nature of the particular control with which you are dealing.</p>
          <p>A common strategy in Object-Oriented programming is to provide an <link id="ActnList.TActionList">ActionList</link> with a number of pre-defined actions from which the most appropriate can be selected to use in any particular instance.</p>
          <table>
            <caption>Some commonly listed Actions</caption>
            <th>
              <td>Action</td>
              <td>Meaning</td>
            </th>
            <tr>
              <td>OnChange</td>
              <td>Action to be taken if any change is detected (eg mouse move, mouse click, key press, edit text, alter picture, etc)</td>
            </tr>
            <tr>
              <td>OnClick</td>
              <td>Action to be taken when the (left) mouse button is clicked. This is usually the main or default action of the control; for example clicking on a button or checkbox initiates the action associated with the checkbox. It may alternatively initate a process of selection, for instance in a TextBox or Memo, or signal the beginning of painting with a Pen or Brush.</td>
            </tr>
            <tr>
              <td>Click</td>
              <td>A method to emulate in code the effect of clicking on a control. This method is most often found in Button-type controls (TButton, TBitBtn, TSpeedButton etc). A procedure can be written that calls the same code as the OnClick action. This facility can be particularly useful if the activation of one control by clicking causes a cascade of other controls to be activated, and the Click method can be used to initiate the action rather than having the user explicitly click on a lot of controls.</td>
            </tr>
            <tr>
              <td>OnDragDrop</td>
              <td>Action to be taken during Drag-Drop manoeuvres, ie when the mouse is used to 'capture' an item or some text etc and move it around the screen to a new location.</td>
            </tr>
            <tr>
              <td>OnEntry</td>
              <td>Action to be taken when the mouse cursor enters the area occupied by the object, usually transfering focus to that object. This might include changes in the appearance of the object such as highlighting or raising the border.</td>
            </tr>
            <tr>
              <td>OnExit</td>
              <td>Action to be taken when the mouse moves out of the area of the object, usually transferring focus out of the object.</td>
            </tr>
            <tr>
              <td>OnKeyPress</td>
              <td>Action to be taken for any key-press. Subtly different from OnKeyDown, which simply responds to a key being down, whether or not it was already down when focus was given to this control. OnKeyPress requires that a key becomes pressed while focus is in this control.</td>
            </tr>
            <tr>
              <td>OnKeyDown</td>
              <td>Action to be taken if a key is down while focus is in this control. Subtly different from OnKeyPress - for example the key might already have been down when focus entered this control, whereas OnKeyPress requires the key to become pressed while focus is in the control.</td>
            </tr>
            <tr>
              <td>On Key Up</td>
              <td>Action to be taken if a key is up (ie not pressed) while focus is in this control.</td>
            </tr>
            <tr>
              <td>OnMouseMove</td>
              <td>On Mouse Down - Action to be taken if the mouse cursor moves while focus is in this control.</td>
            </tr>
            <tr>
              <td>OnMouseDown</td>
              <td>Action to be taken if the mouse button is down while focus is in this control.</td>
            </tr>
            <tr>
              <td>OnMouseUp</td>
              <td>Action to be taken if the mouse button is up while the cursor is over this control. Implies that the mouse button was previously down and has been released. The case where the cursor enters the control but the mouse button has not yet been pressed is covered by OnEntry or OnMouseEnter.</td>
            </tr>
            <tr>
              <td>OnResize</td>
              <td>Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc.</td>
            </tr>
          </table>
        </descr>
      </topic>
    </module>
    <!-- StdCtrls -->
  </package>
</fpdoc-descriptions>
