// included by win32int.pp

{******************************************************************************
                                 win32listsl.inc
                 TWin32ListStringList and TWin32CListStringList

 ******************************************************************************

 *****************************************************************************
 *                                                                           *
 *  This file is part of the Lazarus Component Library (LCL)                 *
 *                                                                           *
 *  See the file COPYING.LCL, included in this distribution,                 *
 *  for details about the copyright.                                         *
 *                                                                           *
 *  This program is distributed in the hope that it will be useful,          *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     *
 *                                                                           *
 *****************************************************************************
}

{$IFOPT H+}
  {$DEFINE H_PLUS}
{$ELSE}
  {$H+}
  {$UNDEF H_PLUS}
{$ENDIF}

{*************************************************************}
{                      Default compare function               }
{*************************************************************}

Function DefaultCompareFunc(A, B: HWND): Integer; CDecl;
Var
  AStr, BStr: PChar;
Begin
  AStr:=nil;
  BStr:=nil;
  GetWindowText(A, AStr, GetWindowTextLength(A) + 1);
  GetWindowText(B, BStr, GetWindowTextLength(B) + 1);
  Result := StrComp(AStr, BStr);
end;

Procedure SetComboHeight(Sender: TWinControl;
  ALeft, ATop, AWidth, AHeight:Integer);
begin
  LCLBoundsToWin32Bounds(Sender,ALeft, ATop, AWidth, AHeight);
  MoveWindow(Sender.Handle,ALeft,ATop,AWidth,AHeight,true);
  LCLControlSizeNeedsUpdate(Sender,true);
end;

{*************************************************************}
{                      TWin32ListStringList methods           }
{*************************************************************}

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Create
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Constructor TWin32ListStringList.Create(List : HWND; TheOwner: TWinControl);
Var
  R:TRect;
Begin
  Inherited Create;
  If List = HWND(Nil) Then
    Raise Exception.Create('Unspecified list window');
    //Assert(False, 'Trace:Unspecified list window');
  FWin32List := List;
  FSender := TheOwner;

  //Set proper win32 flags for ComboBox/ListBox and get/set Combo Height
  case FSender.FCompStyle of
    csComboBox:begin
    	       FFlagSort:=CBS_SORT;
               FFlagGetText:=CB_GETLBTEXT;
               FFlagGetTextLen:=CB_GETLBTEXTLEN;
               FFlagGetCount:=CB_GETCOUNT;
               FFlagResetContent:=CB_RESETCONTENT;
               FFlagDeleteString:=CB_DELETESTRING;
               FFlagInsertString:=CB_INSERTSTRING;
               FFlagAddString:=CB_ADDSTRING;
               //Get edit and item sizes
               Windows.GetClientRect(FWin32List,@R);
               FEditHeight:= R.Bottom;
               FItemHeight:= Windows.SendMessage(FWin32List,CB_GETITEMHEIGHT,0,0);
               FDDownCount:= TComboBox(FSender).DropDownCount;
               If FDDownCount = 0 then FDDownCount:= 8;
    	       end;
    csListBox,csCheckListBox:begin
    	      FFlagSort:=LBS_SORT;
              FFlagGetText:=LB_GETTEXT;
              FFlagGetTextLen:=LB_GETTEXTLEN;
              FFlagGetCount:=LB_GETCOUNT;
              FFlagResetContent:=LB_RESETCONTENT;
              FFlagDeleteString:=LB_DELETESTRING;
              FFlagInsertString:=LB_INSERTSTRING;
              FFlagAddString:=LB_ADDSTRING;
              end;
  else Raise Exception.Create('Win32ListStringList: Component type not detected');
  end;
  // Determine if the list is sorted
  FSorted := (GetWindowLong(FWin32List, GWL_STYLE) and FFlagSort <> 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.SetSorted
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.SetSorted(Val: Boolean);
Begin
  If Val <> FSorted Then
  Begin
    FSorted:= Val;
    Sort;
  End;
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Sort
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.Sort;
Begin
  // The win api doesn't allow to change the sort on the fly,
  // so is needed to recreate the window
  CNSendMessage(LM_RECREATEWND,FSender,Nil);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Assign
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.Assign(Source: TPersistent);
Var
  Counter: Integer;
  EditText: String;
Begin
  { Do not call inherited Assign as it does things we do not want to happen }
  If Source Is TStrings Then
  Begin
    // save any text in edit box
    if FSender.FCompStyle=csComboBox then
      CNSendMessage(LM_GETTEXT, FSender, @EditText);

    Windows.SendMessage(FWin32List, FFlagResetContent, 0, 0);
    For Counter := 0 To (TStrings(Source).Count - 1) Do
      Windows.SendMessage(FWin32List, FFlagAddString, 0, LPARAM(PChar(TStrings(Source)[Counter]))); //Insert

    if FSender.FCompStyle=csComboBox Then
    begin
      if Count = 0 then
        SetComboHeight(FSender,FSender.Left,FSender.Top,FSender.Width,FEditHeight + FItemHeight + 2)
      else
        SetComboHeight(FSender,FSender.Left,FSender.Top,FSender.Width,FEditHeight + FDDownCount*FItemHeight + 2);

      // restore text in edit box
      CNSendMessage(LM_SETLABEL, FSender, PChar(EditText));
    end;
  End
  Else
    inherited Assign(Source);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Get
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Function TWin32ListStringList.Get(Index: Integer): String;
Var
  Item: PChar;
Begin
  If (Index < 0) Or (Index >= Count) Then
    Raise Exception.Create('Out of bounds.')
  Else
  Begin
  	Getmem(Item,Windows.SendMessage(FWin32List,FFlagGetTextLen,Index,0)+1);
    Windows.SendMessage(FWin32List, FFlagGetText, Index, LPARAM(Item));
  End;
  Result := StrPas(Item);
  Dispose(Item);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.GetCount
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Function TWin32ListStringList.GetCount: Integer;
Begin
  Result := Windows.SendMessage(FWin32List, FFlagGetCount, 0, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Clear
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.Clear;
Begin
  if FSender.FCompStyle=csComboBox Then
    SetComboHeight(FSender,FSender.Left,FSender.Top,FSender.Width,
                   FEditHeight + FItemHeight + 2);
  Windows.SendMessage(FWin32List,FFlagResetContent, 0, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Delete
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.Delete(Index: Integer);
Begin
  If (FSender.FCompStyle = csComboBox)
  and (GetCount <= 1) Then
    SetComboHeight(FSender,FSender.Left,FSender.Top,FSender.Width,
                   FEditHeight + FItemHeight + 2);
  Windows.SendMessage(FWin32List,FFlagDeleteString, Index, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32ListStringList.Insert
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32ListStringList.Insert(Index: Integer; Const S: String);
Begin
  If (FSender.FCompStyle = csComboBox)
  and (GetCount = 0) Then
    SetComboHeight(FSender,FSender.Left,FSender.Top,FSender.Width,
                   FEditHeight + FDDownCount*FItemHeight + 2);
  If FSorted Then
    Windows.SendMessage(FWin32List,FFlagAddString, 0, LPARAM(PChar(S)))
  Else
    Windows.SendMessage(FWin32List,FFlagInsertString, Index, LPARAM(PChar(S)));
End;

{*************************************************************}
{                      TWin32CListStringList methods            }
{*************************************************************}

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Create
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Constructor TWin32CListStringList.Create(List : HWND; TheOwner: TWinControl);
Begin
  Inherited Create;
  If List = HWND(Nil) Then
    Raise Exception.Create('Unspecified list widget');
  FWin32CList := List;
  FSorted := (GetWindowLong(FWin32CList, GWL_STYLE) and LBS_SORT <> 0);
  FSender:=TheOwner;
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.SetSorted
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.SetSorted(Val: Boolean);
Begin
  If Val <> FSorted Then
  Begin
    FSorted := Val;
    Sort;
  End;
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Sort
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.Sort;
Begin
  // The win api doesn't allow to change the sort on the fly,
  // so is needed to recreate the window
  CNSendMessage(LM_RECREATEWND,FSender,Nil);
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Assign
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.Assign(Source: TPersistent);
Var
  Counter: Integer;
Begin
  { Do not call inherited Assign as it does things we do not want to happen }
  If Source Is TStrings Then
  Begin
    Clear;
    For Counter :=  0 To (TStrings(Source).Count - 1) Do
      InsertObject(0, TStrings(Source)[Counter], TStrings(Source).Objects[Counter]);
  End
  Else
    Inherited Assign(Source);
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Clear
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.Clear;
Begin
  Windows.SendMessage(FWin32CList, LB_RESETCONTENT, 0, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Delete
  Params:
  Returns:

 ------------------------------------------------------------------------------}
procedure TWin32CListStringList.Delete(Index: Integer);
begin
  Windows.SendMessage(FWin32CList, LB_DELETESTRING, Index, 0);
end;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Get
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Function TWin32CListStringList.Get(Index: Integer): String;
Var
  Item: PChar;
Begin
  If (Index < 0) Or (Index >= Count) Then
    Raise Exception.Create('Out of bounds.')
  Else
  Begin
  	Getmem(Item,Windows.SendMessage(FWin32CList,LB_GETTEXTLEN,Index,0)+1);
    Windows.SendMessage(FWin32CList, LB_GETTEXT, Index, LPARAM(Item));
    Result := StrPas(Item);
    Dispose(Item);
  End;
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.GetCount
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Function TWin32CListStringList.GetCount: Integer;
Begin
  Result := Windows.SendMessage(FWin32CList, LB_GETCOUNT, 0, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.GetObject
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Function TWin32CListStringList.GetObject(Index: Integer): TObject;
Begin
  HWND(Result) := Windows.SendMessage(FWin32CList, LB_GETITEMDATA, Index, 0);
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.Insert
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.Insert(Index: Integer; Const S: String);
Begin
  If FSorted Then
    Windows.SendMessage(FWin32CList,LB_ADDSTRING, 0, LPARAM(PChar(S)))
  Else
    Windows.SendMessage(FWin32CList,LB_INSERTSTRING, Index, LPARAM(PChar(S)));
End;

{------------------------------------------------------------------------------
  Method: TWin32CListStringList.PutObject
  Params:
  Returns:

 ------------------------------------------------------------------------------}
Procedure TWin32CListStringList.PutObject(Index: Integer; AObject: TObject);
Begin
  Windows.SendMessage(FWin32CList, LB_SETITEMDATA, Index, LPARAM(AObject));
End;

{$IFDEF H_PLUS}
  {$UNDEF H_PLUS}
{$ELSE}
  {$H-}
{$ENDIF}

{ =============================================================================

  $Log$
  Revision 1.22  2003/11/25 21:20:38  micha
  implement tchecklistbox

  Revision 1.21  2003/11/18 07:20:40  micha
  added "included by" notice at top of file

  Revision 1.20  2003/10/02 11:18:09  mattias
  clean ups from Karl

  Revision 1.19  2003/09/20 13:27:49  mattias
  varois improvements for ParentColor from Micha

  Revision 1.18  2003/08/28 09:10:01  mattias
  listbox and comboboxes now set sort and selection at handle creation

  Revision 1.17  2003/08/27 09:33:26  mattias
  implements SET_LABEL from Micha

  Revision 1.16  2003/08/26 08:12:33  mattias
  applied listbox/combobox patch from Karl

  Revision 1.15  2003/08/23 21:17:09  mattias
  several fixes for the win32 intf, added pending OnResize events

  Revision 1.14  2003/08/23 11:30:51  mattias
  fixed SetComboHeight in win32 intf and finddeclaration of overloaded proc definition

  Revision 1.13  2003/08/13 21:23:10  mattias
  fixed log

  Revision 1.12  2003/08/13 16:26:07  mattias
  fixed combobox height from Karl

  Revision 1.10  2003/07/28 06:42:42  mattias
  removed debuggging SetName, Patch from Karl Brandt

  Revision 1.9  2003/06/28 16:20:19  mattias
  fixed some win32 intf warnings

  Revision 1.8  2003/01/01 10:46:59  mattias
  fixes for win32 listbox/combobox from Karl Brandt

  Revision 1.7  2002/11/15 23:43:54  mattias
  applied patch from Karl Brandt

  Revision 1.6  2002/05/10 07:43:48  lazarus
  MG: updated licenses

  Revision 1.5  2002/04/03 01:52:42  lazarus
  Keith: Removed obsolete code, in preperation of a pending TWin32Object cleanup

  Revision 1.4  2002/02/04 10:54:33  lazarus
  Keith:
    * Fixes for Win32
    * Added new listviewtest.pp example

  Revision 1.3  2002/02/01 10:13:09  lazarus
  Keith: Fixes for Win32

  Revision 1.2  2002/01/17 03:17:44  lazarus
  Keith: Fixed TCustomPage creation

  Revision 1.1  2002/01/06 23:09:52  lazarus
  MG: added missing files

}
