<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="LCL">
    <!--
  ====================================================================
    Controls
  ====================================================================
-->
    <module name="Controls">
      <short>This unit contains basic classes for visual controls.</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="TypInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="FPCAdds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="DynHashArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ImgList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="UTrace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="PropertyStorage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrNone">
        <short>mrNone</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrNone=0
</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrOK">
        <short>mrOK</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrOK=1
</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrCancel">
        <short>mrCancel</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrCancel=2</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrAbort">
        <short>mrAbort</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrAbort=3
        
</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrRetry">
        <short>mrRetry</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrRetry=4</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrIgnore">
        <short>mrIgnore</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrIgnore=5</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrYes">
        <short>mrYes</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrYes=6</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrNo">
        <short>mrNo (not the same as mrNone)</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrNo=7</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrAll">
        <short>mrAll</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrAll=8</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrNoToAll">
        <short>mrNoToAll</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrNoToAll=9</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrYesToAll">
        <short>mrYesToAll</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrYesToAll=10</descr>
      </element>
      <!-- constant Visibility: default -->
      <element name="mrLast">
        <short>mrLast</short>
        <descr>Series of constants to be used as respones in message boxes etc.
mrLast=mrYesToAll=10</descr>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TWinControlClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TControlClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="TDate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="TTime">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMMouseWheel">
        <short>TCMMouseWheel - record holding data about the Mouse Wheel</short>
        <descr>
          <pre>Details held include:
          the Message associated with the wheel;
          the shift state (ie whether Shift, Alt, Control etc keys have been pressed);
          wheel data which can either be 
	  a position (X, Y coordinates) or 
	  a position plus an integer result.</pre>
        </descr>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMMouseWheel.MSg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMMouseWheel.ShiftState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMMouseWheel.Unused">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMMouseWheel.WheelData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TCMHitTest">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMControlChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMControlChange.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMControlChange.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMControlChange.Inserting">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMControlChange.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TCMDialogChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TCMDialogKey">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAlign">
        <short>TAlign - the available options for aligning a Control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alClient"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAlign.alCustom"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TAlignSet">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAnchorKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorKind.akTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorKind.akLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorKind.akRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorKind.akBottom"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TAnchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAnchorSideReference">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorSideReference.asrTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorSideReference.asrBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TAnchorSideReference.asrCenter"><short/></element>
      <!-- constant Visibility: default -->
      <element name="asrLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="asrRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="TTranslateString">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStyle.fsNormal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStyle.fsMDIChild"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStyle.fsMDIForm"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStyle.fsStayOnTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStyle.fsSplash"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsSingle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsSizeable"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsDialog"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsToolWindow"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormBorderStyle.bsSizeToolWin"><short/></element>
      <!-- range type Visibility: default -->
      <element name="TBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TControlBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TControlRoleForForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlRoleForForm.crffDefault"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlRoleForForm.crffCancel"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TControlRolesForForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TBevelCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TMouseButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMouseButton.mbLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMouseButton.mbRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMouseButton.mbMiddle"><short/></element>
      <!-- constant Visibility: default -->
      <element name="fsAllStayOnTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crHigh">
        <short>crHigh - a cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crDefault">
        <short>crDefault - cursor constant: use default cursor (0)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crNone">
        <short>crNone - a cursor constant: no cursor (-1)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crArrow">
        <short>crArrow - cursor constant: Arrow cursor (-2)</short>
      </element>
      <!-- constant Visibility: default -->
      <element name="crCross">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crIBeam">
        <short>crIbeam - cursor constant: shows I-beam cursor often used in text editors (-4) </short>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeNESW">
        <short>crSizeNESW - cursor constant: runs diagonally from NorthEast to SouthWest (-6)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeNS">
        <short>crSizeNS - cursor constant: cursur runs from North to South (-7)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeNWSE">
        <short>crNWSE - cursor constant: cursor runs from NorthWest to SouthEast</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeWE">
        <short>crSizeWE - cursor constant: runs from West to East (-9)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeNW">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeN">
        <short>crSizeN - cursor constant: cursor North (-24)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeNE">
        <short>crSizeNW - cursor constant: NorthWest (-23)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeW">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeSW">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeS">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeSE">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crUpArrow">
        <short>crUpArrow - cursor constant: cursor is Up-Arrow (-10)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crHourGlass">
        <short>crHourGlass - cursor constant: shows hour-glass (wait while action proceeds) (-11)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crDrag">
        <short>crDrag - cursor constant: shows dragging cursor (-12)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crNoDrop">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crHSplit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crVSplit">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crMultiDrag">
        <short>cursor constant</short>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSQLWait">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crNo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crAppStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crHelp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crHandPoint">
        <short>crHandPoint - cursor constant: Pointing Hand (-21)</short>
      </element>
      <!-- constant Visibility: default -->
      <element name="crSizeAll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="crLow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TWndMethod">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWndMethod.TheMessage"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TControlStyleType">
        <short>TControlStyleType - describes features of the Control</short>
        <descr>
          <pre>Enumerated type comprising:
    csAcceptsControls, // can have children in the designer
    csCaptureMouse,
    csDesignInteractive, // wants mouse events in design mode
    csClickEvents,
    csFramed,
    csSetCaption,
    csOpaque,
    csDoubleClicks,// control understands mouse double clicks
    csTripleClicks,// control understands mouse triple clicks
    csQuadClicks,  // control understands mouse quad clicks
    csFixedWidth,
    csFixedHeight, // control cannot change its height (for example combobox)
    csNoDesignVisible,
    csReplicatable,
    csNoStdEvents,
    csDisplayDragImage,
    csReflector,
    csActionClient,
    csMenuEvents,
    csNoFocus,
    csNeedsBorderPaint, // not implemented
    csParentBackground, // not implemented
    csDesignNoSmoothResize, // no WYSIWYG resizing in designer
    csDesignFixedBounds, // control can not be moved nor resized in designer
    csHasDefaultAction, // control implements useful ExecuteDefaultAction
    csHasCancelAction,   // control implements useful ExecuteCancelAction
    csNoDesignSelectable, // control can not be selected at design time
    csOwnedChildsSelectable // child controls owned by this control are selectable in the designer</pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csAcceptsControls"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csCaptureMouse"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csDesignInteractive"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csClickEvents"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csFramed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csSetCaption"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csOpaque"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csDoubleClicks"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csTripleClicks"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csQuadClicks"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csFixedWidth"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csFixedHeight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csNoDesignVisible"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csReplicatable"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csNoStdEvents"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csDisplayDragImage"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csReflector"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csActionClient"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csMenuEvents"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csNoFocus"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csNeedsBorderPaint"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csParentBackground"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csDesignNoSmoothResize"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csDesignFixedBounds"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csHasDefaultAction"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStyleType.csHasCancelAction"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TControlStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="csMultiClicks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TControlStateType">
        <short>TControlStateType - describes possible states (status) of Control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csLButtonDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csClicked"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csPalette"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csReadingState"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csAlignmentNeeded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csFocusing"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csCreating"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csPaintCopy"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csCustomPaint"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csDestroyingHandle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csDocking"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlStateType.csVisibleSetInLoading"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TControlState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlCanvas">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlCanvas.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlCanvas.FDeviceContext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlCanvas.FWindowHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControlCanvas.SetControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlCanvas.SetControl.AControl"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlCanvas.CreateFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlCanvas.CreateHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlCanvas.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TControlCanvas.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControlCanvas.FreeHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlCanvas.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDragImageList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TKeyEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TKeyEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TKeyEvent.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TKeyEvent.Shift"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TKeyPressEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TKeyPressEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TKeyPressEvent.Key"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TUTF8KeyPressEvent">
        <short>cursor constant</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUTF8KeyPressEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TUTF8KeyPressEvent.UTF8Key"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMouseEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEvent.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEvent.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEvent.Y"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMouseMoveEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseMoveEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseMoveEvent.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseMoveEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseMoveEvent.Y"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMouseWheelEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEvent.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEvent.WheelDelta"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEvent.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEvent.Handled"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMouseWheelUpDownEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelUpDownEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelUpDownEvent.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelUpDownEvent.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelUpDownEvent.Handled"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TDragState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragState.dsDragEnter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragState.dsDragLeave"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragState.dsDragMove"/>
      <!-- enumeration type Visibility: default -->
      <element name="TDragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMode.dmManual"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMode.dmAutomatic"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TDragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragKind.dkDrag"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragKind.dkDock"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TDragOperation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragOperation.dopNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragOperation.dopDrag"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragOperation.dopDock"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TDragMessage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmDragEnter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmDragLeave"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmDragMove"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmDragDrop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmDragCancel"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDragMessage.dmFindTarget"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TDragOverEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.State"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragOverEvent.Accept"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TDragDropEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDropEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDropEvent.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDropEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDropEvent.Y"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TStartDragEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStartDragEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStartDragEvent.DragObject"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TEndDragEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TEndDragEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TEndDragEvent.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TEndDragEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TEndDragEvent.Y"><short/></element>
      <!-- pointer type Visibility: default -->
      <element name="PDragRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TDragRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDragRec.Pos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDragRec.Source">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDragRec.Target">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TDragRec.Docking">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.DragMessage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.Reserved1">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.Reserved2">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.DragRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMDrag.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDragObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FDragTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FDragHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FDragPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FDragTargetPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FDropped">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FMouseDeltaX">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FMouseDeltaY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragObject.FCancelling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDragObject.Capture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragObject.Capture.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.Finished">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.Finished.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.Finished.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.Finished.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.Finished.Accepted"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDragObject.GetDragCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragObject.GetDragCursor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.GetDragCursor.Accepted"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.GetDragCursor.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.GetDragCursor.Y"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDragObject.GetDragImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragObject.GetDragImages.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseMove.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseMove.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseMove.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseDown.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseDown.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseDown.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseDown.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseUp.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseUp.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.MouseUp.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.CaptureChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.CaptureChanged.OldCaptureControl"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.KeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.KeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragObject.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.KeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.KeyUp.Shift"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TDragObject.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDragObject.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragObject.Assign.Source"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDragObject.GetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragObject.GetName.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDragObject.HideDragImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TDragObject.Instance">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragObject.Instance.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDragObject.ShowDragImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.Cancelling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.DragHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.DragPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.DragTargetPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.DragTarget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.Dropped">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.MouseDeltaX">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragObject.MouseDeltaY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TDragObjectClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBaseDragControlObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBaseDragControlObject.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBaseDragControlObject.EndDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.EndDrag.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.EndDrag.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.EndDrag.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBaseDragControlObject.Finished">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Finished.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Finished.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Finished.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Finished.Accepted"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TBaseDragControlObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Create.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBaseDragControlObject.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBaseDragControlObject.Assign.Source"><short/></element>
      <!-- property Visibility: public -->
      <element name="TBaseDragControlObject.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDragControlObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDragControlObject.GetDragCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragControlObject.GetDragCursor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragControlObject.GetDragCursor.Accepted"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragControlObject.GetDragCursor.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragControlObject.GetDragCursor.Y"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDragControlObject.GetDragImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragControlObject.GetDragImages.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDragControlObject.HideDragImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDragControlObject.ShowDragImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDragDockObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDockOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockOrientation.doNoOrient"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockOrientation.doHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockOrientation.doVertical"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TDockDropEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockDropEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockDropEvent.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockDropEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockDropEvent.Y"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TDockOverEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.State"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockOverEvent.Accept"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TUnDockEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TUnDockEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TUnDockEvent.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TUnDockEvent.NewTarget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TUnDockEvent.Allow"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TStartDockEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStartDockEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStartDockEvent.DragObject"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TGetSiteInfoEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetSiteInfoEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGetSiteInfoEvent.DockClient"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGetSiteInfoEvent.InfluenceRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGetSiteInfoEvent.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TGetSiteInfoEvent.CanDock"><short/></element>
      <!-- object Visibility: default -->
      <element name="TDragDockObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragDockObject.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragDockObject.FDockRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragDockObject.FDropAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragDockObject.FDropOnControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDragDockObject.FFloating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDragDockObject.SetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.SetBrush.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragDockObject.AdjustDockRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.AdjustDockRect.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragDockObject.DrawDragDockImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDragDockObject.EndDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.EndDrag.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.EndDrag.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.EndDrag.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDragDockObject.EraseDragDockImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TDragDockObject.GetDragCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragDockObject.GetDragCursor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.GetDragCursor.Accepted"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.GetDragCursor.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.GetDragCursor.Y"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDragDockObject.GetFrameWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDragDockObject.GetFrameWidth.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TDragDockObject.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.Create.AControl"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TDragDockObject.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDragDockObject.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDragDockObject.Assign.Source"><short/></element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.Brush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.DockRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.DropAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.DropOnControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.Floating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDragDockObject.FrameWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDockManager">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.BeginUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.EndUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.GetControlBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.GetControlBounds.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.GetControlBounds.AControlBounds"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.InsertControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.InsertControl.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.InsertControl.InsertAt"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.InsertControl.DropCtl"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.LoadFromStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.LoadFromStream.Stream"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.PaintSite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.PaintSite.DC"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.PositionDockRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.PositionDockRect.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.PositionDockRect.DropCtl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.PositionDockRect.DropAlign"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.PositionDockRect.DockRect"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.RemoveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.RemoveControl.Control"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.ResetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.ResetBounds.Force"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.SaveToStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.SaveToStream.Stream"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="TDockManager.SetReplacingControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockManager.SetReplacingControl.Control"><short/></element>
      <!-- range type Visibility: default -->
      <element name="TConstraintSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TSizeConstraintsOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSizeConstraintsOption.scoAdviceWidthAsMin"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TSizeConstraintsOption.scoAdviceWidthAsMax"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TSizeConstraintsOption.scoAdviceHeightAsMin"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TSizeConstraintsOption.scoAdviceHeightAsMax"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TSizeConstraintsOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TSizeConstraints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMaxHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMaxInterfaceHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMaxInterfaceWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMinHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMinInterfaceHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMinInterfaceWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FMinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TSizeConstraints.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TSizeConstraints.SetOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetOptions.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.AssignTo.Dest"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.SetMaxHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetMaxHeight.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.SetMaxWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetMaxWidth.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.SetMinHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetMinHeight.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TSizeConstraints.SetMinWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetMinWidth.Value"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TSizeConstraints.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.Create.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TSizeConstraints.UpdateInterfaceConstraints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TSizeConstraints.SetInterfaceConstraints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetInterfaceConstraints.MinW"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetInterfaceConstraints.MinH"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetInterfaceConstraints.MaxW"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.SetInterfaceConstraints.MaxH"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.EffectiveMinWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.EffectiveMinWidth.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.EffectiveMinHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.EffectiveMinHeight.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.EffectiveMaxWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.EffectiveMaxWidth.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.EffectiveMaxHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.EffectiveMaxHeight.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.MinMaxWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.MinMaxWidth.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.MinMaxWidth.Width"><short/></element>
      <!-- function Visibility: public -->
      <element name="TSizeConstraints.MinMaxHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TSizeConstraints.MinMaxHeight.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSizeConstraints.MinMaxHeight.Height"><short/></element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.MaxInterfaceHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.MaxInterfaceWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.MinInterfaceHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.MinInterfaceWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TSizeConstraints.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSizeConstraints.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSizeConstraints.MaxHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSizeConstraints.MaxWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSizeConstraints.MinHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSizeConstraints.MinWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TConstrainedResizeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TConstrainedResizeEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TConstrainedResizeEvent.MinWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TConstrainedResizeEvent.MinHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TConstrainedResizeEvent.MaxWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TConstrainedResizeEvent.MaxHeight"><short/></element>
      <!-- range type Visibility: default -->
      <element name="TSpacingSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlBorderSpacing">
        <short>TControlBorderSpacing - the spacing around a Control</short>
        <descr>
          <code>{ TControlBorderSpacing defines the spacing around a control.

    The spacing around its children and between its children is defined in
    TWinControl.ChildSizing.

    Left, Top, Right, Bottom: integer;
        minimum space left to the autosized control.
        For example: Control A lies left of control B.
        A has borderspacing Right=10 and B has borderspacing Left=5.
        Then A and B will have a minimum space of 10 between.

    Around: integer;
        same as Left, Top, Right and Bottom all at once. This will be added to
        the effective Left, Top, Right and Bottom.
        Example: Left=3 and Around=5 results in a minimum spacing to the left
        of 8.

    InnerBorder: integer;
        This is added to the preferred size.
        For example: A buttons widget returns 75x25 on GetPreferredSize.
        CalculatePreferredSize adds 2 times the InnerBorder to the width and
        height.
        
    CellAlignHorizontal, CellAlignVertical: TControlCellAlign;
        Used for example when the Parents.ChildSizing.Layout defines a table
        layout.

  }</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FAround">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FBottom">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlBorderSpacing.FTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetAround">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetAround.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetBottom">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetBottom.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetLeft.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetRight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetRight.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetSpace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetSpace.Kind"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetSpace.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlBorderSpacing.SetTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.SetTop.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlBorderSpacing.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlBorderSpacing.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.Create.OwnerControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControlBorderSpacing.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.Assign.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControlBorderSpacing.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.AssignTo.Dest"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControlBorderSpacing.IsEqual">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlBorderSpacing.IsEqual.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.IsEqual.Spacing"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControlBorderSpacing.GetSpaceAround">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.GetSpaceAround.SpaceAround"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControlBorderSpacing.GetSpace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlBorderSpacing.GetSpace.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.GetSpace.Kind"><short/></element>
      <!-- property Visibility: public -->
      <element name="TControlBorderSpacing.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlBorderSpacing.Space">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlBorderSpacing.Space.Kind"><short/></element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.Right">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.Bottom">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlBorderSpacing.Around">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TAnchorSide">
        <short>TAnchorSide</short>
        <descr>
          <pre>TAnchorSide

    Class holding the reference sides of the anchors of a TControl.
    Every TControl has four AnchorSides:
    AnchorSide[akLeft], AnchorSide[akRight], AnchorSide[akTop] and
    AnchorSide[akBottom].
    Normally if Anchors contain akLeft, and the Parent is resized, the LCL
    tries to keep the distance between the left side of the control and the
    right side of its parent client area.
    With AnchorSide[akLeft] you can define a different reference side. The
    kept distance is defined by the BorderSpacing.
    
    Example1:
       +-----+  +-----+
       |  B  |  |  C  |
       |     |  +-----+
       +-----+

      If you want to have the top of B the same as the top of C use
        B.AnchorSide[akTop].Side:=asrTop;
        B.AnchorSide[akTop].Control:=C;
      If you want to keep a distance of 10 pixels between B and C use
        B.BorderSpacing.Right:=10;
        B.AnchorSide[akRight].Side:=asrLeft;
        B.AnchorSide[akRight].Control:=C;

      Do not setup in both directions, because this will create a circle, and
      circles are not allowed.
      
    Example2:
            +-------+
      +---+ |       |
      | A | |   B   |
      +---+ |       |
            +-------+
            
      Centering A relative to B:
        A.AnchorSide[akTop].Side:=arsCenter;
        A.AnchorSide[akTop].Control:=B;
      Or use this. It's equivalent:
        A.AnchorSide[akBottom].Side:=arsCenter;
        A.AnchorSide[akBottom].Control:=B;


</pre>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TAnchorSide.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TAnchorSide.FKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TAnchorSide.FOwner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TAnchorSide.FSide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TAnchorSide.IsSideStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TAnchorSide.IsSideStored.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TAnchorSide.SetControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.SetControl.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TAnchorSide.SetSide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.SetSide.AValue"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TAnchorSide.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.Create.TheOwner"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.Create.TheKind"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TAnchorSide.GetSidePosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.GetSidePosition.ReferenceControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.GetSidePosition.ReferenceSide"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.GetSidePosition.Position"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TAnchorSide.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TAnchorSide.Assign.Source"><short/></element>
      <!-- property Visibility: public -->
      <element name="TAnchorSide.Owner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TAnchorSide.Kind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TAnchorSide.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TAnchorSide.Side">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlActionLink">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControlActionLink.FClient">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.AssignClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.AssignClient.AClient"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsCaptionLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsCaptionLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsEnabledLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsEnabledLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsHelpLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsHelpLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsHintLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsHintLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsVisibleLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsVisibleLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.IsOnExecuteLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.IsOnExecuteLinked.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControlActionLink.DoShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlActionLink.DoShowHint.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.DoShowHint.HintStr"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetCaption">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetCaption.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetEnabled.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetHint.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetHelpContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetHelpContext.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetHelpKeyword">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetHelpKeyword.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetHelpType">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetHelpType.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetVisible.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlActionLink.SetOnExecute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlActionLink.SetOnExecute.Value"><short/></element>
      <!-- "class of" type Visibility: default -->
      <element name="TControlActionLinkClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TTabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TControlShowHintEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlShowHintEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlShowHintEvent.HintInfo"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TContextPopupEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TContextPopupEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContextPopupEvent.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContextPopupEvent.Handled"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TControlFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfRequestAlignNeeded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfClientWidthLoaded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfClientHeightLoaded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfLastAlignedBoundsValid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfBoundsRectForNewParentValid"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlFlag.cfPreferredSizeValid"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TControlFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TControlHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlHandlerType.chtOnResize"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TControlHandlerType.chtOnChangeBounds"><short/></element>
      <!-- object Visibility: default -->
      <element name="TControl">
        <short>The main ancestor class for visual controls.</short>
        <descr>TControl is the main ancestor class for all visual controls.<br/><br/>

          The definition includes a large number of constants, types and methods that are inherited by derived classes and types.<br/><br/>

          These include devices for defining and controlling <br/>
the state and position of the object <br/>
(including alignment and anchoring), <br/>

the state of the mouse, <br/>

whether dragging or docked, <br/>

the size and type of border, <br/>
the way child components should behave, <br/>
the way actions should occur in response to various events, <br/>

and the way the Control should be drawn.<br/></descr>
        <seealso>
          <link id="lclClasses.TLCLComponent"/>
          <link id="#rtl.Classes.TComponent"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FActionLink">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FAnchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FAnchorSides">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FAutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FBaseBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FBaseBoundsLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FBaseParentClientSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FBorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FBoundsRectForNewParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FCaption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FConstraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FControlFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FControlHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FControlStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FDockOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FDragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FDragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FDragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FFloatingDockSiteClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHelpContext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHelpKeyword">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHelpType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FHostDockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FIsControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.fLastAlignedBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastChangebounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastDoChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastResizeClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastResizeClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastResizeHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLastResizeWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLoadedClientSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FLRDockWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FMouseEntered">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnConstrainedResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnQuadClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FOnTripleClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FPopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FPreferredWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FPreferredHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FSessionProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FSizeLock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FTBDockHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FUndockHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FUndockWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControl.FWindowProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControl.DoActionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoActionChange.Sender"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetAnchorSide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetAnchorSide.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetAnchorSide.Kind"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetAnchorSideIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetAnchorSideIndex.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetAnchorSideIndex.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetBoundsRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetBoundsRect.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetClientHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetClientHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetClientWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetClientWidth.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetLRDockWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetLRDockWidth.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetMouseCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetMouseCapture.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetTBDockHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetTBDockHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetText">
        <short>Function to get text-string associated with control</short>
        <descr>Uses RealGetText rather than GetTextBuf to avoid unnecessary read-writes to PChar buffers</descr>
        <seealso>
          <link id="GetTextBuf"/>
          <link id="RealGetText"/>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetText.Result">
        <short>The function returns the required text as a string</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TControl.GetUndockHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetUndockHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.GetUndockWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetUndockWidth.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsAnchorsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsAnchorsStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsCaptionStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsCaptionStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsColorStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsColorStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsEnabledStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsEnabledStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsFontStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsFontStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsHintStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsHintStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsHelpContextStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsHelpContextStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsHelpKeyWordStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsHelpKeyWordStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsOnClickStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsOnClickStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsShowHintStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsShowHintStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.IsVisibleStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsVisibleStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TControl.CheckMenuPopup">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.CheckMenuPopup.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.CheckMenuPopup.P"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.DoBeforeMouseMessage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControl.DoConstrainedResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoConstrainedResize.NewLeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoConstrainedResize.NewTop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoConstrainedResize.NewWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoConstrainedResize.NewHeight"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.DoMouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoMouseDown.Message"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoMouseDown.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoMouseDown.Shift"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.DoMouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoMouseUp.Message"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoMouseUp.Button"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetAnchorSideIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAnchorSideIndex.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAnchorSideIndex.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetBorderSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBorderSpacing.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetBoundsRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsRect.ARect"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetBoundsRectForNewParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsRectForNewParent.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetClientHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetClientHeight.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetClientSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetClientSize.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetClientWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetClientWidth.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetConstraints">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetConstraints.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetCursor.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetDragCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetDragCursor.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetFont">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetFont.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetHeight.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetHelpContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetHelpContext.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetHelpKeyword">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetHelpKeyword.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetHostDockSite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetHostDockSite.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetLeft.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetMouseCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetMouseCapture.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetParentShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetParentShowHint.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetParentColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetParentColor.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetPopupMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetPopupMenu.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetShowHint.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetText">
        <short>Stores text in buffer</short>
        <descr>Uses RealSetText rather than SetTextBuf to avoid unnecessary read-writes to PChar buffer</descr>
        <seealso>
          <link id="RealSetText"/>
          <link id="SetTextBuf"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetText.Value">
        <short>The text string to be stored in the buffer</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetTop.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetVisible.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControl.SetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetWidth.Value"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TControl.FControlState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControl.AutoSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoAutoSize">
        <descr>
          <pre>{------------------------------------------------------------------------------
  TControl DoAutoSize

  IMPORTANT: Many Delphi controls override this method and many call this method
  directly after setting some properties.
  During handle creation not all interfaces can create complete Device Contexts
  which are needed to calculate things like text size.
  That's why you should always call AdjustSize instead of DoAutoSize.
------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControl.AutoSizeCanStart">
        <descr>
          <pre>{------------------------------------------------------------------------------
  function TControl.AutoSizeCanStart: boolean;
  
  Returns true if DoAutoSize can start. That means, it tests the minimum
  requirements to start. Some controls need even more.

  It returns false if
  - AutoSize=false
  - or the control is currently autosizing
  - or the control is not visible
  - or the control is destroying
------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.AutoSizeCanStart.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.AnchorSideChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorSideChanged.TheAnchorSide"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAlign.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetAnchors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAnchors.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAutoSize.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.BoundsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoConstraintsChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoConstraintsChange.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoBorderSpacingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoBorderSpacingChange.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SendMoveSizeMessages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SendMoveSizeMessages.SizeChanged"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SendMoveSizeMessages.PosChanged"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.ConstrainedResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ConstrainedResize.MinWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ConstrainedResize.MinHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ConstrainedResize.MaxWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ConstrainedResize.MaxHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CalculatePreferredSize">
        <descr>
          <pre>procedure TControl.CalculatePreferredSize(var PreferredWidth,
    PreferredHeight: integer; WithThemeSpace: Boolean);

  Calculates the default/preferred width and height for a control, which is used
  by the LCL autosizing algorithms as default size. Only positive values are
  valid. Negative or 0 are treated as undefined and the LCL uses other sizes
  instead.
  TWinControl overrides this and asks the interface for theme dependent values.
  See TWinControl.GetPreferredSize for more information.

  WithThemeSpace: If true, adds space for stacking. For example: TRadioButton
  has a minimum size. But for stacking multiple TRadioButtons there should be
  some space around. This space is theme dependent, so it passed parameter to
  the widgetset.
</pre>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CalculatePreferredSize.PreferredWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.CalculatePreferredSize.PreferredHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoOnChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.Resize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.RequestAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.UpdateBaseBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.UpdateBaseBounds.StoreBounds"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.UpdateBaseBounds.StoreParentClientSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.UpdateBaseBounds.UseLoadedValues"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.LockBaseBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.UnlockBaseBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.UpdateAnchorRules">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.ChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeBounds.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeBounds.ATop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeBounds.AWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeBounds.AHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoSetBounds.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoSetBounds.ATop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoSetBounds.AWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoSetBounds.AHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.ChangeScale">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeScale.Multiplier"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChangeScale.Divider"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.CanAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.CanAutoSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.CanAutoSize.NewWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.CanAutoSize.NewHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetAlignedBounds">
        <descr>
          <pre>{ try to set the automatic changed bounds
  If the interface does not like our bounds, it sends a message with the real
  bounds, which invokes the automatic realigning of the control, .. a circle.
  To break the circle, only bounds that are different from the last try will
  be sent.
}</pre>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAlignedBounds.aLeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAlignedBounds.aTop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAlignedBounds.aWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAlignedBounds.aHeight"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetClientOrigin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetClientOrigin.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetClientRect.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetScrolledClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetScrolledClientRect.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetChildsRect">
        <short>Gets the rectangular coordinates for a child control</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetChildsRect.Result">
        <short>The function returns the coordinates of the child rectangle</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetChildsRect.Scrolled">
        <short>True if the rectangle is scrolled</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetClientScrollOffset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetClientScrollOffset.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetControlOrigin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetControlOrigin.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMLButtonDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMLButtonDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMRButtonDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMRButtonDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMButtonDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMButtonDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMLButtonDBLCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMLButtonDBLCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMRButtonDBLCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMRButtonDBLCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMButtonDBLCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMButtonDBLCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMLButtonTripleCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMLButtonTripleCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMRButtonTripleCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMRButtonTripleCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMButtonTripleCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMButtonTripleCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMLButtonQuadCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMLButtonQuadCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMRButtonQuadCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMRButtonQuadCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMButtonQuadCLK">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMButtonQuadCLK.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMouseMove.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMLButtonUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMLButtonUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMRButtonUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMRButtonUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMButtonUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMButtonUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMDragStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMDragStart.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMMove.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMSize.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WMWindowPosChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WMWindowPosChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.LMCaptureChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.LMCaptureChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMEnabledChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMEnabledChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMHitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMHitTest.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMMouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMMouseEnter.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMMouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMMouseLeave.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMHintShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMHintShow.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMParentColorChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMParentColorChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMParentShowHintChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMParentShowHintChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CMVisibleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CMVisibleChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CalculateDockSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControl.CreateFloatingDockSite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.CreateFloatingDockSite.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.CreateFloatingDockSite.Bounds"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetDockEdge">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetDockEdge.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetDockEdge.MousePos"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetFloating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetFloating.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetFloatingDockSiteClass">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetFloatingDockSiteClass.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.BeginAutoDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DefaultDockImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DefaultDockImage.DragDockObject"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DefaultDockImage.Erase"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DockTrackNoTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DockTrackNoTarget.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DockTrackNoTarget.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DockTrackNoTarget.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoDock.NewDockSite"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoDock.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoDragMsg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoDragMsg.DragMsg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoEndDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDock.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDock.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDock.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoEndDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDrag.Target"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDrag.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoEndDrag.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoStartDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoStartDock.DragObject"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoStartDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoStartDrag.DragObject"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DragCanceled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DragOver">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragOver.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragOver.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragOver.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragOver.State"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragOver.Accept"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DrawDragDockImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DrawDragDockImage.DragDockObject"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.EraseDragDockImage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.EraseDragDockImage.DragDockObject"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.PositionDockRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.PositionDockRect.DragDockObject"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetDragMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetDragMode.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DblClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.TripleClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.QuadClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseDown.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseDown.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseDown.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseDown.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseMove.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseMove.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseMove.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseUp.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseUp.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.MouseUp.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.MouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.MouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControl.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DialogChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.Changed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetPalette">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetPalette.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ChildClassAllowed.ChildClass"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DefineProperties.Filer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AssignTo.Dest"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.InvalidateControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.InvalidateControl.CtrlIsVisible"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.InvalidateControl.CtrlIsOpaque"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.InvalidateControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.InvalidateControl.CtrlIsVisible"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.InvalidateControl.CtrlIsOpaque"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.InvalidateControl.IgnoreWinControls"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.FontChanged.Sender"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetAction.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.RealGetText">
        <short>Function to get a text-string associated with the control</short>
        <descr>This is the function that is actually used by GetTextBuf, and loads a string rather than performing read-write to a PChar buffer</descr>
        <seealso>
          <link id="GetTextBuf"/>
          <link id="RealSetText"/>
          <link id="SetTextBuf"/>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.RealGetText.Result">
        <short>The Function returns the required text as a string</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.RealSetText">
        <short>Procedure to store text associated with the control in a string</short>
        <descr>This is the procedure that is actually used by SetTextBuf, and stores text as a string rather than performing read-write to a PChar buffer</descr>
        <seealso>
          <link id="SetTextBuf"/>
          <link id="RealGetText"/>
          <link id="GetTextBuf"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.RealSetText.Value">
        <short>The text-string that is to be stored</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetAction.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetColor.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetEnabled.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetHint.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetName.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetParent.NewParent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.SetParentComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetParentComponent.NewParentComponent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.WndProc.TheMessage"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.ParentFormHandleInitialized">
        <short>ParentFormHandleInitialized - called by ChildHandlesCreated of parent form</short>
        <descr>
          <pre>// The form is a real connection to the target screen. For example, the gtk
  // under X gathers some screen information, but not before form creation.
  // But this information is needed to create DeviceContexts, which
  // are needed to calculate Text Size and such stuff needed for AutoSizing.
  // That's why AdjustSize delays AutoSizing till this moment. Now do the
  // AutoSize.
</pre>
        </descr>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.CaptureChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.Notification.Operation"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.CanTab.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetDeviceContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetDeviceContext.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetDeviceContext.WindowHandle"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetEnabled.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetPopupMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetPopupMenu.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoOnShowHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoOnShowHint.HintInfo"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.VisibleChanging">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandler.AMethod"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandler.AsLast"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.RemoveHandler.HandlerType"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.RemoveHandler.AMethod"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.DoContextPopup">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoContextPopup.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.DoContextPopup.Handled"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TControl.GetActionLinkClass">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetActionLinkClass.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControl.ActionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ActionChange.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ActionChange.CheckDefaults"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TControl.ActionLink"/>
      <!-- property Visibility: protected -->
      <element name="TControl.AutoSize">
        <short>Whether auto-size is to be used</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads logical (boolean) flag to see whether auto-sizing is to be operated, or writes the flag to say it should be done. Default is false, ie no auto-sizing</descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.MouseCapture">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.SessionProperties">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnConstrainedResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnTripleClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnQuadClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TControl.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TControl.FCompStyle">
        <short>FCompStyle - deprecated</short>
        <descr>
          <pre>// DEPRECATED. Enables (valid) use of 'IN' operator (this
      // is a hack for speed. It will be replaced by the use of the widgetset
      // classes.
      // So, don't use it anymore.        
</pre>
        </descr>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.DragDrop">
        <short>DragDrop - Procedure to govern Dragging/Dropping of control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragDrop.Source">
        <short>The object to be dragged and dropped</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragDrop.X">
        <short>The X co-ordinate to which the object is to be dropped (target)</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.DragDrop.Y">
        <short>The Y co-ordinate to which the object is to be dropped (target)</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Dock">
        <short>Dock - Procedure governing Docking of Control</short>
        <descr>Performs checks that there is already a valid host control <br/>to which the present control is to be docked, <br/>removes old controls from the list of docked controls <br/>and adds the new control to the list, <br/>then calls DoDock to perform the actual docking process</descr>
        <errors>An exception is raised if there is already a docking process in progress for this control</errors>
        <seealso><link id="DoDock"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.Dock.NewDockSite">
        <short>The host control to which which the current control is to be docked</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.Dock.ARect">
        <short>The position at which the control is to be docked</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.ManualDock">
        <short>ManualDock - permits operator-defined docking</short>
        <descr>
          <pre>{------------------------------------------------------------------------------
  function TControl.ManualDock(NewDockSite: TWinControl; DropControl: TControl;
    ControlSide: TAlign): Boolean;

  Docks this control to DropControl or on NewDockSite.
  If DropControl is not <B>nil</B>, ControlSide defines on which side of DropControl
  this control is docked. (alNone,alClient for stacked in pages). DropControl
  will become part of a TDockManager.
  If DropControl is <B>nil</B>, then DropControl becomes a normal child of NewDockSite
  and ControlSide is ignored.
------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ManualDock.Result">
        <short>The function returns True if a manual dock has been successfully performed</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ManualDock.NewDockSite">
        <short>The new site to which the control is docked, if DropControl has been found to be <B>nil</B></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ManualDock.DropControl">
        <short>If <B>nil</B> (default) then ignored else used as the control for docking, on side specified by ControlSide</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ManualDock.ControlSide">
        <short>The side on which the control is to be docked, if DropControl is not <B>nil</B></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.ManualFloat">
        <short>ManualFloat - the opposite of ManualDock, allows operator to Float a control</short>
        <descr>
          <pre>{------------------------------------------------------------------------------
  function TControl.ManualFloat(TheScreenRect: TRect;
    KeepDockSiteSize: Boolean = true): Boolean;

  Undock and float.
  Float means here: create the floating dock site and dock this control into it.
  Exception: Forms do not need float dock sites and float on their own.
------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ManualFloat.Result">
        <short>The function returns True if a manual float has been succesfully performed</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ManualFloat.TheScreenRect">
        <short>The rectangle within which the floating control is located</short>
        <descr>The rectangle within which the floating control is located <br/>(ie the location of the floating dock site to which the control is docked)</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.ReplaceDockedControl">
        <short>Remove a previously docked control and put a new control in its place</short>
        <descr>Checks to see whether there is a previously docked control, <br/>and removes it, then puts the new control in its place</descr>
        <seealso><link id="ManualDock"/></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ReplaceDockedControl.Result">
        <short>Returns True if a docked control has been successfully replaced with a new one</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ReplaceDockedControl.Control">
        <short>The old control that was previously docked at this site</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ReplaceDockedControl.NewDockSite">
        <short>The new site for docking; used if DropControl is <B>nil</B></short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ReplaceDockedControl.DropControl">
        <short>The control site to be used for docking, unless it is <B>nil</B> when it is igored. Passed straight through as an argument to ManualDock</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.ReplaceDockedControl.ControlSide">
        <short>The side to which the new control is to be aligned; passed straight through as an argument to ManualDock</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.Dragging">
        <short>Returns True if the control is being dragged</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.Dragging.Result">
        <short>Returns True if the control is being dragged</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AdjustSize">
        <descr>
          <pre>{------------------------------------------------------------------------------
  TControl.AdjustSize

  Calls DoAutoSize smart.
  During loading and handle creation the calls are delayed.

  This method does the same as TWinControl.DoAutoSize at the beginning.
  But since DoAutoSize is commonly overriden by existing Delphi components,
  they do not all tests, which can result in too much overhead. To reduce this
  the LCL calls AdjustSize instead.
------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.AutoSizeDelayed">
        <short>Auto-sizing has been delayed until some other process is complete</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.AutoSizeDelayed.Result">
        <short>Returns True if auto-sizing has been delayed</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AnchorToNeighbour">
        <short>AnchorToNeighbour - anchoring instructions</short>
        <descr>
          <pre>{------------------------------------------------------------------------------
  procedure TControl.AnchorToNeighbour(Side: TAnchorKind; Space: integer;
    Sibling: TControl);

  Setup AnchorSide to anchor one side to the side of a neighbour sibling.
  For example Right side to Left side, or Top side to Bottom.
 ------------------------------------------------------------------------------}</pre>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorToNeighbour.Side">
        <short>The side on which we should anchor</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorToNeighbour.Space">
        <short>The size of the space to be left around the control when anchoring</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorToNeighbour.Sibling">
        <short>The sibling control to which we should anchor</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AnchorParallel">
        <short>AnchorParallel - instructions for anchoring beside another control</short>
        <descr>Sibling - another control beside which the current control is to be anchored</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorParallel.Side">
        <short>The side on which we should anchor to the sibling</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorParallel.Space">
        <short>The size of the space to be left around the control when anchoring</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorParallel.Sibling">
        <short>The sibling control to which we should anchor in a parallel manner</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AnchorHorizontalCenterTo">
        <short>AnchorHorizontal - instructions for anchoring</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorHorizontalCenterTo.Sibling">
        <short>Another control to which the current control is to be anchored, centred horizontally</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AnchorVerticalCenterTo">
        <short>AnchorVertical - instructions for anchoring</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorVerticalCenterTo.Sibling">
        <short>Another control to which the current control is to be anchored, centred vertically</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetBounds">
        <short>Sets the boundaries defining the position of the current control</short>
        <descr>Height, Width, and position of Top Left pixel</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBounds.aLeft">
        <short>The X co-ordinate of the top left pixel of the control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBounds.aTop">
        <short>The Y co-ordinate of the top left pixel of the control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBounds.aWidth">
        <short>The width of the control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBounds.aHeight">
        <short>The height of the control</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetInitialBounds">
        <short>Sets the bounds of the control initially, when it is created</short>
        <descr>Checks that this is a new control, <br/>then calls SetBounds to set up coordinates defining its position</descr>
        <seealso><link id="SetBounds"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetInitialBounds.aLeft">
        <short>X co-ordinate of top left pixel</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetInitialBounds.aTop">
        <short>Y co-ordinate of top left pixel</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetInitialBounds.aWidth">
        <short>Width of control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetInitialBounds.aHeight">
        <short>Height of control</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetBoundsKeepBase">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsKeepBase.aLeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsKeepBase.aTop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsKeepBase.aWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsKeepBase.aHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetBoundsKeepBase.Lock"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.GetPreferredSize">
        <short>Returns default/preferred height and width, to be used in autosizing algorithms</short>
        <descr>
          <pre>{------------------------------------------------------------------------------
  procedure TControl.GetPreferredSize(
    var PreferredWidth, PreferredHeight: integer; Raw: boolean;
    WithThemeSpace: Boolean);
    
  Returns the default/preferred width and height for a control, which is used
  by the LCL autosizing algorithms as default size. Only positive values are
  valid. Negative or 0 are treated as undefined and the LCL uses other sizes
  instead.

  Raw: If not Raw then the values will be adjusted by the constraints and
  undefined values will be replaced by the current width and height.

  WithThemeSpace: If true, adds space for stacking. For example: TRadioButton
  has a minimum size. But for stacking multiple TRadioButtons there should be
  some space around. This space is theme dependent, so it passed parameter to
  the widgetset.

  TWinControl overrides this and asks the interface for theme dependent values.
  See TWinControl.GetPreferredSize for more information.
 ------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetPreferredSize.PreferredWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetPreferredSize.PreferredHeight"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetPreferredSize.Raw"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.InvalidatePreferredSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControl.Create">
        <short>Create a new Control</short>
        <seealso><link id="#rtl.Classes.TComponent.Create"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TControl.Destroy">
        <short>Destroy the Control when you have finished with it</short>
        <seealso><link id="#rtl.Classes.TComponent.Destroy"/></seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.EditingDone">
        <short>What to do when you have finished editing</short>
        <descr>
          <pre>TControl.EditingDone
  
  Called when user has finished editing. This procedure can be used by data
  links to commit the changes.
  For example:
  - When focus switches to another control (default)
  - When user selected another item
  It's totally up to the control, what events will commit.
</pre>
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.ExecuteDefaultAction">
        <short>What to do when the RETURN button is pressed, signifying default action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.ExecuteCancelAction">
        <short>What to do when ESCAPE is hit (or the CANCEL button is selected) - signifying CANCEL</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.BeginDrag">
        <descr>
          <pre>{------------------------------------------------------------------------------
  Method: TControl.BeginDrag
  Params: Immediate: Drag behaviour
          Threshold: distance to move before dragging starts
                     -1 uses the default value of Mouse.DragThreshold
  Returns: Nothing

  Starts the dragging of a control. If the Immediate flag is set, dragging
  starts immediately.
 ------------------------------------------------------------------------------}
</pre>
        </descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.BeginDrag.Immediate">
        <short>If True, start drag as soon as cursor starts to move</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.BeginDrag.Threshold">
        <short>Least value for movement of cursor before drag starts</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.BeginDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.BeginDrag.Immediate">
        <short>If True, start drag as soon as cursor starts to move</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.BringToFront">
        <short>Bring the control to the front of the viewed screen</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.ColorIsStored">
        <short>Colour is stored</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ColorIsStored.Result">
        <short>Function returns True if colour has been stored</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.HasParent">
        <short>This control has a parent</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.HasParent.Result">
        <short>Function returns True if there is a parent</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.IsParentOf">
        <short>This control is the parent of another control</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsParentOf.Result">
        <short>Function returns True if this control is a parent, ie there is a child control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.IsParentOf.AControl">
        <short>The control of which this control is a parent (ie the Child control)</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.IsVisible">
        <short>The control is visible on the current desktop</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.IsVisible.Result">
        <short>Function returns True is control is visible</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Hide">
        <short>Hide this control</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Refresh">
        <short>Refresh the data on this control</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Repaint">
        <short>Repaint the control, ie refill its canvas</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Invalidate">
        <short>Render this control non-valid</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AddControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.CheckChildClassAllowed">
        <short>Function checks whether a particular child class is allowed</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.CheckChildClassAllowed.Result">
        <short>Function returns True if child class has been checked and is allowed</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CheckChildClassAllowed.ChildClass">
        <short>The child class which is being checked to see whether it is allowed</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CheckChildClassAllowed.ExceptionOnInvalid">
        <short>Boolean set to True if a non-valid class is found and an exception has been raised</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.CheckNewParent">
        <short>Checks a new parent for this control</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.CheckNewParent.AParent">
        <short>The new parent associated with this control</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SendToBack">
        <short>Send to back, ie place this control behind all other controls in the current screen; it will not be visible unless the controls in front are transparent</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetTempCursor">
        <short>Sets a temporary cursor</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetTempCursor.Value">
        <short>The temporary cursor which has been set</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.UpdateRolesForForm">
        <short>Update the roles for this form; see whether there have been any changes in its role</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.GetTextBuf">
        <short>Gets text associated with the control from a buffer</short>
        <descr>
          <pre>* The VCL implementation relies on the virtual Get/SetTextBuf to 
 * exchange text between widgets and VCL. This means a lot of 
 * (unnecesary) text copies.
 * The LCL uses strings for exchanging text (more efficient).
 * To maintain VCL compatibility, the virtual RealGet/SetText is
 * introduced. These functions interface with the LCLInterface. The
 * default Get/SetTextbuf implementation calls the RealGet/SetText.
 * As long as the Get/SetTextBuf isn't overridden Get/SetText 
 * calls RealGet/SetText to avoid PChar copying.
 * To keep things optimal, LCL implementations should always 
 * override RealGet/SetText. Get/SetTextBuf is only kept for
 * compatibility.
</pre>
        </descr>
        <seealso>
          <link id="RealGetText"/>
          <link id="GetText"/>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetTextBuf.Result">
        <short>Pointer to the buffer containing the text</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetTextBuf.Buffer">
        <short>Pointer to the buffer containing the string</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.GetTextBuf.BufSize">
        <short>Length of the buffer</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.GetTextLen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.GetTextLen.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetTextBuf">
        <short>Stores text associated with the control in a buffer</short>
        <descr>
          <pre>* The VCL implementation relies on the virtual Get/SetTextBuf to 
 * exchange text between widgets and VCL. This means a lot of 
 * (unnecesary) text copies.
 * The LCL uses strings for exchanging text (more efficient).
 * To maintain VCL compatibility, the virtual RealGet/SetText is
 * introduced. These functions interface with the LCLInterface. The
 * default Get/SetTextbuf implementation calls the RealGet/SetText.
 * As long as the Get/SetTextBuf isn't overridden Get/SetText 
 * calls RealGet/SetText to avoid PChar copying.
 * To keep things optimal, LCL implementations should always 
 * override RealGet/SetText. Get/SetTextBuf is only kept for
 * compatibility.
</pre>
        </descr>
        <seealso>
          <link id="RealSetText"/>
          <link id="SetText"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetTextBuf.Buffer">
        <short>Pointer to the buffer where the text is to be stored</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControl.Perform">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.Perform.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.Perform.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.Perform.WParam"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.Perform.LParam"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.ScreenToClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ScreenToClient.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ScreenToClient.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.ClientToScreen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ClientToScreen.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ClientToScreen.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.ScreenToControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ScreenToControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ScreenToControl.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.ControlToScreen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ControlToScreen.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.ControlToScreen.APoint"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Show">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetZOrderPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetZOrderPosition.NewPosition"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.SetZOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.SetZOrder.TopMost"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.HandleObjectShouldBeVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.HandleObjectShouldBeVisible.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControl.ParentHandlesAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControl.ParentHandlesAllocated.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.InitiateAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControl.RemoveAllHandlersOfObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.RemoveAllHandlersOfObject.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AddHandlerOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandlerOnResize.OnResizeEvent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandlerOnResize.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.RemoveHandlerOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.RemoveHandlerOnResize.OnResizeEvent"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.AddHandlerOnChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandlerOnChangeBounds.OnChangeBoundsEvent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControl.AddHandlerOnChangeBounds.AsLast"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControl.RemoveHandlerOnChangeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.RemoveHandlerOnChangeBounds.OnChangeBoundsEvent"><short/></element>
      <!-- property Visibility: public -->
      <element name="TControl.Action">
        <short>The action to be associated with this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Can either read the action already associated with the control (GetAction), or write an action to be associated (SetAction)</descr>
        <seealso><link id="#rtl.Classes.TBasicAction"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Align">
        <short>Used to align the control in one of four directions.</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Either reads a flag containing alignment instructions (FAlign) or writes alignment instructions (SetAlign)<br/>
May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</descr>
        <seealso><link id="TAlign"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Anchors">
        <short>The set of anchor definitions for this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in IsAnchorsStored</descr>
        <seealso><link id="TAnchors"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.AnchorSide">
        <short>Finds which side to use for anchor</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Finds which side is to be used to anchor this control, and what relationships it has to other controls nearby. For complex relationships, use the Side property of the parent class TAnchorSide, and make a reference eg using asrCenter</descr>
        <seealso><link id="TAnchorSide"/></seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControl.AnchorSide.Kind"><short/></element>
      <!-- property Visibility: public -->
      <element name="TControl.BorderSpacing">
        <short>Determines the border spacing for this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing. <br/>
The properties are defined in the parent class TControlBorderSpacing</descr>
        <seealso><link id="TControlBorderSpacing"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.BoundsRect">
        <short>Determines the rectangle bounding this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Finds the values for the bounding rectangle, or sets the values.<br/>
Bounding rectangle (top-left, bottom-right) is defined in TRect</descr>
        <seealso><link id="#rtl.Classes.TRect"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.BoundsRectForNewParent">
        <short>//**QUESTION - why should we get/set bounds for new parent?</short>
        <descr>// standard properties, which should be supported by all descendants</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Caption">
        <short>Caption - the text-string appearing on the Control, usually used to identify its function</short>
        <descr>By default, the Caption appears the same as the control Name in the Object Inspector, <br/>and the developer needs to set it explicitly to some new text.<br/><br/>

Gets caption as a text-string (GetText), or stores the new caption (SetText). Shows flag if caption is stored (IsCaptionStored).<br/><br/><pre>* The VCL implementation relies on the virtual Get/SetTextBuf to 
 * exchange text between widgets and VCL. This means a lot of 
 * (unnecesary) text copies.
 * The LCL uses strings for exchanging text (more efficient).
 * To maintain VCL compatibility, the virtual RealGet/SetText is
 * introduced. These functions interface with the LCLInterface. The
 * default Get/SetTextbuf implementation calls the RealGet/SetText.
 * As long as the Get/SetTextBuf isn't overridden Get/SetText 
 * calls RealGet/SetText to avoid PChar copying.
 * To keep things optimal, LCL implementations should always 
 * override RealGet/SetText. Get/SetTextBuf is only kept for
 * compatibility.
 

</pre></descr>
        <seealso>
          <link id="GetText"/>
          <link id="SetText"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ClientHeight">
        <short>Determines the height of the client within which the control exists</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Finds or sets the client height, and sets a flag if it has been stored</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ClientOrigin">
        <short>Top left pixel of the client within which the control exists</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Finds origin of client (read-only)</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ClientRect">
        <short>Finds the position of the rectangle for the client within which the control exists</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads the coordinates of the client rectangle (read-only)</descr>
        <seealso><link id="#rtl.Classes.TRect"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ClientWidth">
        <short>Determines the width of the client within which the control exists</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads the width of the client control or sets the value. Sets flag if value is stored</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Color">
        <short>Determine the colour for the current control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads the value for colour, or stores the value, and sets a flag if the colour is stored. <br/>
The default colour is the same as the window in which the control is located.</descr>
        <seealso><link id="Graphics.TColor"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Constraints">
        <short>Determine constraints (max and min height and width) for this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads the size constraints or stores new ones.</descr>
        <seealso><link id="TSizeConstraints"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ControlOrigin">
        <short>Top left pixel of this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads value for the Origin (top left pixel) of this control. (read-only)</descr>
        <seealso><link id="#rtl.Classes.TPoint"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ControlState">
        <short>Whether mouse has been clicked, data being read, control being re-drawn, etc</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads or stores the state of the control.<br/></descr>
        <seealso><link id="TControlState"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ControlStyle">
        <short>Whether the control responds to mouse clicks, can be re-sized, has particular actions, etc</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads the stored style, or saves the new style</descr>
        <seealso><link id="TControlStyle"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Enabled">
        <short>Whether the control is enabled. If not, it usually appears 'greyed-out'</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads a flag to see whether the control is enabled, or stores a new value. If stored, sets a flag to say so.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Font">
        <short>The Font to be used for text in this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads a flag to see what font should be used, or sets a flag to store it. If stored, sets a flag to say so.<br/>
The properties of Font are defined in the parent class TFont</descr>
        <seealso><link id="Graphics.TFont"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.IsControl">
        <short>Reads or writes a flag to deterine whether this object is actually a control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads a logical (boolean) flag or sets it to determine whether this object is a control.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.MouseEntered">
        <short>Reads a flag to determine whether the mouse entered the control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads logical (boolean) flag to see whether mouse has entered the control</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.OnChangeBounds">
        <short>Event handler for a change in bounds of the control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if bounds are changed</descr>
        <seealso><link id="#rtl.Classes.TNotifyEvent"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.OnClick">
        <short>Event Handler for mouse click</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or writes a flag if  a mouse click is detected, and sets a flag if a value is stored.</descr>
        <seealso><link id="#rtl.Classes.TNotifyEvent"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.OnResize">
        <short>Event Handler for resize of control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads or Writes flag if control is re-sized.</descr>
        <seealso><link id="#rtl.Classes.TNotifyEvent"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.OnShowHint">
        <short>Event Handler when a hint needs to be shown</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads or Writes a flag when a hint (a small pop-up box, appearing when the mouse hovers over an object) is to be shown</descr>
        <seealso>
          <link id="THintInfo"/>
          <link id="TControShowHintEvent"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Parent">
        <short>Determine what is the parent for this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or writes a flag to find or store the identity of the parent for this control. The parent is of type TWincontrol</descr>
        <seealso><link id="TWinControl"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.PopupMenu">
        <short>Gets or writes the pop-up menu associated with this control</short>
        <descr>// standard properties, which should be supported by all descendants<br/> Reads the details of the pop-up menu, or stores them.<br/>Properties are defined in the parent class TPopupMenu</descr>
        <seealso><link id="Menus.TPopupMenu"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.ShowHint">
        <short>Flag to determine: Is hint to be displayed for this control?</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads flag or writes one to determine if a hint is to be shown when mouse hovers over this control. If value is stored, a storage flag is set. Display of the actual hint is controlled by OnShowHint</descr>
        <seealso><link id="OnShowHint"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Visible">
        <short>The Visible property represents the ability to see a visual control.</short>
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Setting Visible to True is equivalent to calling Show method.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso>
          <link id="TControl.IsVisible"/>
          <link id="TControl.Show"/>
          <link id="TControl.Hide"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.WindowProc">
        <short>Reads or writes a message associated with this window</short>
        <descr>// standard properties, which should be supported by all descendants<br/>Reads message from flag area, or stores a message</descr>
        <seealso>
          <link id="TWndMethod"/>
          <link id="Messages.TLMessage"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.DockOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.Floating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.FloatingDockSiteClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.HostDockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.LRDockWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.TBDockHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.UndockHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControl.UndockWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.AnchorSideLeft">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.AnchorSideTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.AnchorSideRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.AnchorSideBottom">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.HelpType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.HelpKeyword">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControl.HelpContext">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetChildProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGetChildProc.Child"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TChildControlEnlargeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlEnlargeStyle.cesAnchorAligning"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlEnlargeStyle.cesScaleChilds"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlEnlargeStyle.cesHomogenousChildGrowth"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlEnlargeStyle.cesHomogenousSpaceGrowth"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TChildControlShrinkStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlShrinkStyle.cssAnchorAligning"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlShrinkStyle.cssScaleChilds"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TChildControlShrinkStyle.cssHomogenousChildDecrease"><short/></element>
      <!-- object Visibility: default -->
      <element name="TControlChildSizing">
        <short>How Child controls are to be sized relative to parent</short>
        <descr>
          <code>{ TControlChildSizing }


  { LeftRightSpacing, TopBottomSpacing: integer;
        minimum space between left client border and left most children.
        For example: ClientLeftRight=5 means child's Left position is at least 5.

    HorizontalSpacing, VerticalSpacing: integer;
        minimum space between each child horizontally
  }

  {   Defines how child controls are resized/aligned.

      cesAnchorAligning, cssAnchorAligning
        Anchors and Align work like Delphi. For example if Anchors property of
        the control is [akLeft], it means fixed distance between left border of
        parent's client area. [akRight] means fixed distance between right
        border of the control and the right border of the parent's client area.
        When the parent is resized the child is moved to keep the distance.
        [akLeft,akRight] means fixed distance to left border and fixed distance
        to right border. When the parent is resized, the controls width is
        changed (resized) to keep the left and right distance.
        Same for akTop,akBottom.

        Align=alLeft for a control means set Left leftmost, Top topmost and
        maximize Height. The width is kept, if akRight is not set. If akRight
        is set in the Anchors property, then the right distance is kept and
        the control's width is resized.
        If there several controls with Align=alLeft, they will not overlapp and
        be put side by side.
        Same for alRight, alTop, alBottom. (Always expand 3 sides).

        Align=alClient. The control will fill the whole remaining space.
        Setting two children to Align=alClient does only make sense, if you set
        maximum Constraints.

        Order: First all alTop children are resized, then alBottom, then alLeft,
        then alRight and finally alClient.

      cesScaleChilds, cssScaleChilds
        Scale children, keep space between them fixed.
        Children are resized to their normal/advised size. If there is some space
        left in the client area of the parent, then the children are scaled to
        fill the space. You can set maximum Constraints. Then the other children
        are scaled more.
        For example: 3 child controls A, B, C with A.Width=10, B.Width=20 and
        C.Width=30 (total=60). If the Parent's client area has a ClientWidth of
        120, then the children are scaled with Factor 2.
        If B has a maximum constraint width of 30, then first the children will be
        scaled with 1.5 (A.Width=15, B.Width=30, C.Width=45). Then A and C
        (15+45=60 and 30 pixel space left) will be scaled by 1.5 again, to a
        final result of: A.Width=23, B.Width=30, C.Width=67 (23+30+67=120).

      cesHomogenousChildGrowth, cssHomogenousChildDecrease
        Enlarge children equally.
        Children are resized to their normal/advised size. If there is some space
        left in the client area of the parent, then the remaining space is
        distributed equally to each child.
        For example: 3 child controls A, B, C with A.Width=10, B.Width=20 and
        C.Width=30 (total=60). If the Parent's client area has a ClientWidth of
        120, then 60/3=20 is added to each Child.
        If B has a maximum constraint width of 30, then first 10 is added to
        all childs (A.Width=20, B.Width=30, C.Width=40). Then A and C
        (20+40=60 and 30 pixel space left) will get 30/2=15 additional,
        resulting in: A.Width=35, B.Width=30, C.Width=55 (35+30+55=120).

      cesHomogenousSpaceGrowth
        Enlarge space between children equally.
        Children are resized to their normal/advised size. If there is some space
        left in the client area of the parent, then the space between the children
        is expanded.
        For example: 3 child controls A, B, C with A.Width=10, B.Width=20 and
        C.Width=30 (total=60). If the Parent's client area has a ClientWidth of
        120, then there will be 60/2=30 space between A and B and between
        B and C.
  }

</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FEnlargeHorizontal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FEnlargeVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FHorizontalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FLeftRightSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FShrinkHorizontal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FShrinkVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FTopBottomSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlChildSizing.FVerticalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetEnlargeHorizontal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetEnlargeHorizontal.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetEnlargeVertical">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetEnlargeVertical.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetHorizontalSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetHorizontalSpacing.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetLeftRightSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetLeftRightSpacing.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetShrinkHorizontal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetShrinkHorizontal.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetShrinkVertical">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetShrinkVertical.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetTopBottomSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetTopBottomSpacing.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TControlChildSizing.SetVerticalSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.SetVerticalSpacing.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TControlChildSizing.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlChildSizing.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.Create.OwnerControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControlChildSizing.Assign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.Assign.Source"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TControlChildSizing.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.AssignTo.Dest"><short/></element>
      <!-- function Visibility: public -->
      <element name="TControlChildSizing.IsEqual">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlChildSizing.IsEqual.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TControlChildSizing.IsEqual.Sizing"><short/></element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.EnlargeHorizontal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.EnlargeVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.ShrinkHorizontal">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlChildSizing.ShrinkVertical">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlChildSizing.LeftRightSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlChildSizing.TopBottomSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlChildSizing.HorizontalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlChildSizing.VerticalSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TWinControlActionLink">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControlActionLink.AssignClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControlActionLink.AssignClient.AClient"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControlActionLink.IsHelpContextLinked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControlActionLink.IsHelpContextLinked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControlActionLink.SetHelpContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControlActionLink.SetHelpContext.Value"><short/></element>
      <!-- "class of" type Visibility: default -->
      <element name="TWinControlActionLinkClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TWinControlFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfClientRectNeedsUpdate"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfColorChanged"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfFontChanged"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfReAlignNeeded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfAligningControls"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfEraseBackground"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfAutoSizeNeeded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfCreatingHandle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfInitializing"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWinControlFlag.wcfCreatingChildHandles"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TWinControlFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TWinControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FAlignLevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FBoundsLockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FBoundsRealized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FAdjustClientRectRealized">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FDefWndProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FDockClients">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FDoubleBuffered">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FDockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FDockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FWinControlFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FOnUTF8KeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FParentWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FRealizeBoundsLockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FHandle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FShowing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FTabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FTabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FTabList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FUseDockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWinControl.FWinControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.AlignControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.AlignControl.AControl"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetBrush.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetControl.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetControlCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetControlCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetDockClientCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetDockClientCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetDockClients">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetDockClients.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetDockClients.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetHandle.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetIsResizing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetIsResizing.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetTabOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetTabOrder.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.GetVisibleDockClientCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetVisibleDockClientCount.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetChildSizing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetChildSizing.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetDockSite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetDockSite.NewDockSite"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetHandle.NewHandle"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetBorderWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBorderWidth.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetParentCtl3D">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetParentCtl3D.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetTabOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetTabOrder.NewTabOrder"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetTabStop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetTabStop.NewTabStop"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.SetUseDockManager">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetUseDockManager.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWinControl.UpdateTabOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.UpdateTabOrder.NewTabOrder"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWinControl.WantsKeyBeforeInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.WantsKeyBeforeInterface.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WantsKeyBeforeInterface.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WantsKeyBeforeInterface.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.AssignTo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.AssignTo.Dest"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ActionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ActionChange.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ActionChange.CheckDefaults"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetActionLinkClass">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetActionLinkClass.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.AdjustClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.AdjustClientRect.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.AlignControls">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.AlignControls.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.AlignControls.RemainingClientRect"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoAlignChildControls">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoAlignChildControls.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAlignChildControls.TheAlign"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAlignChildControls.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAlignChildControls.AControlList"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAlignChildControls.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoChildSizingChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoChildSizingChange.Sender"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.CanTab.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoDragMsg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDragMsg.DragMsg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CMDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CMDrag.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CMShowingChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CMShowingChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CMVisibleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CMVisibleChanged.TheMessage"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.ContainsControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ContainsControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ContainsControl.Control"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ControlsAligned">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoSendBoundsToInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.RealizeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CreateSubClass">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CreateSubClass.Params"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CreateSubClass.ControlClassName"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DestroyComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoConstraintsChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoConstraintsChange.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoSetBounds.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoSetBounds.ATop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoSetBounds.AWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoSetBounds.AHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CalculatePreferredSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CalculatePreferredSize.PreferredWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CalculatePreferredSize.PreferredHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.GetChildBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetChildBounds.ChildBounds"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetChildBounds.WithBorderSpace"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.GetChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetChildren.Proc"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetChildren.Root"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ChildClassAllowed.ChildClass"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.PaintControls">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.PaintControls.DC"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.PaintControls.First"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.PaintHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.PaintHandler.TheMessage"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.PaintWindow.DC"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CreateBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CMEnabledChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CMEnabledChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CMShowHintChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CMShowHintChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMEraseBkgnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMEraseBkgnd.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMNotify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMNotify.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMSetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMSetFocus.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMKillFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMKillFocus.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMShowWindow.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMEnter.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMExit.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMMouseWheel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMMouseWheel.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMKeyDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMSysKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMSysKeyDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMKeyUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMSysKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMSysKeyUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMSysChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMSysChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMPaint.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMDestroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMDestroy.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMMove.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WMSize.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNKeyDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNSysKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNSysKeyDown.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNKeyUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNSysKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNSysKeyUp.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CNSysChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CNSysChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoAddDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAddDockClient.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoAddDockClient.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DockOver">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockOver.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockOver.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockOver.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockOver.State"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockOver.Accept"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoDockOver">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDockOver.Source"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDockOver.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDockOver.Y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDockOver.State"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoDockOver.Accept"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoRemoveDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoRemoveDockClient.Client"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoUnDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoUnDock.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoUnDock.NewTarget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoUnDock.Client"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.GetSiteInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetSiteInfo.Client"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetSiteInfo.InfluenceRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetSiteInfo.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetSiteInfo.CanDock"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ReloadDockedControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ReloadDockedControl.AControlName"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ReloadDockedControl.AControl"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.CreateDockManager">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.CreateDockManager.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoExit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoMouseWheel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoMouseWheel.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheel.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheel.WheelDelta"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheel.MousePos"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoMouseWheelDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoMouseWheelDown.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheelDown.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheelDown.MousePos"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoMouseWheelUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoMouseWheelUp.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheelUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoMouseWheelUp.MousePos"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoKeyDownBeforeInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoKeyDownBeforeInterface.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoKeyDownBeforeInterface.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoRemainingKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoRemainingKeyDown.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoRemainingKeyDown.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoRemainingKeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoRemainingKeyPress.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoRemainingKeyPress.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoRemainingKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoRemainingKeyUp.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoRemainingKeyUp.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoKeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoKeyPress.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoKeyPress.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoUTF8KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoUTF8KeyPress.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoUTF8KeyPress.UTF8Key"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DoKeyUpBeforeInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DoKeyUpBeforeInterface.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DoKeyUpBeforeInterface.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.ChildKey">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ChildKey.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ChildKey.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.DialogChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.DialogChar.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DialogChar.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ControlKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlKeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlKeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ControlKeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlKeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlKeyUp.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDown.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyDownBeforeInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDownBeforeInterface.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDownBeforeInterface.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyDownAfterInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDownAfterInterface.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyDownAfterInterface.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyPress.Key"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUp.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyUpBeforeInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUpBeforeInterface.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUpBeforeInterface.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.KeyUpAfterInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUpAfterInterface.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.KeyUpAfterInterface.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.UTF8KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.UTF8KeyPress.UTF8Key"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.FindNextControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.FindNextControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FindNextControl.CurrentControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FindNextControl.GoForward"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FindNextControl.CheckTabStop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FindNextControl.CheckParent"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.RealGetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.RealGetText.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetBorderStyle.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetChildsRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetChildsRect.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetChildsRect.Scrolled"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetClientOrigin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetClientOrigin.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetClientRect.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetControlOrigin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetControlOrigin.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.GetDeviceContext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetDeviceContext.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetDeviceContext.WindowHandle"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.IsControlMouseMsg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.IsControlMouseMsg.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.IsControlMouseMsg.TheMessage"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWinControl.ParentHandlesAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ParentHandlesAllocated.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CreateHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CreateParams.Params"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.DoFlipChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.FixupTabList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.FontChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FontChanged.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.MainWndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.MainWndProc.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ParentFormHandleInitialized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ChildHandlesCreated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ReAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.RealSetText.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.RemoveFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.RemoveFocus.Removing"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.SendMoveSizeMessages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SendMoveSizeMessages.SizeChanged"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SendMoveSizeMessages.PosChanged"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.SetBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBorderStyle.NewStyle"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.SetColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetColor.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.SetZOrder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetZOrder.Topmost"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.SetZOrderPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetZOrderPosition.NewPosition"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.ShowControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ShowControl.AControl"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.UpdateControlState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.UpdateShowing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWinControl.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.WndProc.Message"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TWinControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TWinControl.OnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.BoundsLockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.Brush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.CachedClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.CachedClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.ControlCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Controls.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DefWndProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DockClientCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DockClients">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockClients.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.DoubleBuffered">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.IsResizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.TabStop">
        <short>Determines if the user can tab to a control.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.OnUTF8KeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.Showing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.UseDockManager">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWinControl.VisibleDockClientCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.AdjustSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWinControl.AutoSizeDelayed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.AutoSizeDelayed.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.BeginUpdateBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.EndUpdateBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.LockRealizeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.UnlockRealizeBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWinControl.ControlAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ControlAtPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.Pos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.AllowDisabled"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.ControlAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ControlAtPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.Pos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.AllowDisabled"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.AllowWinControls"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.ControlAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ControlAtPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.Pos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.AllowDisabled"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.AllowWinControls"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlAtPos.OnlyClientAreas"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.DoAdjustClientRectChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.InvalidateClientRectCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.InvalidateClientRectCache.WithChildControls"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.ClientRectNeedsInterfaceUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ClientRectNeedsInterfaceUpdate.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.SetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBounds.aLeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBounds.aTop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBounds.aWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetBounds.aHeight"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TWinControl.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Create.TheOwner"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TWinControl.CreateParented">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CreateParented.ParentWindow"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.CreateParentedControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.CreateParentedControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.CreateParentedControl.ParentWindow"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TWinControl.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.DockDrop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockDrop.DockObject"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockDrop.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DockDrop.Y"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.CanFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.CanFocus.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.GetControlIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetControlIndex.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetControlIndex.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.SetControlIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetControlIndex.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SetControlIndex.NewIndex"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.Focused">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.Focused.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.PerformTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.PerformTab.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.PerformTab.ForwardTab"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.ControlByName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.ControlByName.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.ControlByName.ControlName"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.SelectNext">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SelectNext.CurControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SelectNext.GoForward"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.SelectNext.CheckTabStop"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.BroadCast">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.BroadCast.ToAllMessage"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.NotifyControls">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.NotifyControls.Msg"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.DefaultHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.DefaultHandler.AMessage"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.DisableAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.EnableAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWinControl.GetTextLen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.GetTextLen.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.Invalidate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.InsertControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.InsertControl.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.InsertControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.InsertControl.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.InsertControl.Index"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.RemoveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.RemoveControl.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Insert.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Insert.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Insert.Index"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.Remove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.Remove.AControl"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.Repaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWinControl.FindChildControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.FindChildControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FindChildControl.ControlName"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.FlipChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.FlipChildren.AllLevels"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.GetTabOrderList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.GetTabOrderList.List"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.HandleAllocated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.HandleAllocated.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.HandleNeeded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWinControl.BrushCreated">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.BrushCreated.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWinControl.EraseBackground">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.EraseBackground.DC"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWinControl.IntfUTF8KeyPress">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWinControl.IntfUTF8KeyPress.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.IntfUTF8KeyPress.UTF8Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWinControl.IntfUTF8KeyPress.RepeatCount"><short/></element>
      <!-- object Visibility: default -->
      <element name="TGraphicControl">
        <short>TGraphicControl is the base class for all lightweight controls.</short>
        <descr>
          <pre>TGraphicControl supports simple lightweight controls that do not 
need the ability to accept keyboard input or contain other controls.  Since 
lightweight controls do not wrap GUI screen objects, they are faster and use 
fewer resources than controls based on TWinControl.
          TGraphicControl provides a Canvas property for access to the 
control's drawing surface and a virtual Paint method called in response to 
paint requests received by the parent control.</pre>
        </descr>
        <seealso>
          <link id="TWinControl"/>
          <link id="TWinControl.Canvas"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphicControl.FCanvas">
        <short>A reference to the parents Canvas.</short>
        <descr>The canvas isn't "owned" by the TGraphicControl, but by its parent.</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGraphicControl.FOnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TGraphicControl.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphicControl.WMPaint.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TGraphicControl.Paint">
        <short>Virtual Paint method called in response to paint requests.</short>
        <descr>Virtual Paint method called in response to paint requests received by the parent control.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TGraphicControl.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGraphicControl.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TGraphicControl.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphicControl.Canvas">
        <short>A clipping window to the parent canvas.</short>
        <descr>
          <pre>The TGraphicsControl.Canvas is a clipping window to the parent 
canvas.
          If you ask for the Canvas.Width or Canvas.Height, you are actually 
getting the parent control's Canvas dimensions. To get the dimensions of the 
TGraphicControl, you must query the ClientRect.</pre>
        </descr>
        <seealso><link id="TGraphicControl.FCanvas"/></seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TGraphicControl.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomControl">
        <short>TCustomControl - the base class for window controls</short>
        <descr>Contains simple basic definitions to create, destroy and paint window controls and set basic properties like canvas and border</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomControl.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomControl.FOnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomControl.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomControl.WMPaint.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomControl.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomControl.PaintWindow.DC"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomControl.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomControl.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomControl.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomControl.DestroyComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomControl.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomControl.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomControl.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TImageList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImageList.BkColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImageList.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImageList.Masked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImageList.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImageList.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlPropertyStorage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlPropertyStorage.GetPropertyList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlPropertyStorage.GetPropertyList.List"><short/></element>
      <!-- object Visibility: default -->
      <element name="TDockZone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FChildControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FChildCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FFirstChildZone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FZoneLimit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FParentZone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FNextSibling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockZone.FPrevSibling">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetHeight.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetLeft.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetLimitBegin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetLimitBegin.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetLimitSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetLimitSize.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetTop.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetVisible.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetVisibleChildCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetVisibleChildCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetWidth.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetZoneLimit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetZoneLimit.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TDockZone.SetZoneLimit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockZone.SetZoneLimit.AValue"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.IsOrientationValid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.IsOrientationValid.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TDockZone.GetNextVisibleZone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.GetNextVisibleZone.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TDockZone.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockZone.Create.TheTree"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDockZone.ExpandZoneLimit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockZone.ExpandZoneLimit.NewLimit"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDockZone.FirstVisibleChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.FirstVisibleChild.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDockZone.NextVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.NextVisible.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDockZone.PrevVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockZone.PrevVisible.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDockZone.ResetChildren">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDockZone.ResetZoneLimits">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDockZone.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Tree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.ChildCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.LimitBegin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.LimitSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.VisibleChildCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDockZone.ZoneLimit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TDockZoneClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TForEachZoneProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TForEachZoneProc.Zone"><short/></element>
      <!-- "class of" type Visibility: default -->
      <element name="TDockTreeClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDockTreeFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockTreeFlag.dtfUpdateAllNeeded"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TDockTreeFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDockTree">
        <short>TDockTree</short>
        <descr>
          <code>{ TDockTree - a tree of TDockZones - Every docked window has one tree

  
    This is an abstract class. The real implementation is in ldocktree.pas.

    Docking means here: Combining several windows to one. A window can here be
    a TCustomForm or a floating control (undocked) or a TDockForm.
    A window can be docked to another to the left, right, top, bottom or "into".
    The docking source window will be resized, to fit to the docking target
    window.

    Example1: Docking "A" (source window) left to "B" (target window)
    
       +---+    +----+
       | A | -&gt; | B  |
       +---+    |    |
                +----+
      Result: A new docktree will be created. Height of "A" will be resized to
              the height of "B".
              A splitter will be inserted between "A" and "B".
              And all three are children of the newly created TLazDockForm of the
              newly created TDockTree.
      
       +------------+
       |+---+|+----+|
       || A ||| B  ||
       ||   |||    ||
       |+---+|+----+|
       +------------+

      If "A" or "B" were floating controls, the floating dock sites are freed.
      If "A" or "B" were forms, their decorations (title bars and borders) are
      replaced by docked decorations.
      If "A" had a TDockTree, it is freed and its child dockzones are merged to
      the docktree of "B". Analog for docking "C" left to "A":
      
       +------------------+
       |+---+|+---+|+----+|
       || C ||| A ||| B  ||
       ||   |||   |||    ||
       |+---+|+---+|+----+|
       +------------------+
       

      
    Example2: Docking A into B
                +-----+
       +---+    |     |
       | A | ---+-&gt; B |
       +---+    |     |
                +-----+

      Result: A new docktree will be created. "A" will be resized to the size
              of "B". Both will be put into a TLazDockPages control which is the
              child of the newly created TDockTree.
              
       +-------+
       |[B][A] |
       |+-----+|
       ||     ||
       || A   ||
       ||     ||
       |+-----+|
       +-------+

    Every DockZone has siblings and children. Siblings can either be
    - horizontally (left to right, splitter),
    - vertically (top to bottom, splitter)
    - or upon each other (as pages, left to right).


    InsertControl - undock control and dock it into the manager. For example
                    dock Form1 left to a Form2:
                    InsertControl(Form1,alLeft,Form2);
                    To dock "into", into a TDockPage, use Align=alNone.
    PositionDockRect - calculates where a control would be placed, if it would
                       be docked via InsertControl.
    RemoveControl - removes a control from the dock manager.

    GetControlBounds - TODO for Delphi compatibility
    ResetBounds - TODO for Delphi compatibility
    SetReplacingControl - TODO for Delphi compatibility
    PaintSite - TODO for Delphi compatibility

</code>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FDockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FDockZoneClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FGrabberSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FGrabbersOnTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FTopZone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FTopXYLimit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDockTree.FUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TDockTree.DeleteZone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.DeleteZone.Zone"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.AdjustDockRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.AdjustDockRect.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.AdjustDockRect.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.BeginUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.EndUpdate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.GetControlBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.GetControlBounds.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.GetControlBounds.ControlBounds"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TDockTree.HitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDockTree.HitTest.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.HitTest.MousePos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.HitTest.HTFlag"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.InsertControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.InsertControl.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.InsertControl.InsertAt"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.InsertControl.DropControl"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.LoadFromStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.LoadFromStream.SrcStream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.PaintDockFrame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PaintDockFrame.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PaintDockFrame.AControl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PaintDockFrame.ARect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.PositionDockRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PositionDockRect.AClient"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PositionDockRect.DropCtl"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PositionDockRect.DropAlign"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PositionDockRect.DockRect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.RemoveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.RemoveControl.AControl"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.SaveToStream">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.SaveToStream.DestStream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.SetReplacingControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.SetReplacingControl.AControl"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.ResetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.ResetBounds.Force"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TDockTree.UpdateAll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TDockTree.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDockTree.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.Create.TheDockSite"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TDockTree.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDockTree.PaintSite">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockTree.PaintSite.DC"><short/></element>
      <!-- property Visibility: public -->
      <element name="TDockTree.DockZoneClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TMouse.FCapture">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TMouse.FDragImmediate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TMouse.FDragThreshold">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="TMouse.SetCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouse.SetCapture.Value"><short/></element>
      <!-- function Visibility: default -->
      <element name="TMouse.GetCapture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouse.GetCapture.Result"><short/></element>
      <!-- function Visibility: default -->
      <element name="TMouse.GetCursorPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouse.GetCursorPos.Result"><short/></element>
      <!-- function Visibility: default -->
      <element name="TMouse.GetIsDragging">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouse.GetIsDragging.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TMouse.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TMouse.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMouse.Capture">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMouse.CursorPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMouse.DragImmediate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMouse.DragThreshold">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMouse.IsDragging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="AnchorAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultSideForAnchorKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="AnchorReferenceSide">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="AlignNames">
        <short>the strings that appear, eg in the Object Inspector, to describe the possible types of alignments</short>
      </element>
      <!-- function Visibility: default -->
      <element name="FindDragTarget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindDragTarget.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindDragTarget.Position"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindDragTarget.AllowDisabled"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindControlAtPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindControlAtPosition.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindControlAtPosition.Position"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindControlAtPosition.AllowDisabled"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindLCLWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindLCLWindow.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindLCLWindow.ScreenPos"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindControl.Handle"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindOwnerControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindOwnerControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindOwnerControl.Handle"><short/></element>
      <!-- function Visibility: default -->
      <element name="FindLCLControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindLCLControl.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="FindLCLControl.ScreenPos"><short/></element>
      <!-- function Visibility: default -->
      <element name="SendAppMessage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SendAppMessage.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="SendAppMessage.Msg"><short/></element>
      <!-- argument Visibility: default -->
      <element name="SendAppMessage.WParam"><short/></element>
      <!-- argument Visibility: default -->
      <element name="SendAppMessage.LParam"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="MoveWindowOrg">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrg.dc"><short/></element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrg.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="MoveWindowOrg.Y"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="RecreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="RecreateWnd.AWinControl"><short/></element>
      <!-- variable Visibility: default -->
      <element name="DefaultDockTreeClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="SetCaptureControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SetCaptureControl.Control"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetCaptureControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetCaptureControl.Result"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="CancelDrag">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="DragDone">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DragDone.Drop"><short/></element>
      <!-- variable Visibility: default -->
      <element name="NewStyleControls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Mouse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="CursorToString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CursorToString.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="CursorToString.Cursor"><short/></element>
      <!-- function Visibility: default -->
      <element name="StringToCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="StringToCursor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="StringToCursor.S"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="GetCursorValues">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetCursorValues.Proc"><short/></element>
      <!-- function Visibility: default -->
      <element name="CursorToIdent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CursorToIdent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="CursorToIdent.Cursor"><short/></element>
      <!-- argument Visibility: default -->
      <element name="CursorToIdent.Ident"><short/></element>
      <!-- function Visibility: default -->
      <element name="IdentToCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="IdentToCursor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToCursor.Ident"><short/></element>
      <!-- argument Visibility: default -->
      <element name="IdentToCursor.Cursor"><short/></element>
      <!-- function Visibility: default -->
      <element name="GetKeyShiftState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetKeyShiftState.Result"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="AdjustBorderSpace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.RemainingClientRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.CurBorderSpace"><short/></element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.Left"><short/></element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.Top"><short/></element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.Right"><short/></element>
      <!-- argument Visibility: default -->
      <element name="AdjustBorderSpace.Bottom"><short/></element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- Controls -->
  </package>
</fpdoc-descriptions>
