<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    StdCtrls
  ====================================================================
-->
    <module name="StdCtrls">
      <short>Contains Class definitions of several Standard Controls used in the Lazarus IDE</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphMath">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ExtendedStrings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssVertical"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssBoth"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoHorizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoVertical"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollStyle.ssAutoBoth"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollCode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scLineUp"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scLineDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPageUp"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPageDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scPosition"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scTrack"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollCode.scEndScroll"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TScrollEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.ScrollCode"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.ScrollPos"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomScrollBar">
        <short>Custom Scroll Bar</short>
        <descr>Custom Scroll Bar:  the base type from which Control Bars are derived</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FRTLFactor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FSmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FLargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.DoScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.DoScroll.Message"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomScrollBar.NotRightToLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBar.NotRightToLeft.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetKind">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetKind.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMax.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMin.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPosition.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPageSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPageSize.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNHScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNHScroll.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNVScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNVScroll.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.CNCtlColorScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CNCtlColorScrollBar.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.WMEraseBkgnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.WMEraseBkgnd.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.CreateParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.CreateParams.Params"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Scroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Scroll.ScrollCode"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Scroll.ScrollPos"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomScrollBar.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.SetParams">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.APosition"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.AMin"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetParams.AMax"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Kind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.LargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.SmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomScrollBar.OnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollBar">
        <short>Scroll Bar</short>
        <descr>Scroll Bar for Text Box or Memo. Can be none, horizontal, vertical or both. May appear automatically when the text goes outside the window. <br/>Scroll codes may be line up or down, page up or down, track the mouse, top of panel, bottom of panel, or end scroll.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Kind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.LargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.SmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGroupBox">
        <short>Custom Group Box</short>
        <descr>Custom Group Box: the base type from which Group Box and related components are derived.</descr>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGroupBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGroupBox.Create.AOwner"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomGroupBox.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGroupBox.CanTab.Result"><short/></element>
      <!-- object Visibility: default -->
      <element name="TGroupBox">
        <short>Group Box</short>
        <descr>Group Box. Allows a number of objects to be grouped physically and conceptually
on the form; they can be moved around together and have certain properties in
common. <br/>They share the same scope for several variables, which are hidden from
objects outside the group. <br/>They can interact with one another, for example
radio buttons will be mutually exclusive within the group.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DockSite">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDockDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDockOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEndDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnGetSiteInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnStartDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.OnUnDock">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption">
        <short>TComboBoxAutoCompleteTextOption defines the behavior of the AutoComplete feature in a combobox control.</short>
        <descr>TComboBoxAutoCompleteTextOption = (cbactEnabled, cbactEndOfLineComplete, cbactRetainPrefixCase,
                                                        cbactSearchCaseSensitive, cbactSearchAscending);

Defines the behavior of the AutoComplete feature.
&lt;ul&gt;&lt;li&gt;cbactEnabled: Enable Auto-Completion feature.&lt;/li&gt;&lt;li&gt;cbactEndOfLineComplete: Perform Auto-Complete only when cursor is at the end of the string.&lt;/li&gt;&lt;li&gt;cbactRetainPrefixCase: Retains the case of characters user has typed. (This option has no effect if cbactEndOfLineComplete is False)&lt;/li&gt;&lt;li&gt;cbactSearchCaseSensitive: Search completion string with case sensitivity.&lt;/li&gt;&lt;li&gt;cbactSearchAscending: Search completion string in accending order. (False will search in descending order)&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactEnabled"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactEndOfLineComplete"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactRetainPrefixCase"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchCaseSensitive"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxAutoCompleteTextOption.cbactSearchAscending"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TComboBoxAutoCompleteText">
        <short>TComboBoxAutoCompleteText = set of TComboBoxAutoCompleteTextOption;</short>
        <descr/>
        <seealso>&lt;link id="TComboBoxAutoCompleteTextOption"/&gt;</seealso>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TComboBoxStyle">
        <short>ComboBox Style</short>
        <descr>ComboBox Style: may be Simple, a Drop-Down or a drop-down list, or some version drawn by the Owner</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csDropDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csSimple"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csDropDownList"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csOwnerDrawFixed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TComboBoxStyle.csOwnerDrawVariable"><short/></element>
      <!-- alias type Visibility: default -->
      <element name="TOwnerDrawState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDrawItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawItemEvent.State"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TMeasureItemEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Control"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMeasureItemEvent.Height"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomComboBox">
        <short>Custom Combo Box</short>
        <descr>Custom Combination Box: the base class from which Combo Box is derived.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FCharCase">
        <short>FCharCase: TEditCharCase</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoCompleteText">
        <short>FAutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Private variable of property AutoCompleteText.

Options for behavior of the Auto-Complete feature.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoSelect">
        <short>FAutoSelect: Boolean</short>
        <descr>Private variable for property AutoSelect.

When True, the edit control will select all its text when:
&lt;ul&gt;&lt;li&gt;It recieves focus&lt;/li&gt;&lt;li&gt;The Enter key is pressed.&lt;/li&gt;&lt;li&gt;A new item is selected.&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoSelected">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect opertation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FAutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FDropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FDroppedDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.fMaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnMeasureItem">
        <short/>
        <descr>
          <short>Combo Box</short>
          <descr>Combo box. A simple combination of text box for free text entry, and a drop-down list allowing one of several options to be chosen.
</descr>
        </descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FSorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FReturnArrowState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomComboBox.GetDroppedDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetDroppedDown.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomComboBox.GetItemWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemWidth.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetItemWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemWidth.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItems.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.LMDrawListItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMDrawListItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.CNCommand">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.CNCommand.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.UpdateSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetArrowKeysTraverseList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetArrowKeysTraverseList.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DrawItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DrawItem.State"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.LMChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.LMChange.msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Select">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.DropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.CloseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.AdjustDropDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelLength.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelStart.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetSelText.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetItemIndex.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.GetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.GetMaxLength.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.SelectItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.SelectItem.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SelectItem.AnItem"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetDropDownCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetDropDownCount.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetDroppedDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetDroppedDown.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemHeight.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemIndex.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetMaxLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelStart.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSelText.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetSorted.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetStyle.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.KeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.KeyDown.Shift"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.DropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomComboBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomComboBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.AddItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddItem.Item"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddItem.AnObject"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.AddHistoryItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.Item"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.MaxHistoryCount"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.SetAsText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.CaseSensitive"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.AddHistoryItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.Item"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.AnObject"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.MaxHistoryCount"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.SetAsText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.AddHistoryItem.CaseSensitive"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.ClearSelection">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomComboBox.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
&lt;ul&gt;&lt;li&gt;Normal case letters&lt;/li&gt;&lt;li&gt;Upper case letters&lt;/li&gt;&lt;li&gt;Lower case letters&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.DroppedDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.MeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MeasureItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.MeasureItem.TheHeight"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomComboBox.SelectAll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoComplete">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoCompleteText">
        <short>property AutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Options for behavior of the Auto-Complete feature.
</descr>
        <seealso>&lt;link id="TComboBoxAutoCompleteTextOption"/&gt;</seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr>When True, the edit control will select all its text when:
&lt;ul&gt;&lt;li&gt;It recieves focus&lt;/li&gt;&lt;li&gt;The Enter key is pressed.&lt;/li&gt;&lt;li&gt;A new item is selected.&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr>True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.ArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.SelText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomComboBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TComboBox">
        <short>Combo Box</short>
        <descr>Combo box. A simple combination of text box for free text entry, and a drop-down list allowing one of several options to be chosen.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ArrowKeysTraverseList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoComplete">
        <short>property AutoComplete: Boolean</short>
        <descr>True: Turns on auto-complete feature.
False: Turns off auto-complete feature.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoCompleteText">
        <short>property AutoCompleteText: TComboBoxAutoCompleteText</short>
        <descr>Options for behavior of the Auto-Complete feature.
</descr>
        <seealso>&lt;link id="TComboBoxAutoCompleteTextOption"/&gt;
&lt;link id="TComboBoxAutoCompleteText"/&gt;
</seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.AutoSelect">
        <short>property AutoSelected: Boolean</short>
        <descr>When True, the edit control will select all its text when:
&lt;ul&gt;&lt;li&gt;It recieves focus&lt;/li&gt;&lt;li&gt;The Enter key is pressed.&lt;/li&gt;&lt;li&gt;A new item is selected.&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
&lt;ul&gt;&lt;li&gt;Normal case letters&lt;/li&gt;&lt;li&gt;Upper case letters&lt;/li&gt;&lt;li&gt;Lower case letters&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.DropDownCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnCloseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnEditingDone">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Style">
        <short/>
        <descr/>
        <seealso>
          <descr>Options for behavior of the Auto-Complete feature.
</descr>
          <seealso>&lt;link id="TComboBoxAutoCompleteTextOption"/&gt;&lt;link id="TComboBoxAutoCompleteText"/&gt;</seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TListBoxStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbStandard"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbOwnerDrawFixed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TListBoxStyle.lbOwnerDrawVariable"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TSelectionChangeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TSelectionChangeEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TSelectionChangeEvent.User"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomListBox">
        <short>Custom List Box</short>
        <descr>Custom List Box: the base type from which List Box is derived.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FMultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FIntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FLockSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FOnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FSorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FTopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FCacheValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.GetTopIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetTopIndex.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.SetTopIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetTopIndex.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.UpdateSelectionMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.UpdateSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.LMDrawListItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.LMDrawListItem.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.LMSelChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.LMSelChange.TheMessage"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomListBox.SendItemSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SendItemSelected.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SendItemSelected.IsSelected"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.AssignItemDataToCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignItemDataToCache.AIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignItemDataToCache.AData"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.AssignCacheToItemData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignCacheToItemData.AIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.AssignCacheToItemData.AData"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.CreateHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.CheckIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.CheckIndex.AIndex"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetItemHeight.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetItemIndex.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetSelCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetSelCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetSelected.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetSelected.Index"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetCachedDataSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetCachedDataSize.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.GetCachedData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetCachedData.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetCachedData.AIndex"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetExtendedSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetExtendedSelect.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItemIndex.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItems.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetItemHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetItemHeight.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetMultiSelect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetMultiSelect.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSelected.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSelected.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetSorted">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetSorted.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.SetStyle.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.DrawItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DrawItem.State"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.DoSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DoSelectionChange.User"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.SendItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.OnMeasureItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomListBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomListBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.GetIndexAtY">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.GetIndexAtY.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.GetIndexAtY.Y"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemAtPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Pos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemAtPos.Existing"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemRect.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemRect.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemVisible.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemVisible.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomListBox.ItemFullyVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ItemFullyVisible.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ItemFullyVisible.Index"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.MakeCurrentVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.MeasureItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.MeasureItem.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.MeasureItem.TheHeight"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.LockSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomListBox.UnlockSelectionChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.IntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.OnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.SelCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Selected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Selected.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.TopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListBox">
        <short>List Box</short>
        <descr>List Box: a simple drop-down list from which a choice is made</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ClickOnSelChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ExtendedSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.IntegralHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.MultiSelect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnDrawItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheelDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnMouseWheelUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnSelectionChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Sorted">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Style">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.TopIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TEditCharCase">
        <short>Determines the case of text displayed in the edit box or combobox.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecNormal">
        <short>Character case according to what the user types.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecUppercase">
        <short>Converts every character that the user types into upper case characters.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEditCharCase.ecLowerCase">
        <short>Converts every character that the user types into lower case characters.</short>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TEchoMode">
        <short>TEchoMode: Determines how strings in the edit box is displayed.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emNormal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TEchoMode.emPassword"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomEdit">
        <short>Custom Edit</short>
        <descr>Custom Edit: the base type from which Edit Box is derived.</descr>
      </element>
      <element name="TCustomEdit.FAutoSelect">
        <short>FAutoSelect: Boolean</short>
        <descr>Private variable for property AutoSelect.

When True, the edit control will select all its text when:
&lt;ul&gt;&lt;li&gt;It recieves focus&lt;/li&gt;&lt;li&gt;The Enter key is pressed.&lt;/li&gt;&lt;li&gt;A new item is selected.&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FAutoSelected">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect opertation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FCharCase">
        <short>FCharCase: TEditCharCase</short>
        <descr>Private variable for property CharCase.

Indicates how text is displayed in a text editing control in the following ways:
&lt;ul&gt;&lt;li&gt;Normal case letters&lt;/li&gt;&lt;li&gt;Upper case letters&lt;/li&gt;&lt;li&gt;Lower case letters&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso>&lt;link id="TEditCharCase"/&gt;&lt;link id="TEditCharCase.ecNormal"/&gt;&lt;link id="TEditCharCase.ecUppercase"/&gt;&lt;link id="TEditCharCase.ecLowerCase"/&gt;</seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FEchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FMaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FModified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FPasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomEdit.GetModified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetModified.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetCharCase">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetCharCase.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetMaxLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetMaxLength.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetModified">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetModified.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetPasswordChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetPasswordChar.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetReadOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetReadOnly.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CalculatePreferredSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CalculatePreferredSize.PreferredWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CalculatePreferredSize.PreferredHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CMTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.CMTextChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelLength.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelStart.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.GetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.GetSelText.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetEchoMode">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetEchoMode.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelLength">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelLength.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelStart">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelStart.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetSelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetSelText.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.RealSetText.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.ChildClassAllowed.ChildClass"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.KeyUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.KeyUp.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.KeyUp.Shift"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr>When True, the edit control will select all its text when it
recieves focus or when the Enter key is pressed.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr>True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.
</descr>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomEdit.Create">
        <short><i>CustomEdit</i> constructor</short>
        <descr><i>CustomEdit</i> constructor,  supplied code will <b>override</b> declarations by ancestor classes</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.SelectAll">
        <short>Selects all text in buffer, in preparation for an operation such as Copy or Clear</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.ClearSelection">
        <short>Clears selected portion of Text</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.CopyToClipboard">
        <short>Copies selected text to the clipboard</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.CutToClipboard">
        <short>Cuts selected text (ie removes it) and stores it in the clipboard</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomEdit.PasteFromClipboard">
        <short>Pastes the contents of the clipboard into the current position in <i>Text</i></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.CharCase">
        <short>property CharCase: TEditCharCase</short>
        <descr>Indicates how text is displayed in a text editing control in the following ways:
&lt;ul&gt;&lt;li&gt;Normal case letters&lt;/li&gt;&lt;li&gt;Upper case letters&lt;/li&gt;&lt;li&gt;Lower case letters&lt;/li&gt;&lt;/ul&gt;</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.EchoMode">
        <short><i>EchoMode</i>: how the typed characters are to appear on the screen</short>
        <descr><i>EchoMode</i>: can be None (no character appears); Normal (the character typed is shown directly); Password (a series of *** or other chosen characters are displayed instead of the typed characters). <br/>
Reads or writes a flag to determine the mode<br/>
Default is normal</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.MaxLength">
        <short>Max Length</short>
        <descr>Max Length: maximum length allowed for text string</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.Modified">
        <short>Modified</short>
        <descr>Modified: has the text been modified since creation?</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.PasswordChar">
        <short>Password Character</short>
        <descr>Password Character: the character which appears in the Edit box replacing and masking the actual character typed. Typically used in password input, to prevent the typed characters from being seen by passers-by or casual observers (or even malicious observers!)</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelLength">
        <short>Sel Length</short>
        <descr>Sel Length: the length (in characters) of the text that has been selected for editing</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelStart">
        <short>Sel Start</short>
        <descr>Sel Start: the index of the character from which selection (for editing) begins</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.SelText">
        <short>Sel Text</short>
        <descr>Sel Text: the text of the actual string that has been selected for editing</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomEdit.Text">
        <short><i>Text</i>: the character string contained in the Edit Box</short>
        <descr>Most of the operations (such as <i>Select</i>, <i>Clear</i>, <i>Cut</i>, <i>Copy</i> are performed in this part of the object, which holds the actual string being edited</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TMemoScrollbar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TMemoScrollbar.GetHorzScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMemoScrollbar.GetHorzScrollBar.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMemoScrollbar.GetVertScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMemoScrollbar.GetVertScrollBar.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Increment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Page">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Smooth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Range">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Size">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TMemoScrollbar.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomMemo">
        <short>Custom Memo</short>
        <descr>Custom Memo: the base type from which Memo is derived</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FHorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FLines">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FVertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomMemo.FWordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMemo.SetHorzScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetHorzScrollBar.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomMemo.SetVertScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetVertScrollBar.AValue"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomMemo.StoreScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.StoreScrollBars.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetLines">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetLines.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetWordWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetWordWrap.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.SetScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.SetScrollBars.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomMemo.WordWrapIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomMemo.WordWrapIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomMemo.ControlKeyDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.ControlKeyDown.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.ControlKeyDown.Shift"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomMemo.Create">
        <short><i>CustomMemo</i> constructor</short>
        <descr><i>CustomMemo</i> constructor. Supplied code will <b>override</b> definition in ancestor classes</descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomMemo.Destroy">
        <short><i>CustomMemo</i> destructor</short>
        <descr><i>CustomMemo</i> destructor. Supplied code will <b>override</b> definitions from ancestor classes</descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomMemo.Append">
        <short><i>Append</i> a line of text to the <i>CustomMemo</i></short>
        <descr><i>Append</i> a line of text to the <i>CustomMemo</i>. The <i>Value</i> is an explicit string to be passed to the procedure for insertion at the end of the text buffer <i>Lines</i></descr>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomMemo.Append.Value">
        <short><i>Value</i>: the string to be added to <i>Lines</i></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomMemo.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.Lines">
        <short>Lines</short>
        <descr>Lines: an array of strings (representing single lines of characters) which contains the textual material held or being entered in the Memo.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word nears the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.HorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomMemo.VertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TEdit">
        <short>Edit Box</short>
        <descr>Edit Box: for entry or display of a single line of text.
<br/>Inherits most of its properties from TCustomEdit</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TEdit.AutoSelected">
        <short>property AutoSelected: Boolean</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Action">
        <short>Action</short>
        <descr>Action: the task to be performed when the component is activated by a mouse movement or key press. <br/>This should point to a user-defined procedure or function or an item on an action list.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.AutoSelect">
        <short>property AutoSelect: Boolean</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. <br/>

If a control is resized the new dimensions are always within the ranges given here. <br/>

You should take care when setting these options that they do not conflict with the Anchors and Align settings.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.CharCase">
        <short>Char Case</short>
        <descr>Character Case: the default character case (Upper or Lower case) to be used in the Edit Box. Can, of course, be over-ridden by use of the [shift] key.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.EchoMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Enabled">
        <short>Enabled</short>
        <descr>Enabled: flag to determine whether or not the control is able to be used</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnChange">
        <short>On Change - Action</short>
        <descr>On Change - Action to be taken when any of the properties of the control change (especially the textual content).<br/> User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnChangeBounds">
        <short>On Change Bounds - Action</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. <br/> User-defined Procedure.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnEnter">
        <short>On Entry - Action</short>
        <descr>On Entry - Action to be taken when the mouse cursor or text cursor enters the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnExit">
        <short>On Exit - Action</short>
        <descr>On Exit - Action to be taken when the mouse or text cursor leaves this control or when focus is relinquished. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyDown">
        <short>On Key Down - Action</short>
        <descr>On Key Down - Action to be taken if a key is down while focus is in this control. Subtly different from On Key Pressed - for example the key might already have been down when focus entered this control, whereas On Key Pressed requires the key to become pressed while focus is in the control. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyPress">
        <short>On Key Press - Action</short>
        <descr>On Key Press - Action to be taken if a key becomes pressed while focus is in this control. Subtly different from On Key Down, which simply responds to a key being down, whether or not it was already down when focus was given to this control. On Key Press requires that a key becomes pressed while focus in in this control.<br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnKeyUp">
        <short>On Key Up - Action</short>
        <descr>On Key Up - Action to be taken if a key is up (ie not pressed) while focus is in this control.<br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseMove">
        <short>On Mouse Move - Action</short>
        <descr>On Mouse Move - Action to be taken if the mouse cursor moves while focus is in this control. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up (not pressed) while focus is in this control.<br/>User -defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.PasswordChar">
        <short>Password Character</short>
        <descr>Password Character - defines which character should appear in the edit box when a password is being typed. <br/>A security feature to prevent casual onlookers fom seeing the password that is being entered. <br/>Most often an asterisk * but could be any user-selected character.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.PopupMenu">
        <short>Popup Menu</short>
        <descr>Popup Menu - a menu that appears when the right mouse button is clicked over this control</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ReadOnly">
        <short>Read Only</short>
        <descr>Read Only - a flag that signifies that users can view the contents of this control but are not allowed to modify it.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.ShowHint">
        <short>Show Hint</short>
        <descr>Show Hint - allows a small box containing helpful text to be displayed while the mouse cursor 'hovers' over the control</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Text">
        <short>Text</short>
        <descr>Text - the actual character string that represents the contents of the control. May be edited if ReadOnly property is not set</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TMemo">
        <short>Memo Box</short>
        <descr>Memo box: for entry or display of multiple lines of text.<br/>Inherits most of its properties from TCustomMemo</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Lines">
        <short>Lines</short>
        <descr>Lines: an array of strings (representing single lines of characters) which contains the textual material held or being entered in the Memo.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.MaxLength">
        <short>Max Length</short>
        <descr>Max Length: the maximum permitted length for the textual material in the memo</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.ScrollBars">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMemo.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word nears the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLabel">
        <short>Custom Label</short>
        <descr>Custom label: the base type from which Label is derived.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FWordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FFocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetAlignment.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetLayout.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetWordWrap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetWordWrap.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.WMActivate.Message"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomLabel.GetLabelText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomLabel.GetLabelText.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.RealSetText.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetFocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetFocusControl.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.SetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetShowAccelChar.Val"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLabel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Create.AOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabel.WordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLabel">
        <short>Label</short>
        <descr>Label: a brief text label to be placed in the Form near any object that needs to be identified.
<br/>
Can also be used for displaying text messages, eg
<br/>
... <br/>
  Label.Caption := 'Please select one of these options'; <br/>
... <br/>

or the message may be changed dynamically, eg <br/>

  var Lies: boolean; <br/>
... <br/>
  if (Lies=true) then Label.caption := 'Lies are true'  <br/>
  else Label.caption := 'Lies are false'; <br/>
...</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Caption">
        <short>Caption</short>
        <descr>Caption - the text string that represents the contents of the label</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. <br/>


If a control is resized the new dimensions are always within the ranges given here. <br/>


You should take care when setting these options that they do not conflict with the Anchors and Align settings.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnChangeBounds">
        <short>On Change Bounds</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. <br/>
 User-defined Procedure.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnClick">
        <short>On Click</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnDblClick">
        <short>On Double-click</short>
        <descr>On Double-click - Action to be taken when the mouse button is double-clicked with the cursor over this control. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. <br/>
User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseEnter">
        <short>On Mouse Entry</short>
        <descr>On Mouse Entry - Action to be taken when the mouse cursor enters the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseLeave">
        <short>On Mouse Leaving</short>
        <descr>On Mouse Leaving - Action to be taken when the mouse cursor leaves the boundaries of this control. User-defined Procedure.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseMove">
        <short>On Mouse Movement - Action</short>
        <descr>On Mouse Movement - Action to be taken if the mouse cursor moves while within the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnMouseUp">
        <short>On Mouse Up</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up while the cursor is over this control. <br/>
Implies that the mouse button was previously down and has been released. The case where the cursor enters the control but the mouse button has not yet been pressed is covered by OnMouseEnter.<br/>
User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.WordWrap">
        <short>Word Wrap</short>
        <descr>Word Wrap: a logical flag to show whether or not word-wrap is enabled, ie if a word is near the end of a line and is going to be too long for the line, it is wrapped down to the next line</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TButtonControl">
        <short>Button Control</short>
        <descr>Button Control:  Base Type for the Button (including Radio Button) and Check Box types ;<br/>

processes the detection of clicks and changes, and the checked/unchecked state of the component.<br/>


A rectangular button, whose shape can be specified,
and which usually has an informative caption. <br/>
It is designed to be pressed or selected by the mouse cursor, and usually initiates some activity with the OnClick Event. <br/>

Properties can include [Checked], [Click] (mouse clicks on button) and the actions to be taken on a change in a property.<br/>Typically, clicking on the box will cause the box to be checked (or unchecked if it is already checked) as well as initiating any other action associated with the box.<br/>The programmer is responsible for ensuring that the appropriate actions and changes in checked status are performed.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FClicksDisabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TButtonControl.FUseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TButtonControl.IsCheckedStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.IsCheckedStored.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TButtonControl.UseOnChangeIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.UseOnChangeIsStored.Result"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TButtonControl.fLastCheckedOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TButtonControl.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.GetChecked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonControl.SetChecked.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.DoOnChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TButtonControl.ColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TButtonControl.ColorIsStored.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TButtonControl.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.ClicksDisabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TButtonControl.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TButtonControl.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TButtonControl.Create.TheOwner"><short/></element>
      <!-- range type Visibility: default -->
      <element name="TLeftRight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TCheckBoxState">
        <short>Check Box State</short>
        <descr>Check Box State: a set of constants defining the possible states of a Check Box - <br/>

Checked, meaning it has been selected; <br/>

Unchecked meaning irt has not been selected or has been deselected; <br/>

Grayed meaning it has been rendered inoperative or unable to be selected and appears grey or faintly visible on the Form</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbUnchecked">
        <descr>The check box has no check mark, indicating that the user has not selected the option.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbChecked">
        <descr>The check box has a check mark in it, indicating that the user has selected the option.</descr>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckBoxState.cbGrayed">
        <descr>The check box has a check mark in it, but it is grayed.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomCheckBox">
        <short>TCustomCheckBox is the ancestor of all check-box components.</short>
        <descr>Custom Check Box: The base (abstract) class from which the TCheckBox is derived.  Check boxes present the user with options that can be selected (checked) or deselected (unchecked).</descr>
        <seealso><link id="TCheckBox"/></seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FAllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckBox.FShortCut">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckBox.SetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.SetState.Value"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckBox.GetState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.GetState.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckBox.DoChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.DoChange.Msg"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.RetrieveState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.RetrieveState.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.InitializeWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.Toggle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomCheckBox.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckBox.GetChecked.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.SetChecked.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.RealSetText.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckBox.ApplyChanges">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomCheckBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckBox.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.AllowGrayed">
        <short>Determines whether the check box can be in a "grayed" state.</short>
        <descr>If AllowGrayed is set to True, the check box has three possible states: checked, unchecked and grayed. If AllowGrayed is set to False, the check box has only two possible states: checked and unchecked.</descr>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.State">
        <short>Indicates whether the check box is selected, deselected or grayed.</short>
        <descr>See TCheckBoxState for possible values of State.</descr>
        <example file="stdctrls/tcustomcheckbox_allowgrayed.pas"/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.TabStop">
        <short>Determines if the user can tab to a control.</short>
        <descr>Use the TabStop to allow or disallow access to the control using the Tab key.

If the TabStop is True, the control is in the tab order. If TabStop is False, the control is not in the tab order and the user can't press the Tab key to move to the control.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCheckBox">
        <short>Check Box</short>
        <descr>Check Box: a small box which can contain a check mark to indicate that it has been selected by a mouse click. May be associated with a Caption that describes its function. <br/>
Toggles between being checked and unchecked on successive clicks of the mouse, and usually initiates some action associated with OnChecked.</descr>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCheckBox.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Action">
        <short>Action</short>
        <descr>Action: the task to be performed when the component is activated by a mouse movement or key press. <br/>This should point to a user-defined procedure or function or an item on an action list.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Control component to a border of a parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.AllowGrayed">
        <short>Allow Grayed</short>
        <descr>Allow Grayed: a flag to show whether the box is allowed to be Greyed out, <br/>ie it is still visible, but appears faint and cannot be selected or activated with the mouse cursor or keyboard</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a control component a defined distance from certain borders of the parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Caption">
        <short>Caption</short>
        <descr>Caption: a brief description appearing near the check box, usually stating the function of the box or what action will be taken if it becomes checked.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Checked">
        <short>Checked</short>
        <descr>Checked - shows whether or not the box has been checked (ie selected)</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. <br/>If a control is resized the new dimensions are always within the ranges given here. <br/>You should take care when setting these options that they do not conflict with the Anchors and Align settings.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Enabled">
        <short>Enabled</short>
        <descr>Enabled: flag to determine whether or not the control is able to be used</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Hint">
        <short>Hint</short>
        <descr>Hint: a short piece of pop-up text that appears if the mouse-cursor hovers over the check box; <br/>it should give further details of the function of the box</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnChange">
        <short>On Change</short>
        <descr>On Change - Action to be taken when any of the properties of the control change.<br/>
 User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnChangeBounds">
        <short>On Change Bounds</short>
        <descr>On Change Bounds - Action to be taken if any of the bounds of the control are changed. <br/>
 User-defined Procedure.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnEnter">
        <short>On Entry - Action</short>
        <descr>On Entry - Action to be taken when the mouse cursor or text cursor enters the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnExit">
        <descr>On Exit - Action to be taken when the mouse or text cursor leaves this control or when focus is relinquished. <br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken if the mouse button is down while focus is in this control. <br/>
User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseMove">
        <short>On Mouse Move - Action</short>
        <descr>On Mouse Move - Action to be taken if the mouse cursor moves while focus is in this control. <br/>
User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up (not pressed) while focus is in this control.<br/>
User -defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include selection of a different font size etc. <br/>
User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.PopupMenu">
        <short>Popup Menu</short>
        <descr>Popup Menu - a menu that appears when the right mouse button is clicked over this control</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.ShowHint">
        <short>Show Hint</short>
        <descr>Show Hint: a flag to show whether or not the hint is to be shown when the mouse cursor hovers over the box.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckBox.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TToggleBox">
        <short>Toggle Box</short>
        <descr>Toggle Box: a labelled box capable of being checked (when it becomes recessed) or unchecked (when it is raised). <br/>The 'state' property can be tested for cbUnchecked or cbChecked and actions can be associated with mouse clicks or other movements</descr>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TToggleBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TToggleBox.Create.TheOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.AllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TToggleBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TRadioButton">
        <short>Radio Button</short>
        <descr>Radio Button: a button which works in conjunction with other Radio Buttons in a mutually exclusive manner - if one button of a group is selected, none of the others in that group can be selected. <br/>Several radio buttons are usually grouped together in a Group Box or Radio Group. When a button is selected, the actions associated with that button are initiated.</descr>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TRadioButton.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRadioButton.RealSetText.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TRadioButton.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TRadioButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TRadioButton.Create.TheOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.AllowGrayed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.State">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.UseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TStaticBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsSingle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TStaticBorderStyle.sbsSunken"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomStaticText">
        <short>Custom Static Text</short>
        <descr>Custom Static Text: the base type from which Static Text is derived.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FAlignment">
        <short>FAutoSelected: Boolean</short>
        <descr>Private variable for property AutoSelected.

True indicate that the edit or combobox control has just performed
an AutoSelect operation so that subsequent mouse-clicks and keystrokes
proceeds normally without selecting the text.

False is set when the edit or combobox control looses focus.
</descr>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FStaticBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FFocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomStaticText.FShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStaticText.FontChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.FontChange.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.CMTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.CMTextChanged.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.WMActivate.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetAlignment.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.GetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.GetAlignment.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetStaticBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetStaticBorderStyle.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.GetStaticBorderStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.GetStaticBorderStyle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetFocusControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetFocusControl.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStaticText.SetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.SetShowAccelChar.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.GetShowAccelChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.GetShowAccelChar.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStaticText.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStaticText.CanTab.Result"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomStaticText.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomStaticText.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomStaticText.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomStaticText.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomStaticText.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStaticText.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomStaticText.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStaticText">
        <short>Static Text</short>
        <descr>Static Text: a box to display a Constant Text String</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Align">
        <short>Align</short>
        <descr>Align: Is used to align a Static Text box to a border of a parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Anchors">
        <short>Anchors</short>
        <descr>Anchors:  keep the edges of a static text box a defined distance from certain borders of the parent control.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Caption">
        <short>Caption</short>
        <descr>Caption: the text that actually appears with the Static Text Box</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Constraints">
        <short>Constraints</short>
        <descr>Constraints: Sets the minimum and maximum sizes for a control. <br/>
If a control is resized the new dimensions are always within the ranges given here. <br/>
You should take care when setting these options that they do not conflict with the Anchors and Align settings.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Enabled">
        <short>Enabled</short>
        <descr>Enabled: flag to determine whether or not the control is able to be used</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.PopupMenu">
        <short>Popup Menu</short>
        <descr>Popup Menu - a menu that appears when the right mouse button is clicked over this control</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.ShowHint">
        <short>Show Hint</short>
        <descr>Show Hint - allows a small box containing helpful text to be displayed while the mouse cursor 'hovers' over the control</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.Visible">
        <short>Visible</short>
        <descr>Visible - determines whether or not the control can be seen</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnClick">
        <short>On Click - Action</short>
        <descr>On Click - Action to be taken when the mouse button is clicked with the cursor over this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnDblClick">
        <short>On Double-click - Action</short>
        <descr>On Double-click - Action to be taken when the mouse button is double-clicked while the cursor is over the control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseDown">
        <short>On Mouse Down - Action</short>
        <descr>On Mouse Down - Action to be taken when the mouse button is down while the cursor is over this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseMove">
        <short>On Mouse Movement - Action</short>
        <descr>On Mouse Movement - Action to be taken if the mouse cursor moves within the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseUp">
        <short>On Mouse Up - Action</short>
        <descr>On Mouse Up - Action to be taken if the mouse button is up while the cursor is over this control. <br/>Implies that the mouse button was previously down and has been released. The case where the cursor enters the control but the mouse button has not yet been pressed is covered by OnMouseEnter.<br/>User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseEnter">
        <short>On Mouse Entry - Action</short>
        <descr>On Mouse Entry - Action to be taken when the mouse cursor enters the bounds of this control. User-defined Procedure</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnMouseLeave">
        <short>On Mouse Leaving - Action</short>
        <descr>On Mouse Leaving - Action to be taken when the mouse cursor leaves the boundaries of this control. User-defined Procedure.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStaticText.OnResize">
        <short>On Resize - Action</short>
        <descr>On Resize - Action to be taken when the control is resized. Might include re-alignment of text or selection of a different font size etc. User-defined Procedure</descr>
      </element>
      <!-- variable Visibility: default -->
      <element name="DefaultButtonControlUseOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- StdCtrls -->
  </package>
</fpdoc-descriptions>
