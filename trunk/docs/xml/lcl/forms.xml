<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    Forms
  ====================================================================
-->
    <module name="Forms">
      <short>Contains definitions and descriptions for constructing the Forms which are the basis of the Lazarus Graphical User Interface</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="TypInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Math">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="AvgLvlTree">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Maps">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="InterfaceBase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Menus">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ActnList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="ClipBrd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustApp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="HelpIntfs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLClasses">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedure">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TProcedureOfObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPosition">
        <short>Represents the Position and Size on Screen of an Form</short>
        <descr>
          <p>poDesigned - The Form appears exactly as it is positioned and sized in the Form Designer</p>
          <p>poDefault - The window manager decides how the form is to appear, in a default position and size</p>
          <p>poDefaultPosOnly - keeps the Designed size, but position determined by windowmanager</p>
          <p>poDefaultSizeOnly - keeps the Designed position, but size determined by windowmanager</p>
          <p>poScreenCenter - Centers the form on screen</p>
          <p>poDeskTopCenter - Centers the form on desktop</p>
          <p>poMainFormCenter - Centers the Form on the Main Form</p>
          <p>poOwnerFormCenter - Centers the Form on Owner form</p>
        </descr>
        <seealso/>
      </element>
      <element name="TPosition.poDesigned">
        <short>The Form appears exactly as it is positioned and sized in the Form Designer.
        </short>
      </element>
      <element name="TPosition.poDefault">
        <short>The window manager decides how the form is to appear, in a default position and size.
        </short>
      </element>
      <element name="TPosition.poDefaultPosOnly">
        <short>Keeps the designed size, but position determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poDefaultSizeOnly">
        <short>Keeps the designed position, but size determined by windowmanager.
        </short>
      </element>
      <element name="TPosition.poScreenCenter">
        <short>Centers the form on screen.
        </short>
      </element>
      <element name="TPosition.poDesktopCenter">
        <short>Centers the form on desktop (not recommended, use poScreenCenter).
        </short>
      </element>
      <element name="TPosition.poMainFormCenter">
        <short>Centers the Form on the Main Form.
        </short>
      </element>
      <element name="TPosition.poOwnerFormCenter">
        <short>Centers the Form on Owner form.
        </short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TWindowState">
        <short>Represents the actual State of the window on the screen.</short>
        <descr>
		      <p>The actual meaning of each value depends on the platform:</p>
          <p>Windows and Mac OS X - These operating systems support all values.</p>
          <p>X11 - The window state is a hint sent to the Window Manager, so more primitive Window Managers might ignore this hints.</p>
          <p>Windows CE - In Windows CE platforms where Application.ApplicationType = atKeyPadDevice or atPDA (like in Windows Phone, PocketPC and Windows Mobile), wsMinimized and wsNormal are understood as wsMaximized, which is the normal state for windows in this platform. An exception are windows with BorderStyle=bsDialog or bsNone, which are allowed to have a custom position and size. For more information please read http://wiki.lazarus.freepascal.org/Windows_CE_Development_Notes#Positioning_and_size_of_Dialogs_and_Forms</p>
          <p>Android - In this platform windows are always fullscreen.</p>
          <p>The valid values for this enumerated type are:</p>
          <p>wsNormal - The window appears normal</p>
          <p>wsMinimized - The window is minimized and is not shown in the screen, but only in the taskbar</p>
          <p>wsMaximized - The window appears maximized</p>
          <p>wsFullScreen - The window appears in full screen mode, as much as allowed by the platform.
          </p>
        </descr>
        <seealso/>
      </element>
      <element name="TWindowState.wsNormal">
        <short/>
      </element>
      <element name="TWindowState.wsMinimized">
        <short/>
      </element>
      <element name="TWindowState.wsMaximized">
        <short/>
      </element>
      <element name="TWindowState.wsFullScreen">
        <short></short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TCloseAction">
        <short/>
        <descr/>
        <seealso>
          <link id="TCustomForm.OnClose">TCustomForm.OnClose</link>
        </seealso>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caHide">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caFree">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCloseAction.caMinimize">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomHintAction">
        <short>
          <var>TCustomHintAction</var> - Base class for <var>THintAction</var>, the action for displaying a Hint</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomHintAction.Hint" link="#LCL.ActnList.TCustomAction.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbHorizontal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarKind.sbVertical">
        <short/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TScrollBarInc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TScrollBarStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssRegular">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssFlat">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TScrollBarStyle.ssHotTrack">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="EScrollBar">
        <short>Exception in Scroll Bar</short>
        <descr>Exception class for Scroll Bar</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TControlScrollBar">
        <short>
          <var>TControlScrollBar</var> - base class for defining scroll bars on Forms and windows</short>
        <descr>Control Scroll Bar: Scroll Bar control for adding to windows.
          Can be horizontal or vertical.<br/>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FAutoRange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.FKind" link="TControlScrollBar.Kind"/>
      <element name="TControlScrollBar.FPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.FPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.FRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.FSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.FTracking" link="TControlScrollBar.Tracking"/>
      <element name="TControlScrollBar.FVisible" link="TControlScrollBar.Visible"/>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TControlScrollBar.FOldScrollInfoValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TControlScrollBar.FControl">
        <short>
          <var>FControl</var> - local variable to hold the Window Control to which the scroll bar belongs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ControlHandle">
        <short>
          <var>ControlHandle</var> - the operating system handle for this control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ControlHandle.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetAutoScroll">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.GetAutoScroll.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.GetIncrement.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.GetPage.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.GetPosition.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.GetRange.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSize">
        <short>
          <var>GetSize</var> - returns the size of the scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetSize.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.GetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.GetSmooth.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.HandleAllocated">
        <short>
          <var>HandleAllocated</var> - returns True if a handle has been allocated</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.HandleAllocated.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.IsRangeStored">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.IsRangeStored.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.AutoCalcRange">
        <short>
          <var>AutoCalcRange</var> - method for automatically calculating the range of values for the scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ControlUpdateScrollBars">
        <short>
          <var>ControlUpdateScrollBars</var> - method to be used by the owner control for updating its scrollbars</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InternalSetRange">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.InternalSetRange.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.ScrollHandler">
        <short>
          <var>ScrollHandler</var> - message handler to control scrolling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollHandler.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetAutoScroll">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.SetAutoScroll.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetIncrement" link="TControlScrollBar.Increment"/>
      <element name="TControlScrollBar.SetIncrement.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPage" link="TControlScrollBar.Page"/>
      <element name="TControlScrollBar.SetPage.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetPosition" link="TControlScrollBar.Position"/>
      <element name="TControlScrollBar.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetRange" link="TControlScrollBar.Range"/>
      <element name="TControlScrollBar.SetRange.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSize">
        <short>
          <var>SetSize</var> - specifies the size of the scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TControlScrollBar.SetSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetSmooth" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SetSmooth.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetTracking">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.SetTracking.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.SetVisible" link="TControlScrollBar.Visible"/>
      <element name="TControlScrollBar.SetVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.UpdateScrollBar">
        <short>
          <var>UpdateScrollBar</var> - method to update the scroll bar (position etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TControlScrollBar.InvalidateScrollInfo">
        <short>
          <var>InvalidateScrollInfo</var> - method to render scroll information non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetHorzScrollBar">
        <short>
          <var>GetHorzScrollBar</var> - find the position and properties of the horizontal scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetHorzScrollBar.Result">
        <short>Returns details of the horizontal scroll bar as a pointer to a structure</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetVertScrollBar">
        <short>
          <var>GetVertScrollBar</var> - find the position and properties of the vertical scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TControlScrollBar.GetVertScrollBar.Result">
        <short>Returns details of the vertical scroll bar as a pointer to a structure</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TControlScrollBar.ScrollBarShouldBeVisible">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ScrollBarShouldBeVisible.Result">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TControlScrollBar.Create"/>
      <element name="TControlScrollBar.Create.AControl">
        <short>The identity of the windowed control in which the scroll bar is found</short>
      </element>
      <element name="TControlScrollBar.Create.AKind">
        <short>Whether this is a horizontal or a vertical scrollbar</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TControlScrollBar.Assign">
        <short>If Source is a <var>TControlScrollBar</var>, copies properties to itself, else performs inherited <var>Assign</var>.
        </short>
        <descr>Assigns the contents of the source object to the current object;
          in particular finds the increment, position, range and whether smooth scrolling is to  be feature and whether the scroll bar is visible
        </descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TPersistent.Assign"/>
        </seealso>
      </element>
      <element name="TControlScrollBar.Assign.Source">
        <short>The object that called this instance of the class</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.IsScrollBarVisible">
        <short>Returns current widget state.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.IsScrollBarVisible.Result">
        <short>True if scroll bar visible.</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ScrollPos">
        <short>Position of the indicator cursor on the scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.ScrollPos.Result">
        <short>Returns position of the scroll cursor as an integer</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Kind">
        <short>Finds which kind of scroll bar this is: horizontal or vertical</short>
        <descr>Reads a flag to determine which kind of scroll bar</descr>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.GetOtherScrollBar">
        <short>Finds out details of the other scroll bar</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TControlScrollBar.GetOtherScrollBar.Result">
        <short>Returns a link to the details of the other scroll bar</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSize.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithBar.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TControlScrollBar.ClientSizeWithoutBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TControlScrollBar.ClientSizeWithoutBar.Result">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Increment">
        <short>The size of the scrolling increment</short>
        <descr>The amount by which the scroll indicator moves if the triangle at either end of the bar is selected.<br/>

Read or write a flag to determine the increment, an integer with a default value of 8 (pixels)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Page">
        <short>The size of the paging increment for scrolling</short>
        <descr>The amount by which the scroll indicator moves if the cursor selects the scroll bar above, below or on either side of the scroll indicator. <br/>
Reads or writes a flag to determine paging increment; default value is 80 pixels</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Position">
        <short>Position of the scroll bar</short>
        <descr>Reads or writes a flag with the position; default is zero</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Smooth">
        <short>Determine whether smooth scrolling is to be implemented</short>
        <descr>Reads or writes a flag to determine smooth scrolling, and sets a flag is the scrolling status is stored</descr>
        <seealso/>
      </element>
      <element name="TControlScrollBar.SmoothIsStored" link="TControlScrollBar.Smooth"/>
      <element name="TControlScrollBar.SmoothIsStored.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Range">
        <short>The range (extent) of the scroll bar</short>
        <descr>Reads or writes a flag to determine the range; default is zero</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TControlScrollBar.Size">
        <short>Determine the size of the scroll bar</short>
        <descr>Reads or writes a flag to determine the size; by default the size is not stored</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Tracking">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TControlScrollBar.Visible">
        <short>Can the scroll bar be made visible?</short>
        <descr>Reads or writes flag to determine visibility, and sets a flag if the property is stored.
The Handle object (widget) is made visible if (Visible=true) and (Range&gt;Page).
To get the current visible state of the widget use the method IsScrollBarVisible.</descr>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollingWinControl">
        <short>Class of a Window Control that has one or more scroll bars.
        </short>
        <descr></descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.FVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.FAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <!-- variable Visibility: private -->
      <element name="TScrollingWinControl.FIsUpdating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetHorzScrollBar" link="TScrollingWinControl.HorzScrollBar"/>
      <element name="TScrollingWinControl.SetHorzScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetVertScrollBar" link="TScrollingWinControl.VertScrollBar"/>
      <element name="TScrollingWinControl.SetVertScrollBar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.AlignControls">
        <short>
          <var>AlignControls</var> - calls inherited <var>AlignControls</var>, then calculates sizes for the scrollbars if required</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.AlignControls.AControl">
        <short/>
      </element>
      <element name="TScrollingWinControl.AlignControls.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.CreateWnd">
        <short>
          <var>CreateWnd</var> - performs inherited <var>CreateWnd</var> then updates ScrollBars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetClientScrollOffset">
        <short>
          <var>GetClientScrollOffset</var> - finds the position for scrollbars from the client, if any, otherwise sets default postiions</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetClientScrollOffset">TControl.GetClientScrollOffset</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetClientScrollOffset.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetLogicalClientRect">
        <short>
          <var>GetLogicalClientRect</var> - adjusts client rect to allow for size of scrollbars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetLogicalClientRect">TControl.GetLogicalClientRect</link>
        </seealso>
      </element>
      <element name="TScrollingWinControl.GetLogicalClientRect.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.DoOnResize">
        <short>
          <var>DoOnResize</var> - performs inherited <var>DoOnResize</var> then updates scrollbars if needed</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.DoOnResize">TControl.DoOnResize</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMHScroll">
        <short>
          <var>WMHScroll</var> - system message method for horizontal scrolling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMHScroll.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.WMVScroll">
        <short>
          <var>WMVScroll</var> - system message method for vertical scroling</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.WMVScroll.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.ComputeScrollbars">
        <short>
          <var>ComputeScrollbars</var> - returns True if scroll bar positions need to be computed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.ComputeScrollbars.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollbarHandler">
        <short>
          <var>ScrollbarHandler</var> - method for handling scroll bars of specified kind at specified position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.ScrollKind">
        <short/>
      </element>
      <element name="TScrollingWinControl.ScrollbarHandler.OldPosition">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScrollingWinControl.SetAutoScroll" link="TScrollingWinControl.AutoScroll"/>
      <element name="TScrollingWinControl.SetAutoScroll.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.Loaded">
        <short>
          <var>Loaded</var> - calls inherited <var>Loaded</var> and updates scroll bars</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.Loaded">TWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.SetAutoSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScrollingWinControl.SetAutoSize.Value">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScrollingWinControl.Create"/>
      <element name="TScrollingWinControl.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScrollingWinControl.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TScrollingWinControl.UpdateScrollbars">
        <short>Update the position of the scroll indicatores in the scroll bars</short>
        <descr>Checks if the scroll bars are in process of being loaded or destroyed; <br/>
if so, or if there is no valid handle, exit. <br/>
If the indicators are valid, re-computes position etc</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScrollingWinControl.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> inserts its own defaults, overriding inherited values</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingWinControl.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TScrollingWinControl.ScrollBy">
        <short>
          <var>ScrollBy</var> - amount by which to scroll</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaX">
        <short/>
      </element>
      <element name="TScrollingWinControl.ScrollBy.DeltaY">
        <short/>
      </element>
      <element name="TScrollingWinControl.HasVisibleScrollbars.Result">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.AutoScroll">
        <short>Does auto-scrolling apply?</short>
        <descr>Reads or writes a flag to determine auto-scrolling</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.HorzScrollBar">
        <short>The properties of the horizontal scroll bar</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollingWinControl.VertScrollBar">
        <short>The properties of the vertical scroll bar</short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TScrollBox">
        <short>A box with scroll bars.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScrollBox.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- constructor Visibility: public -->
      <element name="TScrollBox.Create" link="#LCL.Forms.TScrollingWinControl.Create"/>
      <element name="TScrollBox.Create.AOwner">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBox.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TScrollBox.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TScrollBox.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TScrollBox.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TScrollBox.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TScrollBox.BorderSpacing" link="#LCL.Controls.TControl.BorderSpacing"/>
      <element name="TScrollBox.BorderStyle" link="#LCL.Controls.TWinControl.BorderStyle"/>
      <element name="TScrollBox.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <element name="TScrollBox.ClientHeight"/>
      <element name="TScrollBox.ClientWidth"/>
      <element name="TScrollBox.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TScrollBox.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TScrollBox.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TScrollBox.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TScrollBox.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TScrollBox.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TScrollBox.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TScrollBox.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TScrollBox.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TScrollBox.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TScrollBox.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TScrollBox.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TScrollBox.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TScrollBox.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TScrollBox.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TScrollBox.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TScrollBox.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TScrollBox.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TScrollBox.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TScrollBox.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TScrollBox.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TScrollBox.OnMouseEnter"/>
      <element name="TScrollBox.OnMouseLeave"/>
      <element name="TScrollBox.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TScrollBox.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TScrollBox.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TScrollBox.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TScrollBox.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TScrollBox.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TScrollBox.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TScrollBox.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TScrollBox.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TScrollBox.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TScrollBox.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TScrollBox.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TScrollBox.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TScrollBox.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TScrollBox.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TScrollBox.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TScrollBox.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TScrollBox.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TScrollBox.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- object Visibility: default -->
      <element name="TCustomFrame">
        <short>
          <var>TCustomFrame</var> - the base type for <var>TFrame</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.AddActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.AddActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.RemoveActionList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomFrame.RemoveActionList.ActionList">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignLeft">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignLeft.Reader">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.ReadDesignTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.ReadDesignTop.Reader">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignLeft">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignLeft.Writer">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomFrame.WriteDesignTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.WriteDesignTop.Writer">
        <short></short>
      </element>
      <element name="TCustomFrame.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.GetChildren">
        <short>
          <var>GetChildren</var> - calls inherited <var>GetChildren</var> then accepts ownership of all owned components that have no parent</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomFrame.GetChildren.Proc">
        <short/>
      </element>
      <element name="TCustomFrame.GetChildren.Root">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.Notification">
        <short>
          <var>Notification</var> calls inherited Notification then add or removes the component's action list (depending on what Operation specifies)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
          <link id="#LCL.Controls.TControl.Notification">TControl.Notification</link>
        </seealso>
      </element>
      <element name="TCustomFrame.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomFrame.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.SetParent">
        <short>
          <var>SetParent</var> - calls inherited <var>Setparent</var> after validity checks, then updates the action lists </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.SetParent">TControl.SetParent</link>
        </seealso>
      </element>
      <element name="TCustomFrame.SetParent.AParent">
        <short/>
      </element>
      <element name="TCustomFrame.DefineProperties">
        <short>
          <var>DefineProperties</var>- calculates low and high values for frame design from ancestor class</short>
        <seealso>
          <link id="#rtl.Classes.TComponent.DefineProperties">TComponent.DefineProperties</link>
          <link id="#LCL.Controls.TControl.DefineProperties">TControl.DefineProperties</link>
        </seealso>
      </element>
      <element name="TCustomFrame.DefineProperties.Filer">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomFrame.CalculatePreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomFrame.CalculatePreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomFrame.Create"/>
      <element name="TCustomFrame.Create.AOwner">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomFrame.GetControlClassDefaultSize">
        <short>
          <var>GetControlClassDefaultSize</var> - returns its own defaults for frame design, overriding the inherited values</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
        </seealso>
      </element>
      <element name="TCustomFrame.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFrameClass" link="TCustomFrame"/>
<!-- object Visibility: default -->
      <element name="TFrame">
        <short>
          <var>TFrame</var> - a container for all the other components on a form, or for a group of components within a form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFrame.FLCLVersion" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored" link="TFrame.LCLVersion"/>
      <element name="TFrame.LCLVersionIsStored.Result">
        <short></short>
      </element>
      <element name="TFrame.Create" link="#LCL.Forms.TCustomFrame.Create"/>
      <element name="TFrame.Create.TheOwner">
        <short></short>
      </element>
      <!-- property Visibility: published -->
      <element name="TFrame.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TFrame.Anchors" link="#LCL.Controls.TControl.Anchors"/>
      <element name="TFrame.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TFrame.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <!-- property Visibility: published -->
      <element name="TFrame.BiDiMode"/>
      <element name="TFrame.BorderSpacing"/>
      <element name="TFrame.ChildSizing"/>
      <element name="TFrame.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TFrame.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TFrame.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TFrame.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TFrame.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TFrame.DragCursor" link="#LCL.Controls.TControl.DragCursor"/>
      <element name="TFrame.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TFrame.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TFrame.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TFrame.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TFrame.LCLVersion" link="#LCL.LCLVersion.lcl_version"/>
      <element name="TFrame.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TFrame.OnConstrainedResize" link="#LCL.Controls.TControl.OnConstrainedResize"/>
      <element name="TFrame.OnContextPopup" link="#LCL.Controls.TControl.OnContextPopup"/>
      <element name="TFrame.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TFrame.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TFrame.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TFrame.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TFrame.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TFrame.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TFrame.OnEndDrag" link="#LCL.Controls.TControl.OnEndDrag"/>
      <element name="TFrame.OnEnter" link="#LCL.Controls.TWinControl.OnEnter"/>
      <element name="TFrame.OnExit" link="#LCL.Controls.TWinControl.OnExit"/>
      <element name="TFrame.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TFrame.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TFrame.OnMouseEnter"/>
      <element name="TFrame.OnMouseLeave"/>
      <element name="TFrame.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TFrame.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TFrame.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TFrame.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TFrame.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TFrame.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TFrame.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TFrame.OnStartDrag" link="#LCL.Controls.TControl.OnStartDrag"/>
      <element name="TFrame.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TFrame.ParentBiDiMode"/>
      <element name="TFrame.ParentColor" link="#LCL.Controls.TControl.ParentColor"/>
      <element name="TFrame.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TFrame.ParentShowHint" link="#LCL.Controls.TControl.ParentShowHint"/>
      <element name="TFrame.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TFrame.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TFrame.TabOrder" link="#LCL.Controls.TWinControl.TabOrder"/>
      <element name="TFrame.TabStop" link="#LCL.Controls.TWinControl.TabStop"/>
      <element name="TFrame.Visible" link="#LCL.Controls.TControl.Visible"/>
<!-- object Visibility: default -->
      <element name="TIDesigner">
        <short>
          <var>TIDesigner</var> - a class describing a Form Designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBorderIcon">
        <short>
          <var>TBorderIcon</var> - enumerated type to specify which icon appears on the top border of the Form</short>
        <descr>biSystemMenu - The form has a System menu (Maybe not all windowmanager supports this)<br/>

biMinimize - The form has an minimize button<br/>

biMaximize - The form has a maximize button<br/>

biHelp - When you click this button a Question Cursor appears and the help routines are called if you click on an control
</descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biSystemMenu">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMinimize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biMaximize">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBorderIcon.biHelp">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TBorderIcons">
        <short>
          <var>TBorderIcons</var> - set of <var>TBorderIcon</var>; the group of icons to appear at the top of the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseEvent.CloseAction">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCloseQueryEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseQueryEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCloseQueryEvent.CanClose">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="THelpEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="THelpEvent.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.Command">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.Data">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="THelpEvent.CallHelp">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDropFilesEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDropFilesEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDropFilesEvent.FileNames">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShortCutEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShortCutEvent.Msg">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShortCutEvent.Handled">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormStateType">
        <short>
          <var>TFormStateType</var> - enumerated type to describe the state of a form; whether it is being created or destroyed, its visibility, whether Modal etc</short>
        <descr>
          <p>The valid states are:</p>
          <pre>fsCreating,  // initializing (form streaming)
    fsVisible,   // form should be shown
    fsShowing,
    fsModal,     // form is modal
    fsCreatedMDIChild,
    fsBorderStyleChanged,
    fsFormStyleChanged,
    fsFirstShow,  // form is shown for the first time
    fsDisableAutoSize  </pre>
        </descr>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreating">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsVisible">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsShowing">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsModal">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsCreatedMDIChild">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsBorderStyleChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFormStyleChanged">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsFirstShow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormStateType.fsDisableAutoSize">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TFormState">
        <short>
          <var>TFormState</var> - the set of form states that apply to this form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TModalResult">
        <short>
          <var>TModalResult</var> - the range of values that can be returned as a modal result</short>
        <descr>
          <var>TModalResult</var> represents the value returned by a modal dialog. Even though the type is defined as an integer, instead a few standard constants are used as return results in applications.</descr>
        <seealso>
          <link id="controls.mrNone"/>
          <link id="controls.mrOK"/>
          <link id="controls.mrCancel"/>
          <link id="controls.mrAbort"/>
          <link id="controls.mrRetry"/>
          <link id="controls.mrIgnore"/>
          <link id="controls.mrYes"/>
          <link id="controls.mrNo"/>
          <link id="controls.mrAll"/>
        </seealso>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PModalResult">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TFormHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtFirstShow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtClose">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TFormHandlerType.fhtCreate">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TShowInTaskbar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stDefault">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stAlways">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShowInTaskbar.stNever">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomForm">
        <short>The base type for <var>TForm</var>.
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FActionLists">
        <short>
          <var>FActionLists</var> - local variable holding lists of actions asociated with the Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.FActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.FActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.FAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.FAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.FAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TCustomForm.FBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.FDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.FCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.FDefaultMonitor" link="TCustomForm.DefaultMonitor"/>
      <element name="TCustomForm.FDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.FDummyTextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TCustomForm.FFormState" link="TCustomForm.FormState"/>
      <element name="TCustomForm.FFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.FFormUpdateCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFormHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FHelpFile" link="TCustomForm.HelpFile"/>
      <element name="TCustomForm.FIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.FPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.FPopupParent" link="TCustomForm.PopupParent"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FSmallIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FBigIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FKeyPreview" link="TCustomForm.KeyPreview"/>
      <element name="TCustomForm.FMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.FModalResult" link="TCustomForm.ModalResult"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FLastFocusedControl">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FOldBorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnActivate" link="TCustomForm.OnActivate"/>
      <element name="TCustomForm.FOnClose" link="TCustomForm.OnClose"/>
      <element name="TCustomForm.FOnCloseQuery" link="TCustomForm.OnCloseQuery"/>
      <element name="TCustomForm.FOnCreate" link="TCustomForm.OnCreate"/>
      <element name="TCustomForm.FOnDeactivate" link="TCustomForm.OnDeactivate"/>
      <element name="TCustomForm.FOnDestroy" link="TCustomForm.OnDestroy"/>
      <element name="TCustomForm.FOnDropFiles" link="TCustomForm.OnDropFiles"/>
      <element name="TCustomForm.FOnHelp" link="TCustomForm.OnHelp"/>
      <element name="TCustomForm.FOnHide" link="TCustomForm.OnHide"/>
      <element name="TCustomForm.FOnShortcut" link="TCustomForm.OnShortcut"/>
      <element name="TCustomForm.FOnShow" link="TCustomForm.OnShow"/>
      <element name="TCustomForm.FOnWindowStateChange" link="TCustomForm.OnWindowStateChange"/>
      <element name="TCustomForm.FPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.FPosition" link="TCustomForm.Position"/>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FRealizedShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.FRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.FRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.FRestoredWidth" link="TCustomForm.RestoredWidth"/>
      <element name="TCustomForm.FRestoredHeight" link="TCustomForm.RestoredHeight"/>
      <element name="TCustomForm.FShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TCustomForm.FWindowState" link="TCustomForm.WindowState"/>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetClientHandle" link="TCustomForm.ClientHandle"/>
      <element name="TCustomForm.GetClientHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetEffectiveShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetEffectiveShowInTaskBar.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetMonitor" link="TCustomForm.Monitor"/>
      <element name="TCustomForm.GetMonitor.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetPixelsPerInch" link="TCustomForm.PixelsPerInch"/>
      <element name="TCustomForm.GetPixelsPerInch.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredLeft" link="TCustomForm.RestoredLeft"/>
      <element name="TCustomForm.GetRestoredLeft.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.GetRestoredTop" link="TCustomForm.RestoredTop"/>
      <element name="TCustomForm.GetRestoredTop.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsAutoScrollStored" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.IsAutoScrollStored.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IsForm.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsHelpFileStored" link="TCustomForm.HelpFile"/>
      <element name="TCustomForm.IsHelpFileStored.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsIconStored" link="TCustomForm.Icon"/>
      <element name="TCustomForm.IsIconStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CloseModal">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.FreeIconHandles">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.IconChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IconChanged.Sender">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.IsKeyPreviewStored" link="TCustomForm.KeyPreview"/>
      <element name="TCustomForm.IsKeyPreviewStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActive" link="TCustomForm.Active"/>
      <element name="TCustomForm.SetActive.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveControl" link="TCustomForm.ActiveControl"/>
      <element name="TCustomForm.SetActiveControl.AWinControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetActiveDefaultControl" link="TCustomForm.ActiveDefaultControl"/>
      <element name="TCustomForm.SetActiveDefaultControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAllowDropFiles" link="TCustomForm.AllowDropFiles"/>
      <element name="TCustomForm.SetAllowDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlend" link="TCustomForm.AlphaBlend"/>
      <element name="TCustomForm.SetAlphaBlend.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetAlphaBlendValue" link="TCustomForm.AlphaBlendValue"/>
      <element name="TCustomForm.SetAlphaBlendValue.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetBorderIcons" link="TCustomForm.BorderIcons"/>
      <element name="TCustomForm.SetBorderIcons.NewIcons">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormBorderStyle" link="TCustomForm.BorderStyle"/>
      <element name="TCustomForm.SetFormBorderStyle.NewStyle">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetCancelControl" link="TCustomForm.CancelControl"/>
      <element name="TCustomForm.SetCancelControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDefaultControl" link="TCustomForm.DefaultControl"/>
      <element name="TCustomForm.SetDefaultControl.NewControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetDesigner" link="TCustomForm.Designer"/>
      <element name="TCustomForm.SetDesigner.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFormStyle" link="TCustomForm.FormStyle"/>
      <element name="TCustomForm.SetFormStyle.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetIcon" link="TCustomForm.Icon"/>
      <element name="TCustomForm.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetMenu" link="TCustomForm.Menu"/>
      <element name="TCustomForm.SetMenu.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupMode" link="TCustomForm.PopupMode"/>
      <element name="TCustomForm.SetPopupMode.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPopupParent" link="TCustomForm.PopupParent"/>
      <element name="TCustomForm.SetPopupParent.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetModalResult" link="TCustomForm.ModalResult"/>
      <element name="TCustomForm.SetModalResult.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetPosition" link="TCustomForm.Position"/>
      <element name="TCustomForm.SetPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetShowInTaskbar" link="TCustomForm.ShowInTaskBar"/>
      <element name="TCustomForm.SetShowInTaskbar.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetLastFocusedControl">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.SetLastFocusedControl.AControl">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetWindowState" link="TCustomForm.WindowState"/>
      <element name="TCustomForm.SetWindowState.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMActivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMActivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMCloseQuery">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMCloseQuery.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMDeactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WMDeactivate.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMHelp">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMHelp.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMShowWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMShowWindow.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WMSize.message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WMWindowPosChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.WMWindowPosChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMBiDiModeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.CMBiDiModeChanged.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMParentBiDiModeChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMParentBiDiModeChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowBtnGlyphChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowBtnGlyphChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMAppShowMenuGlyphChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMAppShowMenuGlyphChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMIconChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMIconChanged.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMRelease">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMRelease.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMActivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMActivate.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.CMDeactivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CMDeactivate.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.Handler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TCustomForm.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomForm.FindDefaultForActiveControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FindDefaultForActiveControl.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateMenu">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.UpdateShowInTaskBar">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMShowingChanged">
        <short>
          <var>CMShowingChanged</var> - system message method for showing if the form has changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMShowingChanged.Message">
        <short/>
      </element>
      <element name="TCustomForm.DoShowWindow">
        <short>
          <var>DoShowWindow</var> automatically choose a control to focus</short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Activate">
        <short>
          <var>Activate</var> - method for rendering the Form active</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ActiveChanged">
        <short>
          <var>ActiveChanged</var> - method for a form that is active and changed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AdjustClientRect">
        <short>
          <var>AdjustClientRect</var> - adjusts window size to accommodate borders</short>
        <seealso>
          <link id="#LCL.Controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
        </seealso>
      </element>
      <element name="TCustomForm.AdjustClientRect.Rect">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginFormUpdate">
        <short>
          <var>BeginFormUpdate</var> - start updating the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.ColorIsStored" link="#LCL.Controls.TControl.Color"/>
      <element name="TCustomForm.ColorIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateParams">
        <short>
          <var>CreateParams</var> calls inherited <var>CreateParams</var>, and specifically copies style from parent</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateParams">TWinControl.CreateParams</link>
        </seealso>
      </element>
      <element name="TCustomForm.CreateParams.Params">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateWnd">
        <short>
          <var>CreateWnd</var> calls inherited <var>CreateWnd, </var>signals if a handle is required and attaches a menu to the window if one does not yet exist; activates focus if visible</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
          <link id="#LCL.Forms.TScrollingWinControl.CreateWnd">TScrollingWinControl.CreateWnd</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Deactivate">
        <short>
          <var>Deactivate</var> - method for rendering the Form inactive</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoClose">
        <short>
          <var>DoClose</var> - close the Form using the specified <var>CloseAction</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DoClose.CloseAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoCreate">
        <short>
          <var>DoCreate</var> - perform the Create action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDestroy">
        <short>
          <var>DoDestroy</var>- perform the Destroy action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoHide">
        <short>
          <var>DoHide</var> - method for hiding a previously visible object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoShow">
        <short>
          <var>DoShow</var> - method to redender visible a previously hidden form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.EndFormUpdate">
        <short>
          <var>EndFormUpdate</var> - finish updating the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.GetChildren">
        <short>
          <var>GetChildren</var> calls inherited <var>GetChildren</var> then takes ownership of all components, including those  without parents</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.GetChildren">TComponent.GetChildren</link>
          <link id="#LCL.Controls.TWinControl.GetChildren">TWinControl.GetChildren</link>
        </seealso>
      </element>
      <element name="TCustomForm.GetChildren.Proc">
        <short/>
      </element>
      <element name="TCustomForm.GetChildren.Root">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleCreateException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleCreateException.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleDestroyException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleDestroyException.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.HandleShowHideException">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.HandleShowHideException.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.InitializeWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Loaded">
        <short>
          <var>Loaded</var> - calls inherited <var>Loaded</var>, makes this the active control and gives it focus</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
          <link id="#LCL.Forms.TScrollingWinControl.Loaded">TScrollingWinControl.Loaded</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.ChildHandlesCreated">
        <short>
          <var>ChildHandlesCreated</var> - method for use when handles have been created for descendants</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.ChildHandlesCreated">TWinControl.ChildHandlesCreated</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Notification">
        <short>
          <var>Notification</var> calls inherited Notification then add or removes the component's action list (depending on what Operation specifies)</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TCustomForm.Notification.AComponent">
        <short/>
      </element>
      <element name="TCustomForm.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.PaintWindow" link="#LCL.Controls.TCustomControl.PaintWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.PaintWindow.dc">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.RequestAlign" link="#LCL.Controls.TControl.RequestAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CalculatePreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomForm.CalculatePreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetZOrder">
        <short>
          <var>SetZOrder</var> - set the Z order for the Form; if <var>Topmost </var>is True, Form is on top of all other objects</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetZOrder.Topmost">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetParent" link="#LCL.Controls.TControl.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetParent.NewParent">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.MoveToDefaultPosition">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateShowing">
        <short>
          <var>UpdateShowing</var> - method to update the <var>Visible</var> property</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TWinControl.UpdateShowing">TWinControl.UpdateShowing</link>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetVisible" link="#LCL.Controls.TControl.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetVisible.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.AllAutoSized">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoFirstShow">
        <short>
          <var>DoFirstShow</var> - perform the first Show action since creation of the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateWindowState">
        <short>
          <var>UpdateWindowState</var> - update the state of the Window displaying the Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanging">
        <short>
          <var>VisibleChanging</var> - method for dealing with a Form whose Visible property is changing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.VisibleChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.WndProc">
        <short>
          <var>WndProc</var> - performs actions specific to the message then calls inherited <var>WndProc</var>
        </short>
        <descr>
          <p>
            <var>WndProc</var> - performs actions specific to the message then calls inherited <var>WndProc</var>
          </p>
          <p>Specific messages include:</p>
          <p>Activate, SetFocus. KillFocus; Exit, Enter; Window Position Changing; Draw Item</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#LCL.Controls.TControl.WndProc">TControl.WndProc</link>
          <link id="#LCL.Controls.TWinControl.WndProc">TWinControl.WndProc</link>
        </seealso>
      </element>
      <element name="TCustomForm.WndProc.TheMessage">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.VisibleIsStored" link="TCustomForm.Visible"/>
      <element name="TCustomForm.VisibleIsStored.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoSendBoundsToInterface" link="#LCL.Controls.TWinControl.DoSendBoundsToInterface">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAutoSize" link="#LCL.Controls.TControl.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoSize" link="#LCL.Controls.TControl.SetAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetAutoSize.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.SetAutoScroll" link="TCustomForm.AutoScroll"/>
      <element name="TCustomForm.SetAutoScroll.Value">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoAddActionList">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.DoAddActionList.List">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoRemoveActionList">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.DoRemoveActionList.List">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.BeginAutoDrag">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DoDock" link="#LCL.Controls.TControl.DoDock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DoDock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.DoDock.ARect">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetFloating" link="#LCL.Controls.TControl.GetFloating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetFloating.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetDefaultDockCaption">
        <short>
          <var>GetDefaultDockCaption</var> - returns the default caption to be used for docking</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetDefaultDockCaption.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionExecute">
        <short>
          <var>CMActionExecute</var> - system message method for executing action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionExecute.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CMActionUpdate">
        <short>
          <var>CMActionUpdate</var> - system message method for updating action</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CMActionUpdate.Message">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoExecuteAction">
        <short>Asks every visible control to Execute the specified action <var>ExeAction</var>.</short>
        <descr>
          <p>DoExecuteAction asks every visible control to Execute the specified action <var>ExeAction</var>. If some control executes it and returns true, then the traversal of visible components is stopped. All child controls (and its children etc) are queried too.</p>
          <p>For example you have</p>
          <code>TForm
   TPanel
     TButton
     TCheckBox
   TMemo</code>
          <p>then the following controls are queried in this order: TPanel, TButton, TCheckBox, TMemo.</p>
          <p>But first of all, the Form itself and the ActiveControl are asked to execute the given action.</p>
        </descr>
      </element>
      <element name="TCustomForm.DoExecuteAction.Result">
        <short>True, if any control handles the action.</short>
      </element>
      <element name="TCustomForm.DoExecuteAction.ExeAction">
        <short>Action to execute.</short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.DoUpdateAction">
        <short>
          <var>DoUpdateAction</var> - asks all visible controls to update the specified action</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.DoExecuteAction">DoExecuteAction</link>
        </seealso>
      </element>
      <element name="TCustomForm.DoUpdateAction.Result">
        <short/>
      </element>
      <element name="TCustomForm.DoUpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.UpdateActions">
        <short>
          <var>UpdateActions</var> - method for updating actions</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomForm</var>: checks for correct <var>ClassType</var>, looks for required resources then creates the Form</short>
        <descr>This constructor can override the constructor of an ancestor class
</descr>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TScrollingWinControl.Create">TScrollingWinControl.Create</link>
        </seealso>
      </element>
      <element name="TCustomForm.Create.AOwner">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.CreateNew">
        <short>
          <var>CreateNew</var> - constructor for creating a completely new form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CreateNew.AOwner">
        <short/>
      </element>
      <element name="TCustomForm.CreateNew.Num">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomForm.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AfterConstruction">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.BeforeDestruction">
        <short>
          <var>BeforeDestruction</var> - method to be applied before Form is destroyed (usually involves clean-up)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <element name="TCustomForm.BigIconHandle">
        <short>
          <var>BigIconHandle</var> - returns system Handle for large Icon</short>
      </element>
      <element name="TCustomForm.BigIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Close">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CloseQuery">
        <short>Is the associated query to be closed?</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.CloseQuery.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.DefocusControl">
        <short>
          <var>DefocusControl</var> - withdraws focus from the specified control, removing it if required</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.DefocusControl.Control">
        <short/>
      </element>
      <element name="TCustomForm.DefocusControl.Removing">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.DestroyWnd" link="#LCL.Controls.TWinControl.DestroyWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.EnsureVisible">
        <short>Ensure that this form is always visible, if necessary moving it to the top (front) of the stack of images</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.EnsureVisible.AMoveToTop">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.FocusControl">
        <short>
          <var>FocusControl</var> - giving focus to specified control, automatically bringing form to front</short>
        <descr/>
        <errors>If the control or one of its parents is not visible or disabled an exception will be raised.
</errors>
        <seealso/>
      </element>
      <element name="TCustomForm.FocusControl.WinControl">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.FormIsUpdating" link="#LCL.Controls.TControl.FormIsUpdating">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.FormIsUpdating.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetFormImage">
        <short>
          <var>GetFormImage</var> - gets a Bitmap image for the Form</short>
      </element>
      <element name="TCustomForm.GetFormImage.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetRolesForControl">
        <short>
          <var>GetRolesForControl</var> - returns a set of roles (default, cancel) for the Form </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.GetRolesForControl.Result">
        <short/>
      </element>
      <element name="TCustomForm.GetRolesForControl.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Hide" link="#LCL.Controls.TControl.Hide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfDropFiles">
        <short>
          <var>IntfDropFiles</var> - Invokes <var>OnDropFilesEvent</var> of the form. This function is called by the interface. </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.IntfHelp">
        <short>
          <var>IntfHelp</var> - Show help for control or menu item. This function is called by the interface.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IntfHelp.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.IsShortcut">
        <short>
          <var>IsShortcut</var> - if True, the specified Key and Message are active as a shortcut</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.IsShortcut.Result">
        <short/>
      </element>
      <element name="TCustomForm.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.MakeFullyVisible">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MakeFullyVisible.AMonitor">
        <short></short>
      </element>
      <element name="TCustomForm.MakeFullyVisible.UseWorkarea">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.AutoSizeDelayedHandle">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.AutoSizeDelayedHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.GetPreferredSize">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetPreferredSize.PreferredWidth">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.PreferredHeight">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.Raw">
        <short></short>
      </element>
      <element name="TCustomForm.GetPreferredSize.WithThemeSpace">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Release">
        <short>Set free the resources of the form </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.CanFocus">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.CanFocus.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetFocus" link="#LCL.Controls.TWinControl.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.SetFocusedControl">
        <short>
          <var>SetFocusedControl</var> - method for giving focus to specified control; returns True if successful</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetFocusedControl.Result">
        <short/>
      </element>
      <element name="TCustomForm.SetFocusedControl.Control">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetRestoredBounds">
        <short>
          <var>SetRestoredBounds</var> - set the bounds defining the position of the restored control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ALeft">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.ATop">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AWidth">
        <short/>
      </element>
      <element name="TCustomForm.SetRestoredBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Show" link="#LCL.Controls.TControl.Show">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ShowModal">
        <short>Show this form as modal - ie control cannot be resumed by another form until the current form is closed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.ShowModal.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.ShowOnTop">
        <short>Shows this form as the top (nearest) item of any stack of windows or images.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.SmallIconHandle">
        <short>
          <var>SmallIconHandle</var> - returns system Handle for small Icon</short>
      </element>
      <element name="TCustomForm.SmallIconHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.WantChildKey">
        <short>
          <var>WantChildKey</var> - returns True if the specified child control requires a key (Message)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.WantChildKey.Result">
        <short/>
      </element>
      <element name="TCustomForm.WantChildKey.Child">
        <short/>
      </element>
      <element name="TCustomForm.WantChildKey.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerFirstShow">
        <short>
          <var>AddHandlerFirstShow</var> - perform the action for adding a handler at the time of first showing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerFirstShow.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerFirstShow">
        <short>
          <var>RemoveHandlerFirstShow</var> - perform the action for removing the handler on the first showing</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerFirstShow.OnFirstShowHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerClose">
        <short>
          <var>AddHandlerClose</var> - adds a handler for closing Form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerClose.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerClose">
        <short>
          <var>RemoveHandlerClose</var> - removes handler for closing form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerClose.OnCloseHandler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.AddHandlerCreate">
        <short>
          <var>AddHandlerCreate</var> - performs the OnCreateHandler event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <element name="TCustomForm.AddHandlerCreate.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.RemoveHandlerCreate">
        <short>
          <var>RemoveHandlerCreate</var> - removes the handler for the Create event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.RemoveHandlerCreate.OnCreateHandler">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.ActiveMDIChild">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.ActiveMDIChild.Result">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.GetMDIChildren">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.GetMDIChildren.Result">
        <short></short>
      </element>
      <element name="TCustomForm.GetMDIChildren.AIndex">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomForm.MDIChildCount">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MDIChildCount.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Dock" link="#LCL.Controls.TControl.Dock">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomForm.Dock.NewDockSite">
        <short/>
      </element>
      <element name="TCustomForm.Dock.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.UpdateDockCaption">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.UpdateDockCaption.Exclude">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Active">
        <short>Is true when the form has the focus</short>
        <descr>Use active to check if the form has the focus</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveControl">
        <short>Specifies the active control on the form</short>
        <descr>Use this to get or set the active control on this form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ActiveDefaultControl">
        <short>Specifies the active default control on the Form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AllowDropFiles">
        <short>Specifies if files are allowed to be dropped on this form.</short>
        <descr>Set AllowDropFiles event to True to allow dropping files on this form. It is set to False by default.
</descr>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlend">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AlphaBlendValue">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.AutoScroll">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderIcons">
        <short>Specifies which icons appear on the top of the form</short>
        <descr>Use bordericons flags to get or set the icons that appear on the top border of the form. <br/>

		By default we see down-triangle or other generic icon on the left, <br/>

		which activates a pop-up system menu allowing closure or re-sizing of the form, <br/>

		and on the right end we see the minimise and  re-size/maximise buttons, <br/>

		but of course these can be customised by the application programmer.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.BorderStyle">
        <short>The border style for this Form</short>
        <descr>
          <p>Use borderstyle to get or set the appearance of the form's border. </p>
          <p>By default it is a sizeable window, but it could, for example, be a dialog form or a tool window, or could be non-sizeable</p>
          <p>This property is slightly different (has a differert base type) from the <var>TCustomControl.BorderStyle</var>
When the form is put into another control the window borders depend on the widgetset. There are no borders under gtk.
</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.CancelControl">
        <short>The control associated with the cancel action</short>
        <descr>
          <p>Determines the control associated with the Cancel action (exit from the control without changing anything).</p>
          <p>This is usually a button with the caption 'Cancel', but might be an 'Exit' button or anything else the application programmer decides.</p>
          <p>This control is selected either by explicitly clicking with the mouse, or by hitting the 'Esc' key</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Caption" link="#LCL.Controls.TControl.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.ClientHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Color" link="#LCL.Controls.TControl.Color">
        <descr>The form's colour; by default it is the same as the colour specified for button faces.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultControl">
        <short>The control associated with the default action for this form</short>
        <descr>Reads or sets a flag determining the default control. <br/>

		This is typically a button such as 'Accept' which is highlighted in some way on-screen to indicate that this is the default action, and is selected either by hitting 'Return' or 'Enter' or by selecting that control with the mouse</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.DefaultMonitor">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Designer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormState">
        <short>Determines the state of the form</short>
        <descr>Reads or writes a flag to determine the form's state: <br/>


		is it being created, is this its first showing, is the border style being changed, etc. <br/>


		FormState is a set, so could take zero or more of possible values.</descr>
        <seealso>
          <link id="TFormState"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FormStyle">
        <short>Determinates the style of the form</short>
        <descr>
          <p>Reads or writes flag to determine the style of the form.</p>
          <p>Default is 'normal', but could be MDIChild or MDINormal, could stay on top or could be a 'Splash' form.</p>
          <p>FormStyle is a set, so could take zero or more of these values.</p>
        </descr>
        <seealso>
          <link id="#lcl.Controls.TFormStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.HelpFile">
        <short>Specifies the help file that is used by the form</short>
        <descr>Reads or writes a flag to determine identity of Help file, <br/>

		and to determine whether its name is stored.<br/>

		Property contains filename as a string.</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Icon">
        <short>The Icon associated with this Form (which may appear in menus, directories, ListBoxes etc)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.KeyPreview">
        <short>
          <var>KeyPreview</var> - if True, Key Preview is possible</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.MDIChildren">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TCustomForm.MDIChildren.I">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Menu">
        <short>Specifies a MainMenu for this form</short>
        <descr>Drop a TMainMenu on the form and select it here to show it on the form.<br/>
        </descr>
        <seealso>
          <link id="#lcl.Menus.TMainMenu"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ModalResult">
        <short>Specifies the return value of an modal form</short>
        <descr>Reads or writes a flag to determine whether there is a modal resut. <br/>

		If the form is modal, returns an integer value.</descr>
        <seealso/>
      </element>
      <element name="TCustomForm.Monitor">
        <short>
          <var>Monitor</var> - returns the monitor on which the form is mostly places (the biggest form area is placed)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnActivate">
        <short>Event called when the form receives focus</short>
        <descr>This method is called when the form receives focus for the first time at application start up and then subsequently each time focus is changed from another window of the same application to this window. For focus changes between different applications the event Application.OnActivate is called instead.</descr>
        <seealso>
          <link id="#LCL.Forms.TApplication.OnActivate">TApplication.OnActivate</link>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnClose">
        <short>Event handler for closing the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCloseQuery">
        <short>Event handler for closing the query associated with the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnCreate">
        <short>Event handler for creating the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDeactivate">
        <short>Event handler for deactivating the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDestroy">
        <short>Event handler when the form is being destroyed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnDropFiles">
        <short>The event invoked when file is dropped on this form.</short>
        <descr>The OnDropFiles event is invoked when user drops one or multiple files on this form. You enable this feature by setting AllowDropFiles property.</descr>
        <seealso>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHelp">
        <short>Event handler when Help is required</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnHide">
        <short>Event handler if form is being hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnResize" link="#LCL.Controls.TControl.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShortcut">
        <short>Event handler if shortcut key is pressed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnShow">
        <short>Event handler if form is to be shown</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.OnWindowStateChange">
        <short>Event handler for a change in the window state</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PixelsPerInch">
        <short>The scaling of the form in absolute terms</short>
        <descr>
          <p>Reads or writes a flag to determine the scaling factor (a longinteger).</p>
          <p>Not normally stored locally</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupMode">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.PopupParent">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Position">
        <short>The position of the form on the screen</short>
        <descr>Reads or writes a flag to determine screen position of form. <br/>


		By default it is in the position that it was placed in the Form Designer</descr>
        <seealso>
          <link id="TPosition"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredHeight">
        <short>The height of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredLeft">
        <short>The position of the left edge of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredTop">
        <short>The position of the top edge of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.RestoredWidth">
        <short>The width of the form when it is restored (ie changes from minimised or maximised)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.ShowInTaskBar">
        <short>Should the form be shown in the system Task Bar?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.TextHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Visible" link="#LCL.Controls.TControl.Visible">
        <descr>Set or get this to set the form visible/hidden or get the status of the form
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.WindowState">
        <short>Represents how the form appears on the screen</short>
        <descr>Reads or write flag to determine state of the window on screen. <br/>


		Default is 'normal' (ie not minimised or maximised)</descr>
        <seealso>
          <link id="TWindowState"/>
        </seealso>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomFormClass" link="TCustomForm">
        <short>
          <var>TCustomFormClass</var> - class of <var>TCustomForm</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TForm">
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TForm.CreateWnd" link="#LCL.Forms.TScrollingWinControl.CreateWnd">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TForm.FLCLVersion" link="TForm.LCLVersion"/>
      <!-- function Visibility: private -->
      <element name="TForm.LCLVersionIsStored" link="TForm.LCLVersion"/>
      <element name="TForm.LCLVersionIsStored.Result">
        <short></short>
      </element>
      <element name="TForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded">
        <seealso>
          <link id="#rtl.Classes.TComponent.Loaded">TComponent.Loaded</link>
        </seealso>
      </element>
      <element name="TForm.Create"/>
      <element name="TForm.Create.TheOwner">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Cascade">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Next">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Previous">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TForm.Tile">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Action" link="#LCL.Controls.TControl.Action"/>
      <element name="TForm.ActiveControl" link="#LCL.Forms.TCustomForm.ActiveControl"/>
      <element name="TForm.Align" link="#LCL.Controls.TControl.Align"/>
      <element name="TForm.AllowDropFiles" link="#LCL.Forms.TCustomForm.AllowDropFiles"/>
      <element name="TForm.AlphaBlend"/>
      <element name="TForm.AlphaBlendValue"/>
      <element name="TForm.Anchors"/>
      <element name="TForm.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll"/>
      <element name="TForm.AutoSize" link="#LCL.Controls.TControl.AutoSize"/>
      <element name="TForm.BiDiMode" link="#LCL.Controls.TControl.BiDiMode"/>
      <element name="TForm.BorderIcons" link="#LCL.Forms.TCustomForm.BorderIcons"/>
      <element name="TForm.BorderStyle" link="#LCL.Forms.TCustomForm.BorderStyle"/>
      <element name="TForm.BorderWidth"/>
      <element name="TForm.Caption" link="#LCL.Controls.TControl.Caption"/>
      <element name="TForm.ChildSizing" link="#LCL.Controls.TWinControl.ChildSizing"/>
      <!-- property Visibility: public -->
      <element name="TForm.ClientHandle">
        <short>The operating system handle for the client</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TForm.ClientHeight" link="#LCL.Controls.TControl.ClientHeight"/>
      <element name="TForm.ClientWidth" link="#LCL.Controls.TControl.ClientWidth"/>
      <element name="TForm.Color" link="#LCL.Controls.TControl.Color"/>
      <element name="TForm.Constraints" link="#LCL.Controls.TControl.Constraints"/>
      <element name="TForm.DefaultMonitor"/>
      <element name="TForm.DockManager" link="#LCL.Controls.TWinControl.DockManager"/>
      <element name="TForm.DockSite" link="#LCL.Controls.TWinControl.DockSite"/>
      <element name="TForm.DragKind" link="#LCL.Controls.TControl.DragKind"/>
      <element name="TForm.DragMode" link="#LCL.Controls.TControl.DragMode"/>
      <element name="TForm.Enabled" link="#LCL.Controls.TControl.Enabled"/>
      <element name="TForm.Font" link="#LCL.Controls.TControl.Font"/>
      <element name="TForm.FormStyle" link="#LCL.Forms.TCustomForm.FormStyle"/>
      <element name="TForm.HelpFile" link="#LCL.Forms.TCustomForm.HelpFile"/>
      <element name="TForm.Icon" link="#LCL.Forms.TCustomForm.Icon"/>
      <element name="TForm.KeyPreview" link="#LCL.Forms.TCustomForm.KeyPreview"/>
      <element name="TForm.LCLVersion">
        <short>The version of the LCL as string. Used to distinguish form streams of different versions.</short>
      </element>
      <element name="TForm.Menu" link="#LCL.Forms.TCustomForm.Menu"/>
      <element name="TForm.OnActivate" link="#LCL.Forms.TCustomForm.OnActivate"/>
      <element name="TForm.OnChangeBounds" link="#LCL.Controls.TControl.OnChangeBounds"/>
      <element name="TForm.OnClick" link="#LCL.Controls.TControl.OnClick"/>
      <element name="TForm.OnClose" link="#LCL.Forms.TCustomForm.OnClose"/>
      <element name="TForm.OnCloseQuery" link="#LCL.Forms.TCustomForm.OnCloseQuery"/>
      <element name="TForm.OnContextPopup"/>
      <element name="TForm.OnCreate" link="#LCL.Forms.TCustomForm.OnCreate"/>
      <element name="TForm.OnDblClick" link="#LCL.Controls.TControl.OnDblClick"/>
      <element name="TForm.OnDeactivate" link="#LCL.Forms.TCustomForm.OnDeactivate"/>
      <element name="TForm.OnDestroy" link="#LCL.Forms.TCustomForm.OnDestroy"/>
      <element name="TForm.OnDockDrop" link="#LCL.Controls.TWinControl.OnDockDrop"/>
      <element name="TForm.OnDockOver" link="#LCL.Controls.TWinControl.OnDockOver"/>
      <element name="TForm.OnDragDrop" link="#LCL.Controls.TControl.OnDragDrop"/>
      <element name="TForm.OnDragOver" link="#LCL.Controls.TControl.OnDragOver"/>
      <element name="TForm.OnDropFiles" link="#LCL.Forms.TCustomForm.OnDropFiles"/>
      <element name="TForm.OnEndDock" link="#LCL.Controls.TControl.OnEndDock"/>
      <element name="TForm.OnGetSiteInfo" link="#LCL.Controls.TWinControl.OnGetSiteInfo"/>
      <element name="TForm.OnHelp" link="#LCL.Forms.TCustomForm.OnHelp"/>
      <element name="TForm.OnHide" link="#LCL.Forms.TCustomForm.OnHide"/>
      <element name="TForm.OnKeyDown" link="#LCL.Controls.TWinControl.OnKeyDown"/>
      <element name="TForm.OnKeyPress" link="#LCL.Controls.TWinControl.OnKeyPress"/>
      <element name="TForm.OnKeyUp" link="#LCL.Controls.TWinControl.OnKeyUp"/>
      <element name="TForm.OnMouseDown" link="#LCL.Controls.TControl.OnMouseDown"/>
      <element name="TForm.OnMouseEnter"/>
      <element name="TForm.OnMouseLeave"/>
      <element name="TForm.OnMouseMove" link="#LCL.Controls.TControl.OnMouseMove"/>
      <element name="TForm.OnMouseUp" link="#LCL.Controls.TControl.OnMouseUp"/>
      <element name="TForm.OnMouseWheel" link="#LCL.Controls.TControl.OnMouseWheel"/>
      <element name="TForm.OnMouseWheelDown" link="#LCL.Controls.TControl.OnMouseWheelDown"/>
      <element name="TForm.OnMouseWheelUp" link="#LCL.Controls.TControl.OnMouseWheelUp"/>
      <element name="TForm.OnPaint" link="#LCL.Controls.TCustomControl.OnPaint"/>
      <element name="TForm.OnResize" link="#LCL.Controls.TControl.OnResize"/>
      <element name="TForm.OnShortCut" link="#LCL.Forms.TCustomForm.OnShortcut"/>
      <element name="TForm.OnShow" link="#LCL.Forms.TCustomForm.OnShow"/>
      <element name="TForm.OnShowHint" link="#LCL.Controls.TControl.OnShowHint"/>
      <element name="TForm.OnStartDock" link="#LCL.Controls.TControl.OnStartDock"/>
      <element name="TForm.OnUnDock" link="#LCL.Controls.TWinControl.OnUnDock"/>
      <element name="TForm.OnUTF8KeyPress" link="#LCL.Controls.TWinControl.OnUTF8KeyPress"/>
      <element name="TForm.OnWindowStateChange" link="#LCL.Forms.TCustomForm.OnWindowStateChange"/>
      <element name="TForm.ParentBiDiMode" link="#LCL.Controls.TControl.ParentBiDiMode"/>
      <element name="TForm.ParentFont" link="#LCL.Controls.TControl.ParentFont"/>
      <element name="TForm.PixelsPerInch" link="#LCL.Forms.TCustomForm.PixelsPerInch"/>
      <element name="TForm.PopupMenu" link="#LCL.Controls.TControl.PopupMenu"/>
      <element name="TForm.PopupMode"/>
      <element name="TForm.PopupParent"/>
      <element name="TForm.Position"/>
      <element name="TForm.SessionProperties" link="#LCL.Controls.TControl.SessionProperties"/>
      <element name="TForm.ShowHint" link="#LCL.Controls.TControl.ShowHint"/>
      <element name="TForm.ShowInTaskBar" link="#LCL.Forms.TCustomForm.ShowInTaskBar"/>
      <element name="TForm.UseDockManager" link="#LCL.Controls.TWinControl.UseDockManager"/>
      <element name="TForm.Visible" link="#LCL.Controls.TControl.Visible"/>
      <element name="TForm.WindowState" link="#LCL.Forms.TCustomForm.WindowState"/>
      <!-- "class of" type Visibility: default -->
      <element name="TFormClass">
        <short>
          <var>TFormClass</var> - class of <var>TForm</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TCustomDockForm">
        <short>
          <var>TCustomDockForm</var> - Base class for docking forms</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoAddDockClient" link="#LCL.Controls.TWinControl.DoAddDockClient">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.Client">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoAddDockClient.ARect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.DoRemoveDockClient" link="#LCL.Controls.TWinControl.DoRemoveDockClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.DoRemoveDockClient.Client">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.GetSiteInfo" link="#LCL.Controls.TWinControl.GetSiteInfo">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.Client">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.InfluenceRect">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.MousePos">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.GetSiteInfo.CanDock">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomDockForm.Loaded" link="#LCL.Forms.TCustomForm.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomDockForm.Create">
        <short>
          <var>Create</var> - constructor for <var>TCustomDockForm</var>: performs <var>CreateNew</var> then initialises autoscroll and style properties</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#LCL.Forms.TCustomForm.Create">TCustomForm.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomDockForm.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.AutoScroll" link="#LCL.Forms.TScrollingWinControl.AutoScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.BorderStyle" link="#LCL.Forms.TCustomForm.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomDockForm.FormStyle" link="#LCL.Forms.TCustomForm.FormStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomDockForm.PixelsPerInch" link="#LCL.Forms.TCustomForm.PixelsPerInch">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="THintWindow">
        <short>Hint Window - the popup box containing helpful information that appears when the mouse pointer hovers over an object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FActivating">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="THintWindow.FAlignment" link="THintWindow.Alignment"/>
      <element name="THintWindow.FAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.FAutoHideTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="THintWindow.FHideInterval" link="THintWindow.HideInterval"/>
      <!-- function Visibility: private -->
      <element name="THintWindow.GetDrawTextFlags">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.GetDrawTextFlags.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetAutoHide" link="THintWindow.AutoHide"/>
      <element name="THintWindow.SetAutoHide.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.AutoHideHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.AutoHideHint.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="THintWindow.SetHideInterval">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.SetHideInterval.Value">
        <short/>
      </element>
      <element name="THintWindow.WSRegisterClass" link="#LCL.LCLClasses.TLCLComponent.WSRegisterClass"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.WMNCHitTest">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.WMNCHitTest.Message">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.DoShowWindow" link="#LCL.Forms.TCustomForm.DoShowWindow"/>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.UpdateRegion">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="THintWindow.Create"/>
      <element name="THintWindow.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="THintWindow.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHint">
        <short>Allow the hint message to be displayed in the specified rectangular space</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.ActivateHint.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHint.AHint">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ActivateHintData">
        <short>Allow the hint message to be displayed, with a pointer to further data</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.ActivateHintData.ARect">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AHint">
        <short/>
      </element>
      <element name="THintWindow.ActivateHintData.AData">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="THintWindow.CalcHintRect">
        <short>Work out the size of the rectangle required to display the specified hint message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.CalcHintRect.Result">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.MaxWidth">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.AHint">
        <short/>
      </element>
      <element name="THintWindow.CalcHintRect.AData">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.InitializeWnd">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.ReleaseHandle">
        <short>Release the handle for the hint message and return it to the system</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="THintWindow.Paint" link="#LCL.Controls.TCustomControl.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="THintWindow.SetBounds">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="THintWindow.SetBounds.ALeft">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.ATop">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.AWidth">
        <short></short>
      </element>
      <element name="THintWindow.SetBounds.AHeight">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="THintWindow.GetControlClassDefaultSize" link="#LCL.Controls.TControl.GetControlClassDefaultSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="THintWindow.GetControlClassDefaultSize.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.Alignment">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.AutoHide">
        <short>Does the hint disappear (get hidden) after a while?</short>
        <descr>If <var>AutoHide</var> is TRUE, the hint disappears afer an interval specified by <link id="THintWindow.HideInterval">HideInterval</link>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.BiDiMode">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="THintWindow.HideInterval">
        <short>The time after which the displayed hint disappears</short>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="THintWindowClass">
        <short>
          <var>THintWindowClass</var> - class of <var>THintWindow</var>
        </short>
        <descr/>
        <seealso/>
      </element>
<!-- object Visibility: default -->
      <element name="TMonitor">
        <short>
          <var>TMonitor</var> - system monitor</short>
        <descr>TMonitor contains properties to access visible and work dimensions of the system monitor.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMonitor.FHandle" link="TMonitor.Handle"/>
      <element name="TMonitor.FMonitorNum" link="TMonitor.MonitorNum"/>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetInfo">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetInfo.Result">
        <short></short>
      </element>
      <element name="TMonitor.GetInfo.Info">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetLeft">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetHeight">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetHeight.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWidth">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetWidth.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetBoundsRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetBoundsRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetWorkareaRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetWorkareaRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitor.GetPrimary">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitor.GetPrimary.Result">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitor.BoundsRect">
        <short>
          <var>BoundsRect</var> - the logical dimensions of the monitor</short>
      </element>
      <element name="TMonitor.Handle">
        <short>
          <var>Handle</var> - system handle of monitor</short>
      </element>
      <element name="TMonitor.Height">
        <short>
          <var>Height</var> - the logical height of the monitor</short>
      </element>
      <element name="TMonitor.Left">
        <short>
          <var>Left</var> - the logical position of the left side of the monitor</short>
      </element>
      <element name="TMonitor.MonitorNum">
        <short>
          <var>MonitorNum</var> - index of the monitor in the screen monitors list</short>
      </element>
      <element name="TMonitor.Primary">
        <short>
          <var>Primary</var> - indicates whether this monitor is primary</short>
      </element>
      <element name="TMonitor.Top">
        <short>
          <var>Top</var> - the logical position of the top side of the monitor</short>
      </element>
      <element name="TMonitor.Width">
        <short>
          <var>Width</var> - the logical width of the monitor</short>
      </element>
      <element name="TMonitor.WorkareaRect">
        <short>
          <var>WorkareaRect</var> - the logical dimensions of the monitor except the unusable parts (like the taskbar, the dockbar, the global menu)</short>
      </element>

<!-- object Visibility: default -->
      <element name="TMonitorList">
        <short>
          <var>TMonitorList</var> - a list of monitors</short>
      </element>
      <!-- function Visibility: private -->
      <element name="TMonitorList.GetItem">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.GetItem.Result">
        <short></short>
      </element>
      <element name="TMonitorList.GetItem.AIndex">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TMonitorList.SetItem">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.SetItem.AIndex">
        <short></short>
      </element>
      <element name="TMonitorList.SetItem.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMonitorList.Notify">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Notify.Ptr">
        <short></short>
      </element>
      <element name="TMonitorList.Notify.Action">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TMonitorList.Items">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorList.Items.AIndex">
        <short></short>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PCursorRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCursorRec">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Next">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Index">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCursorRec.Handle">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenFormEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenFormEvent.Form">
        <short/>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TScreenControlEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreenControlEvent.LastControl">
        <short/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TScreenNotification">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreenNotification.snFormAdded">
        <short/>
      </element>
      <element name="TScreenNotification.snRemoveForm">
        <short/>
      </element>
      <element name="TScreenNotification.snActiveControlChanged">
        <short/>
      </element>
      <element name="TScreenNotification.snActiveFormChanged">
        <short/>
      </element>
      <element name="TScreenNotification.snFormVisibleChanged">
        <short></short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TMonitorDefaultTo">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TMonitorDefaultTo.mdNearest">
        <short></short>
      </element>
      <element name="TMonitorDefaultTo.mdNull">
        <short></short>
      </element>
      <element name="TMonitorDefaultTo.mdPrimary">
        <short></short>
      </element>
<!-- object Visibility: default -->
      <element name="TScreen">
        <short>Screen - the visible area</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FActiveControl" link="TScreen.ActiveControl"/>
      <element name="TScreen.FActiveCustomForm" link="TScreen.ActiveCustomForm"/>
      <element name="TScreen.FActiveForm" link="TScreen.ActiveForm"/>
      <element name="TScreen.FCursor" link="TScreen.Cursor"/>
      <element name="TScreen.FCursorCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCursorMap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.FCustomFormsZOrdered" link="TScreen.CustomFormsZOrdered"/>
      <element name="TScreen.FDefaultCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.FFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.FFonts" link="TScreen.Fonts"/>
      <element name="TScreen.FFormList" link="TScreen.Forms"/>
      <element name="TScreen.FDataModuleList" link="TScreen.DataModules"/>
      <element name="TScreen.FIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.FMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.FScreenHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FLastActiveCustomForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FMonitors" link="TScreen.Monitors"/>
      <element name="TScreen.FOnActiveControlChange" link="TScreen.OnActiveControlChange"/>
      <element name="TScreen.FOnActiveFormChange" link="TScreen.OnActiveFormChange"/>
      <element name="TScreen.FPixelsPerInch" link="TScreen.PixelsPerInch"/>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSaveFocusedList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScreen.FSystemFont" link="TScreen.SystemFont"/>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DeleteCursor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.DeleteCursor.AIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyCursors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DestroyMonitors">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.GetCursors.Result">
        <short/>
      </element>
      <element name="TScreen.GetCursors.AIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormCount" link="TScreen.CustomFormCount"/>
      <element name="TScreen.GetCustomFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormZOrderCount" link="TScreen.CustomFormZOrderCount"/>
      <element name="TScreen.GetCustomFormZOrderCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomForms" link="TScreen.CustomForms"/>
      <element name="TScreen.GetCustomForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomForms.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetCustomFormsZOrdered" link="TScreen.CustomFormZOrdered"/>
      <element name="TScreen.GetCustomFormsZOrdered.Result">
        <short/>
      </element>
      <element name="TScreen.GetCustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModuleCount" link="TScreen.DataModuleCount"/>
      <element name="TScreen.GetDataModuleCount.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDataModules" link="TScreen.DataModules"/>
      <element name="TScreen.GetDataModules.Result">
        <short></short>
      </element>
      <element name="TScreen.GetDataModules.AIndex">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopLeft" link="TScreen.DesktopLeft"/>
      <element name="TScreen.GetDesktopLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopTop" link="TScreen.DesktopTop"/>
      <element name="TScreen.GetDesktopTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopHeight" link="TScreen.DesktopHeight"/>
      <element name="TScreen.GetDesktopHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopWidth" link="TScreen.DesktopWidth"/>
      <element name="TScreen.GetDesktopWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetDesktopRect" link="TScreen.DesktopRect"/>
      <element name="TScreen.GetDesktopRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFonts" link="TScreen.Fonts"/>
      <element name="TScreen.GetFonts.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetFormCount" link="TScreen.FormCount"/>
      <element name="TScreen.GetFormCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetForms" link="TScreen.Forms"/>
      <element name="TScreen.GetForms.Result">
        <short/>
      </element>
      <element name="TScreen.GetForms.IIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetHeight" link="TScreen.Height"/>
      <element name="TScreen.GetHeight.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitor" link="TScreen.Monitors"/>
      <element name="TScreen.GetMonitor.Result">
      <short></short>
      </element>
      <element name="TScreen.GetMonitor.Index">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetMonitorCount" link="TScreen.MonitorCount"/>
      <element name="TScreen.GetMonitorCount.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetPrimaryMonitor" link="TScreen.PrimaryMonitor"/>
      <element name="TScreen.GetPrimaryMonitor.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWidth" link="TScreen.Width"/>
      <element name="TScreen.GetWidth.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.AddForm.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveForm.AForm">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.SetFocusedForm" link="TScreen.FocusedForm"/>
      <element name="TScreen.SetFocusedForm.Result">
        <short></short>
      </element>
      <element name="TScreen.SetFocusedForm.AForm">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursor" link="TScreen.Cursor"/>
      <element name="TScreen.SetCursor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetCursors" link="TScreen.Cursors"/>
      <element name="TScreen.SetCursors.AIndex">
        <short/>
      </element>
      <element name="TScreen.SetCursors.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.SetHintFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.SetIconFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.SetMenuFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.SetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.SetSystemFont.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateLastActive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.UpdateMonitors">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RestoreLastActive">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TScreen.AddHandler.Handler">
        <short/>
      </element>
      <element name="TScreen.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TScreen.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoAddDataModule">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoAddDataModule.DataModule">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.DoRemoveDataModule">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.DoRemoveDataModule.DataModule">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TScreen.NotifyScreenFormHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.HandlerType">
        <short></short>
      </element>
      <element name="TScreen.NotifyScreenFormHandler.Form">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaHeight" link="TScreen.WorkAreaHeight"/>
      <element name="TScreen.GetWorkAreaHeight.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaLeft" link="TScreen.WorkAreaLeft"/>
      <element name="TScreen.GetWorkAreaLeft.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaRect" link="TScreen.WorkAreaRect"/>
      <element name="TScreen.GetWorkAreaRect.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaTop" link="TScreen.WorkAreaTop"/>
      <element name="TScreen.GetWorkAreaTop.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TScreen.GetWorkAreaWidth" link="TScreen.WorkAreaWidth"/>
      <element name="TScreen.GetWorkAreaWidth.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetHintFont" link="TScreen.HintFont"/>
      <element name="TScreen.GetHintFont.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetIconFont" link="TScreen.IconFont"/>
      <element name="TScreen.GetIconFont.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetMenuFont" link="TScreen.MenuFont"/>
      <element name="TScreen.GetMenuFont.Result">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TScreen.GetSystemFont" link="TScreen.SystemFont"/>
      <element name="TScreen.GetSystemFont.Result">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TScreen.Create"/>
      <element name="TScreen.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TScreen.Destroy"/>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormIndex">
        <short>The Index number of a Custom Form on the screen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormIndex.Result">
        <short>The Index number of the Custom Form, stored as an integer</short>
      </element>
      <element name="TScreen.CustomFormIndex.AForm">
        <short>The Custom Form to which the Index refers</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FormIndex">
        <short>The index number of a Form on the Screen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.FormIndex.Result">
        <short>The index number of the Form, stored as an integer</short>
      </element>
      <element name="TScreen.FormIndex.AForm">
        <short>The Form to which the Index refers</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormZIndex">
        <short>
          <var>CustomFormZIndex</var> - the index value of the form  in the Z dimension (Front to Back)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormZIndex.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormZIndex.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToFocusFront">
        <short>
          <var>MoveFormToFocusFront</var> - move the specified form to the front of the focus</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.MoveFormToFocusFront.ACustomForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.MoveFormToZFront">
        <short>
          <var>MoveFormToZFront</var> - move form to front in the Z-plane (does not specify whether focused)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.MoveFormToZFront.ACustomForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalForm">
        <short>
          <var>GetCurrentModalForm</var> - returns the current Modal form on the current screen (ie a form that is awaiting a user response)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalForm.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.GetCurrentModalFormZIndex">
        <short>
          <var>GetCurrentModalFormZIndex</var> - returns the Z-plane index of the current modal form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.GetCurrentModalFormZIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.CustomFormBelongsToActiveGroup">
        <short>
          <var>CustomFormBelongsToActiveGroup</var> - returns True if the specified form belongs to the active group</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.Result">
        <short/>
      </element>
      <element name="TScreen.CustomFormBelongsToActiveGroup.AForm">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindForm">
        <short>
          <var>FindForm</var> - returns the form with the specified name</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.FindForm.Result">
        <short/>
      </element>
      <element name="TScreen.FindForm.FormName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerForm">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerForm.Result">
        <short></short>
      </element>
      <element name="TScreen.FindNonDesignerForm.FormName">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.FindNonDesignerDataModule">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.Result">
        <short></short>
      </element>
      <element name="TScreen.FindNonDesignerDataModule.DataModuleName">
        <short></short>
      </element>
      <element name="TScreen.FindDataModule.Result">
        <short></short>
      </element>
      <element name="TScreen.FindDataModule.DataModuleName">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.FindDataModule">
        <short>
          <var>FindDataModule</var> - returns the Data Module with the specified name</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.UpdateScreen">
        <short>Method for updating screen</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveAllHandlersOfObject" link="#LCL.LCLClasses.TLCLComponent.RemoveAllHandlersOfObject">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormAdded">
        <short>
          <var>AddHandlerFormAdded</var> - method for adding a form-adding handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <element name="TScreen.AddHandlerFormAdded.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormAdded">
        <short>
          <var>RemoveHandlerFormAdded</var> - method for removing a form-adding handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerFormAdded.OnFormAdded">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerRemoveForm">
        <short>
          <var>AddHandlerRemoveForm</var> - method for adding a form-removing handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <element name="TScreen.AddHandlerRemoveForm.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerRemoveForm">
        <short>
          <var>RemoveHandlerRemoveForm</var> - method for removing a form-removing handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerRemoveForm.OnRemoveForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveControlChanged">
        <short>
          <var>AddHandlerActiveControlChanged</var> - method for adding a handler for a change in the active control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveControlChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveControlChanged">
        <short>
          <var>RemoveHandlerActiveControlChanged</var> - method for removing a handler for a change in the active control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.RemoveHandlerActiveControlChanged.OnActiveControlChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerActiveFormChanged">
        <short>
          <var>AddHandlerActiveFormChanged</var> - method for adding a handler for a change in active form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <element name="TScreen.AddHandlerActiveFormChanged.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerActiveFormChanged">
        <short>
          <var>RemoveHandlerActiveFormChanged</var> - method for removing a handler for a change in active form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.RemoveHandlerActiveFormChanged.OnActiveFormChanged">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.AddHandlerFormVisibleChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short></short>
      </element>
      <element name="TScreen.AddHandlerFormVisibleChanged.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.RemoveHandlerFormVisibleChanged">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.RemoveHandlerFormVisibleChanged.OnFormVisibleChanged">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.DisableForms">
        <short>
          <var>DisableForms</var> - disable all forms except <var>SkipForm</var>. If <var>DisabledList</var> is available then add forms to that list and return it, otherwise return new list. Used to show forms and other dialogs modal        </short>
      </element>
      <element name="TScreen.DisableForms.Result">
        <short></short>
      </element>
      <element name="TScreen.DisableForms.SkipForm">
        <short></short>
      </element>
      <element name="TScreen.DisableForms.DisabledList">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScreen.EnableForms">
        <short>
          <var>EnableForms</var> - enable all forms from <var>AFormList</var> and destroy list. Used to restore state after <var>DisableForms</var>
        </short>
      </element>
      <element name="TScreen.EnableForms.AFormList">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromPoint">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromPoint.Result">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromPoint.Point">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromPoint.MonitorDefault">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromRect">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromRect.Result">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromRect.Rect">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromRect.MonitorDefault">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TScreen.MonitorFromWindow">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorFromWindow.Result">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromWindow.Handle">
        <short></short>
      </element>
      <element name="TScreen.MonitorFromWindow.MonitorDefault">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveControl">
        <short>The identity of the active control on this screen</short>
        <descr>Reads a flag to determine the active control</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveCustomForm">
        <short>The identity of the active Custom Form on this screen</short>
        <descr>Reads a flag to determine the active Custom Form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.ActiveForm">
        <short>The identity of the active Form on this Screen</short>
        <descr>Reads a flag to determine the active Form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursor">
        <short>The cursor currently being used in this screen</short>
        <descr>Reads or writes a flag to determine the cursor. <br/>


		This can take any integer value, but there are several pre-determined cursor styles <br/>


		listed as constants in 'Controls', <br/>


		and these should be used to define the cursor for the current screen</descr>
        <seealso>
          <link id="Controls.crDefault"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Cursors">
        <short>The indexed list of available cursors for this screen</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScreen.Cursors.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormCount">
        <short>The number of Custom Forms on this screen</short>
        <descr>Reads flag to determine number of Custom Forms (integer)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomForms">
        <short>The list of Custom Forms on the screen</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreen.CustomForms.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormsZOrdered">
        <short>
          <var>CustomFormsZOrdered</var> - the forms arranged in Z-plane order (ie Front to Back)</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreen.CustomFormsZOrdered.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.CustomFormZOrderCount">
        <short>
          <var>CustomFormZOrderCount</var> - the number of forms arranged in Z-plane order (ie Front to Back)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModuleCount">
        <short>The number of data modules on the screen</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DataModules">
        <short>The list of Data Modules </short>
      </element>
      <element name="TScreen.DataModules.Index">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopHeight">
        <short>The total available height of the desktop in which the screen is to be placed</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopLeft">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopRect">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopTop">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.DesktopWidth">
        <short>The total available width of the desktop in which the screen is to be placed</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FocusedForm">
        <short>
          <var>FocusedForm</var> - the form that holds Focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Fonts">
        <short>The fonts to be used in this screen</short>
        <descr>Reads a flag to determine the fonts to be used; their names are stored as a list of strings</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.FormCount">
        <short>The number of Forms on this screen</short>
        <descr>Reads a flag to determine the number of Forms (integer)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Forms">
        <short>The list of Forms in this Screen</short>
        <descr/>
        <seealso/>
      </element>
      <element name="TScreen.Forms.Index">
        <short>Index number of a Form, stored as an integer</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Height">
        <short>The height of the screen</short>
        <descr>Reads a flag to determine screen height; stored as an integer</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.HintFont">
        <short>The font to be used to display hints</short>
        <descr>Reads a flag to determine the font to be used (font name stored as a string)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.IconFont">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.MenuFont">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TScreen.MonitorCount">
        <short>
          <var>MonitorCount</var> - returns a number of monitors</short>
      </element>
      <element name="TScreen.Monitors">
        <short>
          <var>Monitors</var> - provides access to the monitor list array</short>
      </element>
      <element name="TScreen.Monitors.Index">
        <short></short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveControlChange">
        <short>Event handler for change in the active control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.OnActiveFormChange">
        <short>Event handler for a change in the active form on the screen</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PixelsPerInch">
        <short>Scaling factor for displaying graphic information on the screen</short>
        <descr>Reads a flag to determine number of pixels per inch (integer)</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.PrimaryMonitor">
        <short>
          <var>PrimaryMonitor</var> - return the primary monitor of the system</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.SystemFont">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.Width">
        <short>The width of the screen</short>
        <descr>Reads flag to determine screen width, stored as an integer</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaHeight">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaLeft">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaRect">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaTop">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TScreen.WorkAreaWidth">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- procedure type Visibility: default -->
      <element name="TQueryEndSessionEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TQueryEndSessionEvent.Cancel">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TExceptionEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TExceptionEvent.Sender">
        <short/>
      </element>
      <element name="TExceptionEvent.E">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TGetHandleEvent">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TGetHandleEvent.Handle">
        <short></short>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TIdleEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TIdleEvent.Sender">
        <short/>
      </element>
      <element name="TIdleEvent.Done">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TOnUserInputEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TOnUserInputEvent.Sender">
        <short/>
      </element>
      <element name="TOnUserInputEvent.Msg">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDataEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDataEvent.Data">
        <short/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Reserved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.HintInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShow.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TCMHintShowPause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Msg">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.WasActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Pause">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TCMHintShowPause.Result">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TAppHintTimerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration value Visibility: default -->
      <element name="TAppHintTimerType.ahttNone">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttShowHint">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttHideHint">
        <short/>
      </element>
      <element name="TAppHintTimerType.ahttReshowHint">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TShowHintEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.HintStr">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.CanShow">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShowHintEvent.HintInfo">
        <short/>
      </element>
      <!-- record type Visibility: default -->
      <element name="THintInfoAtMouse">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.MousePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.Control">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="THintInfoAtMouse.ControlHasHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationFlag.AppWaiting">
        <short/>
      </element>
      <element name="TApplicationFlag.AppIdleEndSent">
        <short/>
      </element>
      <element name="TApplicationFlag.AppHandlingException">
        <short/>
      </element>
      <element name="TApplicationFlag.AppNoExceptionMessages">
        <short/>
      </element>
      <element name="TApplicationFlag.AppActive">
        <short>application has focus</short>
      </element>
      <element name="TApplicationFlag.AppDestroying">
        <short/>
      </element>
      <element name="TApplicationFlag.AppDoNotCallAsyncQueue">
        <short/>
      </element>
      <element name="TApplicationFlag.AppInitialized">
        <short>initialization of application was done</short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationFlags" link="TApplicationFlag"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationNavigationOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationNavigationOption.anoTabToSelectNext">
        <short/>
      </element>
      <element name="TApplicationNavigationOption.anoReturnForDefaultControl">
        <short/>
      </element>
      <element name="TApplicationNavigationOption.anoEscapeForCancelControl">
        <short/>
      </element>
      <element name="TApplicationNavigationOption.anoF1ForHelp">
        <short/>
      </element>
      <element name="TApplicationNavigationOption.anoArrowToSelectNextInParent">
        <short></short>
      </element>
      <!-- set type Visibility: default -->
      <element name="TApplicationNavigationOptions" link="TApplicationNavigationOption"/>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationHandlerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationHandlerType.ahtIdle">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtIdleEnd">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownBefore">
        <short>before interface and LCL</short>
      </element>
      <element name="TApplicationHandlerType.ahtKeyDownAfter">
        <short>after interface and LCL</short>
      </element>
      <element name="TApplicationHandlerType.ahtActivate">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtDeactivate">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtUserInput">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtException">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtEndSession">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtQueryEndSession">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtMinimize">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtModalBegin">
        <short></short>
      </element>
      <element name="TApplicationHandlerType.ahtModalEnd">
        <short></short>
      </element>
      <element name="TApplicationHandlerType.ahtRestore">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtDropFiles">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtHelp">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtHint">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtShowHint">
        <short/>
      </element>
      <element name="TApplicationHandlerType.ahtGetMainFormHandle">
        <short></short>
      </element>
<!-- pointer type Visibility: default -->
      <element name="PAsyncCallQueueItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TAsyncCallQueueItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueueItem.Method">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueueItem.Data">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueueItem.NextItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueueItem.PrevItem">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- record type Visibility: default -->
      <element name="TAsyncCallQueue">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueue.Top">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueue.Last">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- record type Visibility: default -->
      <element name="TAsyncCallQueues">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueues.CritSec">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueues.Cur">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: default -->
      <element name="TAsyncCallQueues.Next">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TApplicationType.atDefault">
        <short/>
      </element>
      <element name="TApplicationType.atDesktop">
        <short/>
      </element>
      <element name="TApplicationType.atPDA">
        <short/>
      </element>
      <element name="TApplicationType.atKeyPadDevice">
        <short></short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TApplicationShowGlyphs">
        <short>
          <var>TApplicationShowGlyphs</var> - enumerated type to describe the glyphs showing rule - whether to show them always, never or depends on system settings</short>
        <descr>
          <p>sbgAlways - show glyphs always (inspite of system preferences)</p>
          <p>sbgNever - show glyphs never (inspite of system preferences)</p>
          <p>sbgSystem - use system preferences for glyphs showing</p>
        </descr>
      </element>
      <element name="TApplicationShowGlyphs.sbgAlways">
        <short>show them always (default)</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgNever">
        <short>show them never</short>
      </element>
      <element name="TApplicationShowGlyphs.sbgSystem">
        <short>show them depending on OS</short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TTaskBarBehavior">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TTaskBarBehavior.tbDefault">
        <short>widgetset dependent</short>
      </element>
      <element name="TTaskBarBehavior.tbMultiButton">
        <short>show buttons for Forms with ShowTaskBar = stDefault</short>
      </element>
      <element name="TTaskBarBehavior.tbSingleButton">
        <short>hide buttons for Forms with ShowTaskBar = stDefault</short>
      </element>
<!-- object Visibility: default -->
      <element name="TApplication">
        <short>
          <var>TApplication</var> - the whole current program, described as an object</short>
        <descr>
          <p>Includes the useful function <var>MessageBox</var>, a simple dialog intended for displaying error messages internally, but available as an alternative to the various Message Dialogs</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationHandlers">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FApplicationType" link="TApplication.ApplicationType"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FAsyncCall">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.FBigIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsReleasing">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FComponentsToRelease">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FCreatingForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FFindGlobalComponentEnabled" link="TApplication.FindGlobalComponentEnabled"/>
      <element name="TApplication.FFlags" link="TApplication.Flags"/>
      <element name="TApplication.FHint" link="TApplication.Hint"/>
      <element name="TApplication.FHintColor" link="TApplication.HintColor"/>
      <element name="TApplication.FHintControl" link="TApplication.HintControl"/>
      <element name="TApplication.FHintHidePause" link="TApplication.HintHidePause"/>
      <element name="TApplication.FHintHidePausePerChar" link="TApplication.HintHidePausePerChar"/>
      <element name="TApplication.FHintPause" link="TApplication.HintPause"/>
      <element name="TApplication.FHintRect">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintShortCuts" link="TApplication.HintShortCuts"/>
      <element name="TApplication.FHintShortPause" link="TApplication.HintShortPause"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintTimerType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FHintWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FIcon" link="TApplication.Icon"/>
      <element name="TApplication.FIdleLockCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownKey">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownSender">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastKeyDownShift">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMouseControlValid">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FLastMousePos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FMainForm" link="TApplication.MainForm"/>
      <element name="TApplication.FMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.FModalLevel" link="TApplication.ModalLevel"/>
      <element name="TApplication.FMouseControl" link="TApplication.MouseControl"/>
      <element name="TApplication.FNavigation" link="TApplication.Navigation"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExceptProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOldExitProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FOnActionExecute" link="TApplication.OnActionExecute"/>
      <element name="TApplication.FOnActionUpdate" link="TApplication.OnActionUpdate"/>
      <element name="TApplication.FOnActivate" link="TApplication.OnActivate"/>
      <element name="TApplication.FOnDeactivate" link="TApplication.OnDeactivate"/>
      <element name="TApplication.FOnDestroy" link="TApplication.OnDestroy"/>
      <element name="TApplication.FOnDropFiles" link="TApplication.OnDropFiles"/>
      <element name="TApplication.FOnEndSession" link="TApplication.OnEndSession"/>
      <element name="TApplication.FOnGetMainFormHandle" link="TApplication.OnGetMainFormHandle"/>
      <element name="TApplication.FOnHelp" link="TApplication.OnHelp"/>
      <element name="TApplication.FOnHint" link="TApplication.OnHint"/>
      <element name="TApplication.FOnIdle" link="TApplication.OnIdle"/>
      <element name="TApplication.FOnIdleEnd" link="TApplication.OnIdleEnd"/>
      <element name="TApplication.FOnMinimize" link="TApplication.OnMinimize"/>
      <element name="TApplication.FOnModalBegin" link="TApplication.OnModalBegin"/>
      <element name="TApplication.FOnModalEnd" link="TApplication.OnModalEnd"/>
      <element name="TApplication.FOnQueryEndSession" link="TApplication.OnQueryEndSession"/>
      <element name="TApplication.FOnRestore" link="TApplication.OnRestore"/>
      <element name="TApplication.FOnShortcut" link="TApplication.OnShortcut"/>
      <element name="TApplication.FOnShowHint" link="TApplication.OnShowHint"/>
      <element name="TApplication.FOnUserInput" link="TApplication.OnUserInput"/>
      <element name="TApplication.FRestoreStayOnTop">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.FShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.FShowMainForm" link="TApplication.ShowMainForm"/>
      <element name="TApplication.FShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <!-- variable Visibility: private -->
      <element name="TApplication.FSmallIconHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <!-- procedure Visibility: private -->
      <element name="TApplication.DoOnIdleEnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetActive" link="TApplication.Active"/>
      <element name="TApplication.GetActive.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetCurrentHelpFile">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetCurrentHelpFile.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetExename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetExename.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetMainFormHandle">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.GetMainFormHandle.Result">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetTitle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.FreeIconHandles">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.IconChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IconChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetBidiMode" link="TApplication.BiDiMode"/>
      <element name="TApplication.SetBidiMode.AValue">
      <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetFlags" link="TApplication.Flags"/>
      <element name="TApplication.SetFlags.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetMainFormOnTaskBar" link="TApplication.MainFormOnTaskBar"/>
      <element name="TApplication.SetMainFormOnTaskBar.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetNavigation" link="TApplication.Navigation"/>
      <element name="TApplication.SetNavigation.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowButtonGlyphs" link="TApplication.ShowButtonGlyphs"/>
      <element name="TApplication.SetShowButtonGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowMenuGlyphs" link="TApplication.ShowMenuGlyphs"/>
      <element name="TApplication.SetShowMenuGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetTaskBarBehavior" link="TApplication.TaskBarBehavior"/>
      <element name="TApplication.SetTaskBarBehavior.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMouseControl.NewMouseControl">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.UpdateMouseHint">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.UpdateMouseHint.CurrentControl">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetCaptureExceptions" link="TApplication.CaptureExceptions"/>
      <element name="TApplication.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHint" link="TApplication.Hint"/>
      <element name="TApplication.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetHintColor" link="TApplication.HintControl"/>
      <element name="TApplication.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetIcon" link="TApplication.Icon"/>
      <element name="TApplication.SetIcon.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.SetShowHint" link="TApplication.ShowHint"/>
      <element name="TApplication.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.StopHintTimer">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.ValidateHelpSystem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ValidateHelpSystem.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.WndProc">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.WndProc.AMessage">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.DispatchAction">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.DispatchAction.Result">
        <short/>
      </element>
      <element name="TApplication.DispatchAction.Msg">
        <short/>
      </element>
      <element name="TApplication.DispatchAction.Action">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.AddHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.AddHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RemoveHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveHandler.HandlerType">
        <short/>
      </element>
      <element name="TApplication.RemoveHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.RunLoop">
        <short>Make the application run in a loop, ie it starts again when it has finished</short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Activate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TApplication.Deactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Deactivate.Force">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.GetConsoleApplication">
        <short>
          <var>GetConsoleApplication</var> - returns True if this is a Console application (ie text-mode, non-GUI)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetConsoleApplication.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleHandler">
        <short>
          <var>NotifyIdleHandler</var> - method for sending message to Idle handler (sends True if process is done)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.NotifyIdleHandler.Done">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyIdleEndHandler">
        <short>
          <var>NotifyIdleEndHandler</var> - method for sending message to handler for end of idle state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyActivateHandler">
        <short>
          <var>NotifyActivateHandler</var> - method for sending message to handler for activation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyDeactivateHandler">
        <short>
          <var>NotifyDeactivateHandler</var> - method for sending message to handler for deactivation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.NotifyCustomForms">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.NotifyCustomForms.Msg">
        <short></short>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.IsHintMsg">
        <short>
          <var>IsHintMsg</var> - returns True if specified message is a valid Hint</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IsHintMsg.Result">
        <short/>
      </element>
      <element name="TApplication.IsHintMsg.Msg">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.DoOnHelp">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.DoOnHelp.Result">
        <short></short>
      </element>
      <element name="TApplication.DoOnHelp.Command">
        <short></short>
      </element>
      <element name="TApplication.DoOnHelp.Data">
        <short></short>
      </element>
      <element name="TApplication.DoOnHelp.CallHelp">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoOnMouseMove">
        <short>
          <var>DoOnMouseMove</var> - method for the OnMouseMove event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ShowHintWindow">
        <short>
          <var>ShowHintWindow</var> - method for showing a hint window</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHintWindow.Info">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.OnHintTimer">
        <short>
          <var>OnHintTimer</var> - event handler for timing the duration of hints</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.OnHintTimer.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.SetTitle" link="TApplication.Title"/>
      <element name="TApplication.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.StartHintTimer">
        <short>
          <var>StartHintTimer</var> - method for starting the timer for display of a hint message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.StartHintTimer.Interval">
        <short/>
      </element>
      <element name="TApplication.StartHintTimer.TimerType">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.UpdateVisible">
        <short>
          <var>UpdateVisible</var> - update all visible components</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoIdleActions">
        <short>
          <var>DoIdleActions</var> - perform the actions that remain idle</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.MenuPopupHandler">
        <short>
          <var>MenuPopupHandler</var> - method for dealing with menu popups</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.MenuPopupHandler.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ProcessAsyncCallQueue">
        <short>
          <var>ProcessAsyncCallQueue</var> - method to process a queue of asynchronous calls</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.FreeComponent">
        <short>
          <var>FreeComponent</var> - method for freeing a component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.FreeComponent.Data">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.ReleaseComponents">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.DoBeforeFinalization">
        <short>
          <var>DoBeforeFinalization</var> - the things to be done before finalisation of the application</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.GetParams">
        <short>
          <var>GetParams</var> - find the application's parameters (typically by parsing the command line that invoked the application)</short>
      </element>
      <element name="TApplication.GetParams.Result">
        <short></short>
      </element>
      <element name="TApplication.GetParams.Index">
        <short></short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplication.Create">
        <descr>This instance of the constructor performs most of the setting up of the environment for the application. The instances of Create that occur in some of the ancestor classes are place holders rather than actual instructions for constructing the object
</descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.Create">TCustomApplication.Create</link>
        </seealso>
        <short>
          <var>Create</var> - constructor for <var>TApplication</var>: initialises a large number of local variables and properties, then calls inherited <var>Create</var>
        </short>
      </element>
      <element name="TApplication.Create.AOwner">
        <short>The Owner object that invoked this instance of TApplication</short>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplication.Destroy"/>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ActivateHint">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.ActivateHint.CursorPos">
        <short></short>
      </element>
      <element name="TApplication.ActivateHint.CheckHintControlChange">
        <short></short>
      </element>
      <!-- function Visibility: private -->
      <element name="TApplication.GetControlAtMouse">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.GetControlAtMouse.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlDestroyed">
        <short>Method for dealing with a control that has been destroyed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlDestroyed.AControl">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BigIconHandle">
        <short>
          <var>BigIconHandle</var> - system Handle for large Icon</short>
      </element>
      <element name="TApplication.BigIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.SmallIconHandle">
        <short>
          <var>SmallIconHandle</var> - system handle for small Icon</short>
      </element>
      <element name="TApplication.SmallIconHandle.Result">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.BringToFront">
        <short>
          <var>BringToFront</var> - Use the selected widget set's method to bring the application's form(s) to the front</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CreateForm">
        <short>Create Form or any other kind of component</short>
        <descr>Note: The name is confusing and only kept for Delphi compatibility. <br/>

It can actually create any kind of component<br/>
          <br/>

Creates a Component instance, sets the pointer to the component variable and loads the component. <br/>

If it is a form it will be added to the application's forms list</descr>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.CreateForm.InstanceClass">
        <short/>
      </element>
      <element name="TApplication.CreateForm.Reference">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.UpdateMainForm">
        <short>
          <var>UpdateMainForm</var> - update the Application's main form</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.UpdateMainForm.AForm">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.QueueAsyncCall">
        <short>Insert a given asynchronous call into the queue</short>
        <descr>This is thread safe.</descr>
        <errors/>
        <seealso/>
        <example file="forms/tapplication_queueasynccall.pas"/>
      </element>
      <element name="TApplication.QueueAsyncCall.AMethod">
        <short>The method to be used for the asynchronous call</short>
      </element>
      <element name="TApplication.QueueAsyncCall.Data">
        <short>The data structure used by the asynchronous call method</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAsyncCalls">
        <short>Removes all calls added via QueueAsyncCall</short>
        <descr>This is thread safe.</descr>
      </element>
      <element name="TApplication.RemoveAsyncCalls.AnObject">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ReleaseComponent">
        <short>
          <var>ReleaseComponent</var> - method to release the specified component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ReleaseComponent.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.ExecuteAction">
        <descr>This is a function that should be supplied by the application programmer, to override the placeholders declared in ancestor classes
</descr>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
        </seealso>
        <short>
          <var>ExecuteAction</var> - calls the <var>OnActionExecute</var> event hndler if it is assigned</short>
      </element>
      <element name="TApplication.ExecuteAction.Result">
        <short/>
      </element>
      <element name="TApplication.ExecuteAction.ExeAction">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.UpdateAction">
        <short>
          <var>UpdateAction</var> - calls the OnUpdateAction event handler if it is assigned</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.UpdateAction">TComponent.UpdateAction</link>
        </seealso>
      </element>
      <element name="TApplication.UpdateAction.Result">
        <short/>
      </element>
      <element name="TApplication.UpdateAction.TheAction">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleException">
        <descr>Individual exception handler methods should be supplied by the application programmer, to override place-holder entries declared in ancestor classes.<br/>

This method checks whether the application is required to halt if an exception occurs, or invokes the appropriate handler. <br/>


It also writes details of the exception to the appropriate place for debugging.
</descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.HandleException">TCustomApplication.HandleException</link>
        </seealso>
        <short>
          <var>HandleException</var> method for handling an exception; attempts to maintain program execution if possible, otherwise exits gracefully</short>
      </element>
      <element name="TApplication.HandleException.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HandleMessage">
        <short>Process all events according to the method defined for the widget set</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpCommand">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.HelpCommand.Result">
        <short></short>
      </element>
      <element name="TApplication.HelpCommand.Command">
        <short></short>
      </element>
      <element name="TApplication.HelpCommand.Data">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpContext">
        <short>
          <var>HelpContext</var> - returns True if there is a specified context-dependent help message associated with the application, with an optionally specified position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.HelpContext.Result">
        <short/>
      </element>
      <element name="TApplication.HelpContext.Sender">
        <short/>
      </element>
      <element name="TApplication.HelpContext.Position">
        <short/>
      </element>
      <element name="TApplication.HelpContext.Context">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.HelpKeyword">
        <short>
          <var>HelpKeyword</var> - returns True if there is a specified help keyword associated with the application, with an optionally specified position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.HelpKeyword.Result">
        <short/>
      </element>
      <element name="TApplication.HelpKeyword.Sender">
        <short/>
      </element>
      <element name="TApplication.HelpKeyword.Position">
        <short/>
      </element>
      <element name="TApplication.HelpKeyword.Keyword">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowHelpForObject">
        <short>
          <var>ShowHelpForObject</var> - method for displaying help messages</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowHelpForObject.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveStayOnTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.RemoveStayOnTop.ASystemTopAlso">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RestoreStayOnTop">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.RestoreStayOnTop.ASystemTopAlso">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsWaiting">
        <short>
          <var>IsWaiting</var> - returns True if the application is awainting an event</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IsWaiting.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CancelHint">
        <short>Cancels a request for a hint, if there is no hint timer or no hint to display</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HideHint">
        <short>Don't display the hint</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.HintMouseMessage">
        <short>
          <var>HintMouseMessage</var> - method to find the hint for the control at the mouse position</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HintMouseMessage.Control">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.HintMouseMessage.AMessage">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Initialize">
        <descr>Finds the appropriate widget set, reads the application's icon (if any) from the Lazarus Resource file, initialises the screen, and leaves it ready for processing.
</descr>
        <errors/>
        <seealso>
          <link id="#fcl.CustApp.TCustomApplication.Initialize">TCustomApplication.Initialize</link>
        </seealso>
        <short>
          <var>Initialize</var> - calls inherited Initialize, then initialises widget set, loads icons from Laz resources and updates screen</short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.MessageBox">
        <short>
          <var>Message Box</var>: a useful function to display a message.</short>
        <descr>
          <p>
            <var>MessageBox</var>: a useful function to display a message.</p>
          <p>The function is used internally to display messages during the handling of <var>Exceptions</var>
, but is also available to application programmers as an alternative to some of the message dialogs found in <var>Dialogs</var>
          </p>
          <p>The argument <var>Flags</var> is a long integer constructed by adding together various constants to define the contents and behaviour of the box, for example:</p>
          <p>MB_ABORTRETRYIGNORE + MR_ICONQUESTION will cause the application to display a query (?) icon in a box with three buttons: </p>
          <p>ABORT RETRY IGNORE.</p>
          <p>The following button constants are available:</p>
          <p>MB_OK</p>
          <p>MB_OKCANCEL</p>
          <p>MB_ABORTRETRYIGNORE</p>
          <p>MB_YESNOCANCEL</p>
          <p>MB_YESNO</p>
          <p>MB_RETRYCANCEL</p>
          <p>And the following icon constants:</p>
          <p>MB_ICONHAND</p>
          <p>MB_ICONQUESTION</p>
          <p>MB_ICONEXCLAMATION</p>
          <p>MB_ICONASTERICK</p>
          <p>MB_ICONWARNING = MB_ICONEXCLAMATION</p>
          <p>MB_ICONERROR = MB_ICONHAND</p>
          <p>MB_ICONSTOP = MB_ICONHAND</p>
          <p>MB_ICONINFORMATION = MB_ICONASTERICK</p>
          <p>These constants are declared on the LCLType unit.</p>
          <p>The function returns an integer value corresponding to the button that was pressed; its value can be determined by reference to the constants [IDOK..IDHELP]</p>
          <p>It can be invoked like a procedure call (ie as a 'MessageBox()' statement rather than as a 'Variable := MessageBox()' function call)</p>
        </descr>
        <errors/>
        <seealso>
          <link id="#lcl.Dialogs.MessageDlg">MessageDlg</link>
        </seealso>
        <example file="dialogs/displaymessagebox.pas"/>
      </element>
      <element name="TApplication.MessageBox.Result">
        <short>Result</short>
        <descr>Result: integer value returned by the function to signify which box was selected<br/>
          <br/>

Can be one of the following values:<br/>
          <br/>

 IDOK<br/>

 IDCANCEL<br/>

 IDABORT<br/>

 IDRETRY<br/>

 IDIGNORE<br/>

 IDYES<br/>

 IDNO<br/>

 IDCLOSE<br/>

 IDHELP	
		</descr>
      </element>
      <element name="TApplication.MessageBox.Text">
        <short>Text: the string that is displayed as a prompt or instruction in the Box</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Caption">
        <short>Caption: the string label at the top of the message box</short>
        <descr/>
      </element>
      <element name="TApplication.MessageBox.Flags">
        <short>Flags - a long integer constructed by adding together various constants to define the contents and behaviour of the box</short>
        <descr>Flags: longint - an integer constructed by adding together various constants to define the contents and behaviour of the box, for example<br/>
 
		MB_ABORTRETRYIGNORE + MR_ICONQUESTION will cause the application to display a query (?) icon in a box with three buttons: <br/>
ABORT RETRY IGNORE.<br/>
          <br/>

The following button constants are available:<br/>
          <br/>

 MB_OK<br/>

 MB_OKCANCEL<br/>

 MB_ABORTRETRYIGNORE<br/>

 MB_YESNOCANCEL<br/>

 MB_YESNO<br/>

 MB_RETRYCANCEL<br/>
          <br/>

And the following icon constants:<br/>
          <br/>

 MB_ICONHAND<br/>

 MB_ICONQUESTION<br/>

 MB_ICONEXCLAMATION<br/>

 MB_ICONASTERICK<br/>

 MB_ICONWARNING = MB_ICONEXCLAMATION<br/>

 MB_ICONERROR = MB_ICONHAND<br/>

 MB_ICONSTOP = MB_ICONHAND<br/>

 MB_ICONINFORMATION = MB_ICONASTERICK<br/>
          <br/>

These constants are declared on the LCLType unit.
        </descr>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Minimize">
        <short>Minimise the form using the widget set's method</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalStarted">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ModalFinished">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Restore">
        <short>Restore the application's form to the size it was before minimisation or maximisation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Notification">
        <short>
          <var>Notification</var> if Operation is Remove, then sets any Component to nil, otherwise calls inherited <var>Notification</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Notification">TComponent.Notification</link>
        </seealso>
      </element>
      <element name="TApplication.Notification.AComponent">
        <short/>
      </element>
      <element name="TApplication.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ProcessMessages">
        <short>
          <var>ProcessMessages</var> - method for processing system messages</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Idle">
        <short>
          <var>Idle</var> - method for rendering the Application Idle if <var>Wait</var> is True</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.Idle.Wait">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Run" link="#fcl.CustApp.TCustomApplication.Run">
        <descr>This method should be supplied by the application programmer, and should be the main process control procedure for the application
</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ShowException" link="#fcl.CustApp.TCustomApplication.ShowException">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ShowException.E">
        <short>The exception that is to be displayed</short>
        <seealso>
          <link id="#rtl.sysutils.exception"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Terminate" link="#fcl.CustApp.TCustomApplication.Terminate">
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DisableIdleHandler">
        <short>
          <var>DisableIdleHandler</var> - turn off the Idle handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.EnableIdleHandler">
        <short>
          <var>EnableIdleHandler</var> - turn on the Idle handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyUserInputHandler">
        <short>
          <var>NotifyUserInputHandler</var> - send message t handler for user input</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.NotifyUserInputHandler.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownBeforeHandler">
        <short>
          <var>NotifyKeyDownBeforeHandler</var> - send message to handler for the condition where a key has been previously pressed (eg a Shift, Control or Alt key(</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownBeforeHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.NotifyKeyDownHandler">
        <short>
          <var>NotifyKeyDownHandler</var> - sends message to handler for a key pressed down</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Sender">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Key">
        <short/>
      </element>
      <element name="TApplication.NotifyKeyDownHandler.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyDown">
        <short>
          <var>ControlKeyDown</var> - method for dealing with the Control Key being pressed down</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyDown.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyDown.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.ControlKeyUp">
        <short>
          <var>ControlKeyUp</var> - method for dealing with a released Control key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.ControlKeyUp.Sender">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Key">
        <short/>
      </element>
      <element name="TApplication.ControlKeyUp.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleHandler">
        <short>
          <var>AddOnIdleHandler</var> - method for adding a handler for the Idle state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnIdleHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleHandler">
        <short>
          <var>RemoveOnIdleHandler</var> - method for removing a handler for the Idle state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnIdleHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnIdleEndHandler">
        <short>
          <var>AddOnIdleEndHandler</var> - method to add a handler for the end of the Idle state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnIdleEndHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnIdleEndHandler">
        <short>
          <var>RemoveOnIdleEndHandler</var> - method for removing handler for the end of the Idle state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnIdleEndHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnUserInputHandler">
        <short>
          <var>AddOnUserInputHandler</var> - method for adding a handler for user input</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnUserInputHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnUserInputHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnUserInputHandler">
        <short>
          <var>RemoveOnUserInputHandler</var> - method for removing handler for user input</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnUserInputHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownBeforeHandler">
        <short>
          <var>AddOnKeyDownBeforeHandler</var> - method for adding handler for the state where a key (eg Ctrl, Shift, Alt) has been already pressed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownBeforeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownBeforeHandler">
        <short>
          <var>RemoveOnKeyDownBeforeHandler</var> - method for removing handler for the state where a key (eg Ctrl, Shift, Alt) has been already pressed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnKeyDownBeforeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnKeyDownHandler">
        <short>
          <var>AddOnKeyDownHandler</var> - method for adding a handler for the Key Down state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnKeyDownHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnKeyDownHandler">
        <short>
          <var>RemoveOnKeyDownHandler</var> - method for removing handler for the Key Down state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnKeyDownHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnActivateHandler">
        <short>
          <var>AddOnActivateHandler</var> - method for adding a handler for activation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnActivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnActivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnActivateHandler">
        <short>
          <var>RemoveOnActivateHandler</var> - method for removing handler for activation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnActivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDeactivateHandler">
        <short>
          <var>AddOnDeactivateHandler</var> - method for adding handler for deactivation</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDeactivateHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDeactivateHandler">
        <short>
          <var>RemoveOnDeactivateHandler</var> - method for removing deactivation handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnDeactivateHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnExceptionHandler">
        <short>
          <var>AddOnExceptionHandler</var> - method for adding exception handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnExceptionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnExceptionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnExceptionHandler">
        <short>
          <var>RemoveOnExceptionHandler</var> - method for removing exception handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnExceptionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnEndSessionHandler">
        <short>
          <var>AddOnEndSessionHandler</var> - method for adding handler for end of session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnEndSessionHandler">
        <short>
          <var>RemoveOnEndSessionHandler</var> - method for removing handler for end of session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnQueryEndSessionHandler">
        <short>
          <var>AddOnQueryEndSessionHandler</var> - method for adding handler for a query at the end of a session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnQueryEndSessionHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnQueryEndSessionHandler">
        <short>
          <var>RemoveOnQueryEndSessionHandler</var> - method for removing handler for a query at the end of a session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnQueryEndSessionHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnMinimizeHandler">
        <short>
          <var>AddOnMinimizeHandler</var> - method for adding handler for minimising component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnMinimizeHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnMinimizeHandler">
        <short>
          <var>RemoveOnMinimizeHandler</var> - method to remove handler for maximising component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnMinimizeHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalBeginHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnModalBeginHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalBeginHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalBeginHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnModalEndHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.AddOnModalEndHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnModalEndHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnModalEndHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnModalEndHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnRestoreHandler">
        <short>
          <var>AddOnRestoreHandler</var> - method to add handler for Restore component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnRestoreHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnRestoreHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnRestoreHandler">
        <short>
          <var>RemoveOnRestoreHandler</var> - method to remove restore handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnRestoreHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnDropFilesHandler">
        <short>
          <var>AddOnDropFilesHandler</var> - method to add handler for dropped files</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnDropFilesHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnDropFilesHandler">
        <short>
          <var>RemoveOnDropFilesHandler</var> - method for removing drop files handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnDropFilesHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHelpHandler">
        <short>
          <var>AddOnHelpHandler</var> - method to add Help handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnHelpHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHelpHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHelpHandler">
        <short>
          <var>RemoveOnHelpHandler</var> - method to remove Help handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnHelpHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnHintHandler">
        <short>
          <var>AddOnHintHandler</var> - method to add handler for Hints</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnHintHandler">
        <short>
          <var>RemoveOnHintHandler</var> - method to remove Hint handler</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnShowHintHandler">
        <short>
          <var>AddOnShowHintHandler</var> - method to add handler for showing Hints</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.AddOnShowHintHandler.Handler">
        <short/>
      </element>
      <element name="TApplication.AddOnShowHintHandler.AsFirst">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnShowHintHandler">
        <short>
          <var>RemoveOnShowHintHandler</var> - method for removing handler for showing Hints</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveOnShowHintHandler.Handler">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddOnGetMainFormHandleHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.Handler">
        <short></short>
      </element>
      <element name="TApplication.AddOnGetMainFormHandleHandler.AsFirst">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveOnGetMainFormHandleHandler">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.RemoveOnGetMainFormHandleHandler.Handler">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.RemoveAllHandlersOfObject">
        <short>
          <var>RemoveAllHandlersOfObject</var> - method to remove all handlers of an object</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.RemoveAllHandlersOfObject.AnObject">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoBeforeMouseMessage">
        <short>
          <var>DoBeforeMouseMessage</var> - things to be done before a mouse message is processed</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoBeforeMouseMessage.CurMouseControl">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsShortcut">
        <short>
          <var>IsShortcut</var> - returns True if specified Keyi s a shortcut</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IsShortcut.Result">
        <short/>
      </element>
      <element name="TApplication.IsShortcut.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfQueryEndSession">
        <short>
          <var>IntfQueryEndSession</var> - called by the interface when there is a query at the end of a session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IntfQueryEndSession.Cancel">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfEndSession">
        <short>
          <var>IntfEndSession</var> - called by the interface at the end of a session</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppActivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppDeactivate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppMinimize">
        <short>
          <var>IntfAppMinimize</var> - called by the interface if an application is minimised</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfAppRestore">
        <short>
          <var>IntfAppRestore</var> - called by the interface when an application is being restored</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfDropFiles">
        <short>
          <var>IntfDropFiles</var> - called by the interface for dropping files</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.IntfDropFiles.FileNames">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.IntfThemeOptionChange">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AThemeServices">
        <short></short>
      </element>
      <element name="TApplication.IntfThemeOptionChange.AOption">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.IsRTLLang">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.IsRTLLang.Result">
        <short></short>
      </element>
      <element name="TApplication.IsRTLLang.ALang">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.Direction">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TApplication.Direction.Result">
        <short></short>
      </element>
      <element name="TApplication.Direction.ALang">
        <short></short>
      </element>
      <!-- function Visibility: public -->
      <element name="TApplication.DoArrowKey">
        <short>
          <var>DoArrowKey</var> - method for processing an arrow key</short>
      </element>
      <element name="TApplication.DoArrowKey.AControl">
        <short></short>
      </element>
      <element name="TApplication.DoArrowKey.Key">
        <short></short>
      </element>
      <element name="TApplication.DoArrowKey.Shift">
        <short></short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoEscapeKey">
        <short>
          <var>DoEscapeKey</var> - method for processing the Escape key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoEscapeKey.AControl">
        <short/>
      </element>
      <element name="TApplication.DoEscapeKey.Key">
        <short/>
      </element>
      <element name="TApplication.DoEscapeKey.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoReturnKey">
        <short>
          <var>DoReturnKey</var> - method for processing the Return (Enter) key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoReturnKey.AControl">
        <short/>
      </element>
      <element name="TApplication.DoReturnKey.Key">
        <short/>
      </element>
      <element name="TApplication.DoReturnKey.Shift">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.DoTabKey">
        <short>
          <var>DoTabKey</var> - method for processing the Tab key</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TApplication.DoTabKey.AControl">
        <short/>
      </element>
      <element name="TApplication.DoTabKey.Key">
        <short/>
      </element>
      <element name="TApplication.DoTabKey.Shift">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Active">
        <short>
          <var>Active</var> - returns True if this is an active Application</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ApplicationType">
        <short>
          <var>ApplicationType</var> - The type of the application (ie the sort of device for which it is intended)</short>
        <descr>
          <p>The type of the application:</p>
          <p>Default, Desktop, Handheld, PDA, Smartphone</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.BidiMode">
        <short>
          <var>BidiMode</var> - whether bi-directional mode is available</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.CaptureExceptions">
        <short>
          <var>CaptureExceptions</var> -  If exceptions have occurred, find out what they are, ready for processing</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.FindGlobalComponentEnabled">
        <short>
          <var>FindGlobalComponentEnabled</var> - returns True if the Find Global Component state is enabled</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Flags">
        <short>
          <var>Flags</var> - the list of flags for this application</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Hint">
        <short>The hint associated with the main application</short>
        <descr>A hint is a small pop-up mesage that appears briefly while the mouse hovers over a specified area of the screen. It usually displays useful information about how to use an object or what data should be entered, etc<br/>
          <br/>

Reads or writes a flag to determine the hint associated with the application</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintColor">
        <short>The colour used to display the hint</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePause">
        <short>The delay period after mouse entry before the hint becomes visible</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintHidePausePerChar">
        <short>
          <var>HintHidePausePerChar</var> - the pause period per character for hiding a hint</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintPause">
        <short>
          <var>HintPause</var> - The length of time for which the hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortCuts">
        <short>
          <var>HintShortCuts</var> - If True, there are hints for short cut keys </short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.HintShortPause">
        <short>
          <var>HintShortPause</var> - the pause before a shortcut hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Icon">
        <short>The icon to be associated with this application</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainForm">
        <short>The Main Form used by the application for process control and for data input/output</short>
        <descr>Reads a flag to get particulars of the main form</descr>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MainFormOnTaskBar">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ModalLevel">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.MouseControl">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Navigation">
        <short>Determine how the form is to be navigated</short>
        <descr>Reads or writes a flag to determine the navigation method: <br/>

Is <b>Tab</b>
 used to move to next control? <br/>

Does <b>Enter</b>
 or <b>Ret</b>
 activate the default action? <br/>

Does <b>Esc</b>
 perform the cancel action? <br/>

Does <b>F1</b>
 activate a Help system?<br/>
          <br/>

Navigation Options is a set, so can take zero or more of the available values</descr>
        <seealso>
          <link id="TApplicationNavigationOptions"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionExecute">
        <short>
          <var>OnActionExecute</var> - event handler for executing the application's main action</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActionUpdate">
        <short>
          <var>OnActionUpdate</var> - event handler for updating the application's main action</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnActivate">
        <short>
          <var>OnActivate</var> - Event handler for activation of the application</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDeactivate">
        <short>
          <var>OnDeactivate</var> - Event handler for deactivation of the application</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDestroy">
        <short>
          <var>OnDestroy</var> - Event handler for destruction of the application</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnDropFiles">
        <short>
          <var>OnDropFiles</var> - The event invoked when file is dropped on one of the application forms.</short>
        <descr>The OnDropFiles event is invoked when user drops one or multiple files on one of the application forms. You must enable this feature by setting AllowDropFiles property of form.
</descr>
        <seealso>
          <link id="TCustomForm.OnDropFiles"/>
          <link id="TCustomForm.AllowDropFiles"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnEndSession">
        <short>
          <var>OnEndSession</var> - Event handler for ending a session of the application</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnGetMainFormHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHelp">
        <short>
          <var>OnHelp</var> - Event handler when help is required</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnHint">
        <short>
          <var>OnHint</var> - Event handler when a hint is required</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdle">
        <short>
          <var>OnIdle</var> - event handler for the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnIdleEnd">
        <short>
          <var>OnIdleEnd</var> - event handler for the end of the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnMinimize">
        <short>
          <var>OnMinimize</var> - Event handler for minimising the application's form</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalBegin">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnModalEnd">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnQueryEndSession">
        <short>
          <var>OnQueryEndSession</var> - event handler for processing a query at the end of a session</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnRestore">
        <short>
          <var>OnRestore</var> - Event handler for restoring the application's form from minimised or maximised condition</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShortcut">
        <short>
          <var>OnShortcut</var> - Event handler when a shortcut key is pressed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnShowHint">
        <short>
          <var>OnShowHint</var> - Event handler for showing a hint</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.OnUserInput">
        <short>
          <var>OnUserInput</var> - Event handler when user input is required or is occurring</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowButtonGlyphs">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowHint">
        <short>
          <var>ShowHint</var> - Is a hint required to be shown?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMainForm">
        <short>
          <var>ShowMainForm</var> - Is the main form for the application to be shown? Default TRUE</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.ShowMenuGlyphs">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.TaskBarBehavior">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Title" link="#fcl.CustApp.TCustomApplication.Title"/>
<!-- constant Visibility: default -->
      <element name="DefHintColor">
        <short>default hint window color</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintPause">
        <short>default pause before hint window displays (ms)</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintShortPause">
        <short>default reshow pause</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePause">
        <short>default pause before hint is hidden (ms)</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefHintHidePausePerChar">
        <short>added to DefHintHidePause (ms)</short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
<!-- object Visibility: default -->
      <element name="TApplicationProperties">
        <short>
          <var>TApplicationProperties</var>: The properties of the current application</short>
        <descr>
          <p>TApplication Properties can be set as a local default set of properties to be used for any new instance fo TApplication</p>
        </descr>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplicationProperties.FCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.FHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.FHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.FHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.FHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.FHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.FHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.FHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.FOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.FOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.FOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.FOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.FOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.FOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.FOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.FOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.FOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.FOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.FOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.FOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.FOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.FOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.FOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.FShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.FShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.FShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.FShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.FTitle" link="TApplicationProperties.Title"/>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetCaptureExceptions" link="TApplicationProperties.CaptureExceptions"/>
      <element name="TApplicationProperties.SetCaptureExceptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHelpFile" link="TApplicationProperties.HelpFile"/>
      <element name="TApplicationProperties.SetHelpFile.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHint" link="TApplicationProperties.Hint"/>
      <element name="TApplicationProperties.SetHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintColor" link="TApplicationProperties.HintColor"/>
      <element name="TApplicationProperties.SetHintColor.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintHidePause" link="TApplicationProperties.HintHidePause"/>
      <element name="TApplicationProperties.SetHintHidePause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintPause" link="TApplicationProperties.HintPause"/>
      <element name="TApplicationProperties.SetHintPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortCuts" link="TApplicationProperties.HintShortCuts"/>
      <element name="TApplicationProperties.SetHintShortCuts.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetHintShortPause" link="TApplicationProperties.HintShortPause"/>
      <element name="TApplicationProperties.SetHintShortPause.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowButtonGlyphs" link="TApplicationProperties.ShowButtonGlyphs"/>
      <element name="TApplicationProperties.SetShowButtonGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMenuGlyphs" link="TApplicationProperties.ShowMenuGlyphs"/>
      <element name="TApplicationProperties.SetShowMenuGlyphs.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowHint" link="TApplicationProperties.ShowHint"/>
      <element name="TApplicationProperties.SetShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetShowMainForm" link="TApplicationProperties.ShowMainForm"/>
      <element name="TApplicationProperties.SetShowMainForm.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetTitle" link="TApplicationProperties.Title"/>
      <element name="TApplicationProperties.SetTitle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnException" link="TApplicationProperties.OnException"/>
      <element name="TApplicationProperties.SetOnException.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnGetMainFormHandle" link="TApplicationProperties.OnGetMainFormHandle"/>
      <element name="TApplicationProperties.SetOnGetMainFormHandle.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdle" link="TApplicationProperties.OnIdle"/>
      <element name="TApplicationProperties.SetOnIdle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnIdleEnd" link="TApplicationProperties.OnIdleEnd"/>
      <element name="TApplicationProperties.SetOnIdleEnd.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnEndSession" link="TApplicationProperties.OnEndSession"/>
      <element name="TApplicationProperties.SetOnEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnQueryEndSession" link="TApplicationProperties.OnQueryEndSession"/>
      <element name="TApplicationProperties.SetOnQueryEndSession.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnMinimize" link="TApplicationProperties.OnMinimize"/>
      <element name="TApplicationProperties.SetOnMinimize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalBegin" link="TApplicationProperties.OnModalBegin"/>
      <element name="TApplicationProperties.SetOnModalBegin.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnModalEnd" link="TApplicationProperties.OnModalEnd"/>
      <element name="TApplicationProperties.SetOnModalEnd.AValue">
        <short></short>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnRestore" link="TApplicationProperties.OnRestore"/>
      <element name="TApplicationProperties.SetOnRestore.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnDropFiles" link="TApplicationProperties.OnDropFiles"/>
      <element name="TApplicationProperties.SetOnDropFiles.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHelp" link="TApplicationProperties.OnHelp"/>
      <element name="TApplicationProperties.SetOnHelp.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnHint" link="TApplicationProperties.OnHint"/>
      <element name="TApplicationProperties.SetOnHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnShowHint" link="TApplicationProperties.OnShowHint"/>
      <element name="TApplicationProperties.SetOnShowHint.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TApplicationProperties.SetOnUserInput" link="TApplicationProperties.OnUserInput"/>
      <element name="TApplicationProperties.SetOnUserInput.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TApplicationProperties.Create">
        <short>
          <var>Create</var> - constructor for TApplicationProperties: calls inherited <var>Create</var>, then sets some defaults if new application is being designed, or loads local values from existing application </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
          <link id="#LCL.LCLClasses.TLCLComponent.Create">TLCLComponent.Create</link>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplicationProperties.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplicationProperties.Destroy">
        <short>
          <var>Destroy</var> - destructor for TApplicationProperties: removes a number of handlers then calls inherited <var>Destroy</var>
        </short>
        <descr/>
        <errors/>
        <seealso>
          <link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
          <link id="#LCL.LCLClasses.TLCLComponent.Destroy">TLCLComponent.Destroy</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.CaptureExceptions">
        <short>
          <var>CaptureExceptions</var> - Determine whether exceptions are being captured</short>
        <descr>Boolean property (true if exceptions are being captured); reads or writes flag to see if they are being captured
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HelpFile">
        <short>
          <var>HelpFile</var> - Determines which file to use for Help</short>
        <descr>Reads or writes flag to determine name of Help file - name is stored as a string
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Hint">
        <short>
          <var>Hint</var> - Determines Hint to be used</short>
        <descr>Reads or writes flag to determine Hint - stored as a string
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintColor">
        <short>
          <var>HintColor</var> - Colour to be used when displaying Hint</short>
        <descr>Reads or writes flag to determine Hint colour (stored as a TColor integer)
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintHidePause">
        <short>
          <var>HintHidePause</var> - the length of pause before a hint becomes hidden</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintPause">
        <short>
          <var>HintPause</var> - the length of pause before a hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortCuts">
        <short>
          <var>HintShortCuts</var> - the hints for shortcut keys (present if True)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.HintShortPause">
        <short>
          <var>HintShortPause</var> - the length of pause before a shortcut hint is displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnDropFiles">
        <short>
          <var>OnDropFiles</var> - Event handler when files are dropped on the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnEndSession">
        <short>
          <var>OnEndSession</var> - Event handler for the end of the session</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnException">
        <short>
          <var>OnException</var> - Event handler for exceptions</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnGetMainFormHandle">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHelp">
        <short>
          <var>OnHelp</var> - Event handler when help is needed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnHint">
        <short>
          <var>OnHint</var> - Event handler when a hint is needed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdle">
        <short>
          <var>OnIdle</var> - event handler for the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnIdleEnd">
        <short>
          <var>OnIdleEnd</var> - event handler for the end of the Idle state</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnMinimize">
        <short>
          <var>OnMinimize</var> - Event handler for minimising the form</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnModalBegin">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnModalEnd">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnQueryEndSession">
        <short>
          <var>OnQueryEndSession</var> - Event handler for a query at the end of a  session</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnRestore">
        <short>
          <var>OnRestore</var> - Event handler for restoring a form which has been minimised or maximised</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnShowHint">
        <short>
          <var>OnShowHint</var> - Event handler for showing a hint</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.OnUserInput">
        <short>
          <var>OnUserInput</var> - Event handler when user input is received</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowButtonGlyphs">
        <short>
          <var>ShowButtonGlyphs</var> - determines whether to show show or not glyphs on TBitBtn controls</short>
        <descr>This option allows to set rule for all application TBitBtn controls which have GlyphShowMode = gsmApplication.

Different operation systems has different preferences regards showing button glyphs. Mac OS X and Windows UI guidlines suggests not to use them. Gnome has a special theme setting for this. sbgSystem option allows application to use system preferences for glyphs showing. sbgAlways is the default value because of Delphi compatibility.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowHint">
        <short>
          <var>ShowHint</var> - Determines whether a hint is to be displayed</short>
        <descr>Read or write flag to determine whether to display hint (stored as boolean, True if hint is to be displayed)
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowMainForm">
        <short>
          <var>ShowMainForm</var> - Determines whether main form is to be displayed</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.ShowMenuGlyphs">
        <short>
          <var>ShowMenuGlyphs</var> - Deturmines whether show or not glyphs in menu</short>
        <descr>This option allows to set rule for all application TMenuItem components which have GlyphShowMode = gsmApplication.

Different operation systems has different preferences regards showing images in menus. Mac OS X suggests not to use them. Gnome has a special theme setting for this. sbgSystem option allows application to use system preferences for menu icons showing. sbgAlways is the default value because of Delphi compatibility.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TApplicationProperties.Title">
        <short>
          <var>Title</var> to be shown in Application's top Border</short>
        <descr/>
        <seealso/>
      </element>
<!-- function Visibility: public -->
      <element name="TIDesigner.IsDesignMsg">
        <short>
          <var>IsDesignMsg</var> - receives a message from Sender, and returns True if it is a design message</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.IsDesignMsg.Message">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Modified">
        <short>Method when design is <var>Modified</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.Notification">
        <short>
          <var>Notification</var> that the suppied Operation has been applied to the specified Component</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.PaintGrid">
        <short>
          <var>PaintGrid</var> - method for painting the grid in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.ValidateRename">
        <short>
          <var>ValidateRename</var> - method to validate the Rename process</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.CurName">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.ValidateRename.NewName">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.GetShiftState">
        <short>
          <var>GetShiftState</var> - returns the value of the shift state (whether shifted, Cntl key, Alt key etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.GetShiftState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TIDesigner.SelectOnlyThisComponent">
        <short>
          <var>SelectOnlyThisComponent</var> - method to select only the currrent component in the designer</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.SelectOnlyThisComponent.AComponent">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TIDesigner.UniqueName">
        <short>
          <var>UniqueName</var> - returns a Unique name for the designer, using the BaseName as a starting point</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TIDesigner.UniqueName.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIDesigner.UniqueName.BaseName">
        <short/>
      </element>
<!-- object Visibility: default -->
      <element name="TFormPropertyStorage">
        <short>
          <var>TFormPropertyStorage</var> - class for storage of a Form's properties</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormCreate">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="TFormPropertyStorage.FormCreate.Sender">
        <short></short>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFormPropertyStorage.FormClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TFormPropertyStorage.FormClose.Sender">
        <short/>
      </element>
      <element name="TFormPropertyStorage.FormClose.CloseAction">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFormPropertyStorage.Create" link="#rtl.Classes.TComponent.Create"/>
      <element name="TFormPropertyStorage.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TFormPropertyStorage.Destroy" link="#rtl.Classes.TComponent.Destroy"/>
<!-- function Visibility: default -->
      <element name="KeysToShiftState">
        <short>
          <var>KeysToShiftState</var> - converts an actual physical key code to a shift state (ie Shift, Ctrl, Alt etc)</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="KeysToShiftState.Result">
        <short/>
      </element>
      <element name="KeysToShiftState.Keys">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="KeyDataToShiftState">
        <short>
          <var>KeyDataToShiftState</var> - converts Key data to a shift state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="KeyDataToShiftState.Result">
        <short/>
      </element>
      <element name="KeyDataToShiftState.KeyData">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ShiftStateToKeys">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="ShiftStateToKeys.Result">
        <short></short>
      </element>
      <element name="ShiftStateToKeys.ShiftState">
        <short></short>
      </element>
      <!-- function Visibility: default -->
      <element name="WindowStateToStr">
        <short>
          <var>WindowStateToStr</var> - converts a Window state to a string</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="WindowStateToStr.Result">
        <short/>
      </element>
      <element name="WindowStateToStr.State">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="StrToWindowState">
        <short>
          <var>StrToWindowState</var> - converts a string to a Window state</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="StrToWindowState.Result">
        <short/>
      </element>
      <element name="StrToWindowState.Name">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="dbgs">
        <short></short>
        <descr>
        </descr>
        <errors>
        </errors>
        <seealso>
        </seealso>
      </element>
      <element name="dbgs.Result">
        <short></short>
      </element>
      <element name="dbgs.State">
        <short></short>
      </element>
      <element name="dbgs.Action">
        <short></short>
      </element>
      <element name="dbgs.Kind">
        <short></short>
      </element>
<!-- alias type Visibility: default -->
      <element name="TFocusState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="SaveFocusState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="SaveFocusState.Result">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="RestoreFocusState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="RestoreFocusState.FocusState">
        <short/>
      </element>
      <!-- function type Visibility: default -->
      <element name="TGetDesignerFormEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TGetDesignerFormEvent.Result">
        <short/>
      </element>
      <element name="TGetDesignerFormEvent.APersistent">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="OnGetDesignerForm">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetParentForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetParentForm.Result">
        <short/>
      </element>
      <element name="GetParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFirstParentForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetFirstParentForm.Result">
        <short/>
      </element>
      <element name="GetFirstParentForm.Control">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetDesignerForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetDesignerForm.Result">
        <short/>
      </element>
      <element name="GetDesignerForm.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindRootDesigner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="FindRootDesigner.Result">
        <short/>
      </element>
      <element name="FindRootDesigner.APersistent">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="IsAccel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="IsAccel.Result">
        <short/>
      </element>
      <element name="IsAccel.VK">
        <short/>
      </element>
      <element name="IsAccel.Str">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="NotifyApplicationUserInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="NotifyApplicationUserInput.Msg">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetShortHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetShortHint.Result">
        <short/>
      </element>
      <element name="GetShortHint.Hint">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetLongHint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="GetLongHint.Result">
        <short/>
      </element>
      <element name="GetLongHint.Hint">
        <short/>
      </element>
<!-- variable Visibility: default -->
      <element name="Application">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Screen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="ExceptionObject">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="HintWindowClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="RequireDerivedFormResource">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <!-- function type Visibility: default -->
      <element name="TMessageBoxFunction">
        <short>
          <var>TMessageBoxFunction</var> - the function to be used by a message box: specifies Text and Flags, and returns an integer value</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMessageBoxFunction.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Text">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Caption">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMessageBoxFunction.Flags">
        <short/>
      </element>
      <!-- variable Visibility: default -->
      <element name="MessageBoxFunction">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="DefaultBorderIcons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CreateWidgetset">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateWidgetset.AWidgetsetClass">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="FreeWidgetSet">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TDefaultMonitor">
        <short>
          <var>TDefaultMonitor</var> - enumerated type to specify on which monitor to place the form</short>
        <descr>dmDesktop - don't change the form position (use the full desktop)
dmPrimary - place the form on the primary monitor
dmMainForm - place the form on the same monitor as the main form. If there is no main form then use dmPrimary behavior.
dmActiveForm - place the form on the same monitor as the current active form. If there is no active form use dmMainForm behavior.</descr>
      </element>
      <element name="TDefaultMonitor.dmDesktop">
        <short></short>
      </element>
      <element name="TDefaultMonitor.dmPrimary">
        <short></short>
      </element>
      <element name="TDefaultMonitor.dmMainForm">
        <short></short>
      </element>
      <element name="TDefaultMonitor.dmActiveForm">
        <short></short>
      </element>
<!-- enumeration type Visibility: default -->
      <element name="TPopupMode">
        <short></short>
        <descr>
        </descr>
        <seealso>
        </seealso>
      </element>
      <element name="TPopupMode.pmNone">
        <short></short>
      </element>
      <element name="TPopupMode.pmAuto">
        <short></short>
      </element>
      <element name="TPopupMode.pmExplicit">
        <short></short>
      </element>
    </module>
    <!-- Forms -->
  </package>
</fpdoc-descriptions>
