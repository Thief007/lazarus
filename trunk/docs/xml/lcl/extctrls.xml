<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    ExtCtrls
  ====================================================================
-->
    <module name="ExtCtrls">
      <short>Some extra controls commonly used in Lazarus forms</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="lMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TAbstractReader">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPageFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPageFlag.pfAdded">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPageFlag.pfRemoving">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TPageFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomPage">
        <short>
          <var>TCustomPage</var>: The base type for 
          <var>Page</var>
        </short>
        <descr>
          <var>TCustomPage</var>: The base type for the tabbed pages found in notebooks
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomPage.GetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetTabVisible.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetImageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetTabVisible.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.WMPaint.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetParent.AParent">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.Flags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.CMHitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.CMHitTest.Message">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPage.GetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetPageIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetPageIndex.AValue">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.TabVisible">
        <short>
          <var>TabVisible</var> - is the Tab for this page visible?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.PageIndex">
        <short>
          <var>PageIndex </var>- integer index value for this page in the notebook</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomPage.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.Create.TheOwner">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomPage.AdjustClientRect">
        <short>
          <var>AdjustClientRect</var> - adjust the size of the client rectangle to fit the specified coordinates 
          <var>ARect</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.AdjustClientRect.ARect">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomPage.CanTab">
        <short>
          <var>CanTab</var> - if True, this control can be reached by use of the Tab key</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.CanTab.Result"/>
      <!-- function Visibility: public -->
      <element name="TCustomPage.IsVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.IsVisible.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.ImageIndex">
        <short>
          <var>ImageIndex</var> - integer index value for the image associated with this page</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomPageClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TNBPages">
        <short>
          <var>TNBPages</var> - NoteBook Pages: an array of strings containing the names of the pages</short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FNotebook">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.Get">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.Get.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Get.Index">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetCount.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetObject.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.GetObject.Index">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TNBPages.Put">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.S">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TNBPages.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.thePageList">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.theNotebook">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Delete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Delete.Index">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.S">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Move">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.CurIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.NewIndex">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTabChangingEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.AllowChange">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabPosition">
        <short>
          <var>TTabPosition</var> - position of tab relative to page: top, bottom, left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpTop">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpBottom">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpRight">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabStyle">
        <short>
          <var>TTabStyle</var> - normal tab style, buttons or flat buttons</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsTabs">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsFlatButtons">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TTabGetImageEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.TabIndex">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.ImageIndex">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TNoteBookOption">
        <short>
          <var>TNoteBookOption</var> - Show the close button on a tab, allow multi-line tabs</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNoteBookOption.nboShowCloseButtons">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNoteBookOption.nboMultiLine">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TNoteBookOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomNotebook">
        <short>
          <var>TCustomNotebook</var>: The base type for  <var>TNotebook</var> and  <var>TPageControl</var>
        </short>
        <descr>
          <p>
            <var>TCustom Notebook</var>: The base type for 
            <var>TNotebook</var> and 
            <var>TPageControl</var>
          </p>
          <p>A notebook consists of several <var>Pages</var>, usually of similar type and kept indexed. They may contain <var>Images</var> listed in a table. One page is displayed at a time, but the other pages are indicated by tabs which may have their names on them, and a different page can be selected for display by clicking its tab </p>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FAccess">
        <short/>
        <descr/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FAddingPages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FLoadedPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnCloseTabClicked"/>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.fOnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageIndexOnLastChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.CNNotify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.CNNotify.Message">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetActivePage.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetActivePageComponent.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.GetPage.aIndex">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPageCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPageCount.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPageIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.InsertPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.InsertPage.APage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.InsertPage.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.IsStoredActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.IsStoredActivePage.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.MoveTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.MoveTab.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.MoveTab.NewIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.WSMovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.WSMovePage.APage">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.WSMovePage.NewIndex">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.RemovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.RemovePage.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetActivePage.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetActivePageComponent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetImages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetOptions.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetPageIndex.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetPages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetPages.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetShowTabs.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetTabPosition.tabPos">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.ShowCurrentPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.UpdateAllDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.UpdateDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.UpdateDesignerFlags.APageIndex">
        <short/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomNotebook.PageClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.DoCreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ReadState.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.ShowControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ShowControl.APage">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.UpdateTabProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomNotebook.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.ChildClassAllowed.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ChildClassAllowed.ChildClass">
        <short/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomNotebook.ActivePageComponent">
        <short>
          <var>ActivePageComponent</var> - the actual contents of the currently selected 
          
          <var>Page</var>
        </short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomNotebook.ActivePage">
        <short>
          <var>ActivePage</var> - the  name (string) of the 
          
          <var>Page</var> that is currently selected and is available for interaction</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomNotebook.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomNotebook.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.TabIndexAtClientPos">
        <short>
          <var>TabIndexAtClientPos</var> - the index value of the Tab at the specified position 
          
          <var>ClientPos</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.TabIndexAtClientPos.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.TabIndexAtClientPos.ClientPos">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CanTab">
        <short>
          <var>CanTab</var> - if True, this location can be reached by using the Tab key</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CanTab.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetImageIndex">
        <short>
          <var>GetImageIndex</var> - find the index number of the image associated with the specified Page index</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetImageIndex.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.GetImageIndex.ThePageIndex">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.IndexOf">
        <short>
          <var>IndexOf</var> - returns the index value of a specified page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.IndexOf.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.IndexOf.APage">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CustomPage">
        <short>
          <var>CustomPage</var> - returns the page specified by 
          
          <var>Index</var>
        </short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CustomPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.CustomPage.Index">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CanChangePageIndex">
        <short>
          <var>CanChangePageIndex</var> - determine whether it is permissible to change the index of the page</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CanChangePageIndex.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetMinimumTabWidth">
        <short>
          <var>GetMinimumTabWidth</var> - find the smallest permissible tab width</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetMinimumTabWidth.Result">
        <short/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetMinimumTabHeight">
        <short>
          <var>GetMinimumTabHeight</var> - find the least permissible height for a tab</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetMinimumTabHeight.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomNotebook.DoCloseTabClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.DoCloseTabClicked.APage">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Images">
        <short>
          <var>Images</var> - the list of images associated with the pages of this notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnChanging">
        <short>
          <var>OnChanging</var> - event handler for changing a tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnCloseTabClicked">
        <short>
          <var>OnCloseTabClicked</var> - event handler for clicking on the Close button to close a tab</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnGetImageIndex">
        <short>
          <var>OnGetImageIndex</var> - event handler for getting an image index</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnPageChanged">
        <short>
          <var>OnPageChanged</var> - event handler for a change in the page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Options">
        <short>The set of  <var>Options</var> for the Notebook: Show close buttons on the tabs, multi-line tabs</short>
        <descr>
          <p>The set of  <var>Options</var> for the Notebook: </p>
          <p>
            <var>nboShowCloseButtons</var> (display a little CloseButton on the Tab next to the label, to allow the user to close that tab),</p>
          <p>
            <var>nboMultiLine</var> (allows multi-line captions on the Tabs)</p>
        </descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Page">
        <short>The current <var>Page</var> of the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.Page.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageCount">
        <short>
          <var>PageCount</var> - the number of Pages in the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageIndex">
        <short>
          <var>PageIndex</var> - Index number of the current page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageList">
        <short>
          <var>PageList</var> - the Indexed list of the Pages in the Notebook</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Pages">
        <short>The contents of the <var>Pages</var> in the Notebook (as Strings)</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.ShowTabs">
        <short>
          <var>ShowTabs</var> - if True (default condition), show the tabs for each page</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.TabPosition">
        <short>
          <var>TabPosition</var> - top, bottom, left or right</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomNotebook.TabStop">
        <short>
          <var>TabStop</var> - if True (default condition) this control can be reached using the Tab key</short>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPage">
        <short>
          <var>TPage</var>: One of the pages in a tabbed Notebook</short>
        <descr>
          <p>
            <var>TPage</var>: One of the pages in a tabbed Notebook</p>
          <p>Inherits most of its properties from <link id="#lcl.ExtCtrls.TCustomPage">TCustomPage</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
          <link id="#lcl.ExtCtrls.Multi-PageControls">Multi-PageControls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TNotebook">
        <short>
          <var>TNotebook</var>: A series of tabbed  
          <var>pages</var> placed together to make a notebook</short>
        <descr>
          <p>
            <var>TNotebook</var>: A series of tabbed 
  
            <var>pages</var> placed together to make a notebook</p>
          <p>A notebook consists of several <var>Pages</var>, usually of similar type and kept indexed. They may contain <var>Images</var> listed in a table. One page is displayed at a time, but the other pages are indicated by tabs which may have their names on them, and a different page can be selected by clicking its tab </p>
          <p>Inherits most of its properties from <link id="#lcl.ExtCtrls.TCustomNotebook">TCustomNoteBook</link>
          </p>
          <p>To use a Notebook, select its icon from the 'Additional' tab of the Component Palette and place it on the Form. Adjust its size, position, alignment and anchoring as required, by moving the object on the Form or by using the Object Inspector.</p>
          <p>Tabbed Pages are added to the NoteBook by selecting the control and right-clicking with the mouse to get a pop-up menu whose first item is 'Add Page'. Pages already in the NoteBook can be edited by selecting the appropriate ActivePage in the Object Inspector and modifying its properties or adding additional components to that Page.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls"/>
          <link id="#lcl.ExtCtrls.TPage"/>
          <link id="#lcl.ExtCtrls.Multi-PageControls"/>
        </seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TNotebook.GetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNotebook.GetActiveNotebookPageComponent.Result">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TNotebook.GetNoteBookPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNotebook.GetNoteBookPage.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.GetNoteBookPage.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TNotebook.SetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.SetActiveNotebookPageComponent.AValue">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TNotebook.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TNotebook.Page">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.Page.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TNotebook.ActivePageComponent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TNotebook.Pages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.ActivePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnCloseTabClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Options">
        <short>Set of <var>Options</var> for this Notebook. Include <var>nboShowCloseButtons</var>, <var>nboMultiLine</var>
        </short>
        <descr>
          <p>Set of <var>Options</var> for this Notebook. Include <var>nboShowCloseButtons</var>, <var>nboMultiLine</var>
          </p>
          <p>To use the Options, select the tag in the Object Inspector, then select for inclusion any of the listed options, setting them True or False as appropriate.</p>
          <p>For example, setting <var>nboShowCloseButtons</var> to True will cause a CloseButton (a small CheckBox with an 'x' in it) to appear on each Tab of the NoteBook, allowing the tabbed Page to be closed when the user clicks on the CloseButton.</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.ShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTimer">
        <short>
          <var>TTimer</var>: An elapsed timer useful in many applications</short>
        <descr>
          <p>
            <var>TTimer</var>: An elapsed timer useful in many applications</p>
          <p>Inherits most of its properties from <link id="#lcl.CustomTimer.TCustomTimer">TCustomTimer</link>
          </p>
        </descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TIdleTimerAutoEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnIdle">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnIdleEnd">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnUserInput">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TIdleTimerAutoEvents">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TIdleTimer">
        <short>
          <var>TIdleTimer</var> : A timer to measure idle time between processes</short>
        <descr>
          <p>
            <var>TIdleTimer</var>: A timer to measure idle time between processes</p>
          <p>Inherits most of its properties from <link id="#lcl.CustomTimer.TCustomTimer">TCustomTimer</link>
          </p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoEndEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoStartEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FHandlersConnected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.UpdateHandlers">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.SetAutoEndEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoEndEvent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.SetAutoStartEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoStartEvent.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.SetAutoEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoEnabled.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnIdle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnIdle.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnIdleEnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnIdleEnd.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnUserInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnUserInput.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnUserInput.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TIdleTimer.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TIdleTimer.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoEndEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoStartEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TShapeType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRectangle">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stSquare">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRoundRect">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRoundSquare">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stEllipse">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stCircle">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stSquaredDiamond">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stDiamond">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TShape">
        <short>
          <var>TShape</var> - An arbitrary graphic geometrical shape placed on the Form. It may be one of a series of standard shapes defined by 
          <var>TShapeType </var>
        </short>
        <descr>
          <p>
            <var>TShape</var>: An arbitrary graphic geometrical shape placed on the Form. It may be one of a series of standard shapes defined by 
            <var>TShapeType</var> (stRectangle, stSquare, stRoundRect, stRoundSquare, stEllipse, stCircle, stSquaredDiamond, stDiamond).</p>
          <p>It can be displayed using the <var>Paint</var> method and the <var>Brush</var> and <var>Pen</var> tools.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FPen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetBrush.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetPen.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetShape.Value">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TShape.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TShape.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TShape.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TShape.StyleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.StyleChanged.Sender">
        <short/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Brush">
        <short>The Brush to be used for colouring this shape</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Pen">
        <short>The Pen to be ussed for drawing this shape</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Shape">
        <short>Which <var>Shape</var>? (Rectangle, Square, RoundRect, RoundSquare, Ellipse, Circle,  SquaredDiamond, Diamond)</short>
        <descr>
          <p>Which <var>Shape</var>? </p>
          <p>stRectangle,</p>
          <p>stSquare,</p>
          <p>stRoundRect,</p>
          <p>stRoundSquare,</p>
          <p>stEllipse,</p>
          <p>stCircle,</p>
          <p>stSquaredDiamond,</p>
          <p>stDiamond</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsNone">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsPattern">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsUpdate">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCanResizeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.NewSize">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.Accept">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomSplitter">
        <short>
          <var>TCustomSplitter</var> : the base type for 
          
          <var>TSplitter</var>
        </short>
        <descr>
          <p>
            <var>TCustomSplitter</var>: the base type for 
            
            <var>TSplitter</var>
          </p>
          <p>A Splitter is a vertical or horizontal bar that can be placed on a panel or form, to separate sub-panels functionally and allow re-sizing of the constituent sub-panels</p>
          <p>This class defines many of the basic properties for the children classes, such as positioning, sizing and alignment</p>
          <pre>{ TCustomSplitter is a control for interactively resizing another control.
    It is a vertical or horizontal bar anchored to a side of a control.
    You can either set the Align property to alLeft (alRight,alTop,alBottom),
    then it will become a vertical bar, aligned to the left and when the user
    moves it with the mouse, the control to the left with the same Align=alLeft
    will be resized.
    The second more flexible possibility is to set the properties Align=alNone,
    AnchorSides and ResizeAnchor.
    }   </pre>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FAutoSnap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FBeveled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FMinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FOnCanResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FOnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FSplitDragging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.fSplitterStartMouseXY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.fSplitterStartLeftTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetAutoSnap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAutoSnap.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetBeveled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetBeveled.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetMinSize.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetResizeStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetResizeStyle.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.StartSplitterMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.StartSplitterMove.Restart">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.StartSplitterMove.MouseXY">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.Y">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Button">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Shift">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.X">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Y">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomSplitter.FindAlignControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomSplitter.FindAlignControl.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.SetAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAlign.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.SetAnchors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAnchors.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.CheckAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomSplitter.CheckNewSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomSplitter.CheckNewSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.CheckNewSize.NewSize">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomSplitter.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.ResizeStyle">
        <short>Style for resizing - as a line, a pattern, full update, or none</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.AutoSnap">
        <short>AutoSnap - automatically snaps to a grid point or grid line in the Form designer</short>
        <descr>Boolean property, true if snapping to grid positions</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Beveled">
        <short>Whether the edges of the splitter bar are bevelled</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.MinSize">
        <short>Minimum size for splitter - default 30 pixels</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.OnCanResize">
        <short>Event handler for receiving permission to resize</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.OnMoved">
        <short>Event handler for occasion when splitter has moved</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TSplitter">
        <short>
          <var>TSplitter</var> : A vertical or horizontal bar placed on a panel or form, to separate sub-panels functionally</short>
        <descr>
          <p>
            <var>TSplitter</var>: A vertical or horizontal bar that can be placed on a panel or form, to separate sub-panels functionally and allow re-sizing of the constituent sub-panels</p>
          <p>The splitter extends for the full height (if vertical) or full width (if horizontal) of the parent control (form or panel) and is anchored to the edges; its position along the length or height of the parent is determined by the programmer or user by moving the whole control with the mouse, and its size can be adjusted using the sizing bars and with the <var>ResizeAnchor</var> property </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.AutoSnap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Beveled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.MinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnCanResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPaintBox">
        <short>
          <var>TPaintBox</var>: a painted rectangular box with defined size and color</short>
        <descr>
          <p>
            <var>TPaintBox</var>: a painted rectangular box with defined size and colour</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPaintBox.FOnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPaintBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TPaintBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPaintBox.Create.AOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TPaintBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomImage">
        <short>
          <var>TCustomImage</var> - the base type for 
          
          <var>TImage</var>
        </short>
        <descr>
          <var>TCustomImage</var>







: The base type for 
          
          <var>TImage</var>
. This is a control of the class 
          
          <var>TGraphicControl</var>
, designed to be lightweight and fast</descr>
        <seealso>
          <link id="#lcl.Controls.TGraphicControl">TGraphicControl</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FPicture">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FCenter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FProportional">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FStretch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetPicture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetPicture.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetCenter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetCenter.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetProportional">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetProportional.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetStretch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetStretch.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetTransparent.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.PictureChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.PictureChanged.SEnder">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomImage.DestRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomImage.DestRect.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomImage.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomImage.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomImage.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomImage.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Center">
        <short>Should image be centered?</short>
        <descr>Boolean property - True if image is to be centered</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Picture">
        <short>
          <var>Picture </var>






- the actual image for display</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Stretch">
        <short>True if picture is to be stretched</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Transparent">
        <short>True if you can see through the image</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Proportional">
        <short>True if image is proportional</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TImage">
        <short>
          <var>TImage</var> - a graphic image placed on the form; usually loaded from a picture file.</short>
        <descr>
          <p>
            <var>TImage</var>







: a graphic image placed on the form; usually loaded from a picture file.</p>
          <p>The actual image is found in <var>Picture</var> or <var>Canvas</var>
          </p>
          <p>Inherits most of its properties from its ancestors, <link id="TCustomImage">TCustomImage</link>, <link id="#lcl.Controls.TGraphicControl">TGraphicControl</link> and <link id="#lcl.Controls.TControl">TControl</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Center">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Picture"/>
      <!-- property Visibility: published -->
      <element name="TImage.Proportional">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Stretch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Transparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBevelStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelStyle.bsLowered">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelStyle.bsRaised">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBevelShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsBox">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsFrame">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsTopLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsBottomLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsLeftLine">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsRightLine">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBevel">
        <short>A bevel placed around the edge of buttons and other components</short>
        <descr>
          <p>
            <var>TBevel</var>






 - a bevel placed around the edge of buttons and other components.</p>
          <p>Its appearance is governed by <link id="TBevelShape">TBevelShape</link>, <link id="TBevelStyle">TBevelStyle</link> and <link id="TBevelwidth">TBevelwidth</link>
          </p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBevel.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBevel.FShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBevel.GetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBevel.GetStyle.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBevel.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.SetStyle.aStyle">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBevel.GetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBevel.GetShape.Result">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TBevel.SetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.SetShape.aShape">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBevel.Paint">
        <short>Virtual <var>Paint</var> method called in response to paint requests.</short>
        <descr>Virtual <var>Paint</var> method called in response to paint requests received by the parent control.
</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBevel.Create">
        <short>Create a new instance of a Graphic Control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.Create.AOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TBevel.Destroy">
        <short>Destroy this instance of a graphic control and return its resources</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TBevel.Invalidate">
        <short>Render this control non-valid</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Align">
        <short>Used to align the control in one of four directions.</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Either reads a flag containing alignment instructions (<var>FAlign</var>) or writes alignment instructions (<var>SetAlign</var>)</p>
          <p>May have no alignment, may have custom or client alignment, or can be aligned to top, bottom, left or right</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Anchors">
        <short>The set of anchor definitions for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines how the control is to be anchored to its client or parent conrol</p>
          <p>Either reads a flag containing the set of anchors to be used, or writes a set of anchors. If they have been written, this is indicated in <var>IsAnchorsStored</var>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.BorderSpacing">
        <short>Determines the border spacing for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determines the border spacing for this control</p>
          <p>Reads flag to find stored spacing values required for the border of the control, or writes the flag to set the spacing.</p>
          <p>The properties are defined in the parent class <link id="#lcl.Controls.TControlBorderSpacing">TControlBorderSpacing</link>
          </p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Constraints">
        <short>Determine <var>Constraints</var> (max and min height and width) for this control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Determine <var>Constraints</var> (max and min height and width) for this control; reads the size constraints or stores new ones.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Height">
        <short>
          <var>Height</var> - the vertical dimension of the control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Left">
        <short>
          <var>Left</var> - the coordinate of the left edge of the control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Name">
        <short>Name of the component.</short>
        <descr>
          <var>Name</var> is the name of the component. This name should be a valid
identifier, i.e. must start with a letter, and can contain only letters,
numbers and the underscore character. When attempting to set the name of a
component, the name will be checked for validity. Furthermore, when a
component is owned by another component, the name must be either empty
or must be unique among the child component names.
</descr>
        <seealso/>
        <errors>Attempting to set the name to an invalid value will result in an exception
being raised.
</errors>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Shape">
        <short>
          <var>Shape</var>  - whether a box, a frame or a line along one of the edges</short>
        <seealso>
          <link id="#lcl.ExtCtrls.TBevelShape"/>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Top">
        <short>
          <var>Top</var> - the coordinates of the top edge of the control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Style">
        <short>
          <var>Style</var> - whether raised or lowered</short>
        <seealso>
          <link id="#lcl.ExtCtrls.TBevelStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Visible">
        <short>
          <var>Visible</var> - can the control be seen?</short>
        <descr>
          <pre>The Visible property represents the ability to see a visual control. 
          If Visible is True the control is shown, otherwise it is hidden.
          Calling Show sets, among others, Visible to True.
          Setting Visible to False is equivalent to calling Hide method.</pre>
          <remark>The Visible property does not depend on control's parent visibility. Use IsVisible method to consider this and get real visibility.</remark>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Width">
        <short>
          <var>Width </var>- the horizontal dimension of the control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnChangeBounds">
        <short>Event handler for a change in bounds of the control</short>
        <descr>
          <p>// standard properties, which should be supported by all descendants</p>
          <p>Reads or Writes flag if bounds are changed</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnResize">
        <short>Event Handler for resize of control</short>
        <descr>// standard properties, which should be supported by all descendants<br/>
Reads or Writes flag if control is re-sized.
</descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseDown">
        <short>Event handler for when a mouse button is pressed down</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseMove">
        <short>Event handler for mouse movement within the current control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseUp">
        <short>Event handler for when the mouse button is released, ie "up"</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnPaint">
        <short>
          <var>OnPaint</var> - event handler for request to paint canvas</short>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnLayout.clHorizontalThenVertical"/>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnLayout.clVerticalThenHorizontal">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomRadioGroup">
        <short>
          <var>TCustomRadioGroup:</var>   the base type for 
          
          <var>TRadioGroup</var>
        </short>
        <descr>
          <p>
            <var>TCustomRadioGroup:</var> the base type for 
            
            <var>TRadioGroup</var>
          </p>
          <p>A group of related but mutually exclusive radio buttons,
requiring the user to select one af a set of alternatives</p>
          <p>This class defines <var>Items</var>, where the captions for individual radio boxes are stored, <var>Rows</var> and <var>Columns</var> for arranging the radio boxes, and ColumnLayout to determine whether the data are arranged down the columns first, or across the rows first.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FButtonList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FHiddenButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FCreatingWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FReading">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FOnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.ItemsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.ItemsChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.Clicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.Clicked.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.DoPositionButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.SetColumnLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetColumnLayout.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.UpdateRadioButtonStates">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.ReadState.Reader">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetItem.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetColumns.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetItemIndex.Value">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomRadioGroup.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.GetItemIndex.Result">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.Resize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.Items">
        <short>
          <var>Items</var> - a string list containing the captions for the radio boxes</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.Columns">
        <short>
          <var>Columns</var>  - the number of columns in which the 
          
          <var>Items</var>  (radio buttons) are to be arranges</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.ColumnLayout">
        <short>
          <var>ColumnLayout</var>  - 
          
          <var>HorizontalThenVertical </var> or vice versa</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomRadioGroup.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomRadioGroup.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomRadioGroup.CanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.CanModify.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomRadioGroup.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomRadioGroup.Rows">
        <short>
          <var>Rows </var>- the number of rows in which Items (radio boxes) are held</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.Rows.Result">
        <short>Number of rows</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TRadioGroup">
        <short>
          <var>TRadioGroup</var>   : A group of related but mutually exclusive radio buttons, requiring the user to select one af a set of alternatives</short>
        <descr>
          <p>
            <var>TRadioGroup</var>: A group of related but mutually exclusive radio buttons, requiring the user to select one af a set of alternatives. As one button becomes selected, the remaining buttons in the group become automatically deselected.</p>
          <p>To Use this control, place it in the required position on the form, then in the Object Inspector select <var>Items</var> and click on the ellipsis (...) to open the string editor. Type in the captions to accompany each check box, then close the string editor and you will see a series of Radio Boxes with their captions displayed beside them. (Note - unlike <link id="#lcl.ExtCtrls.TCheckGroup">TCheckGroup</link>, there is no special RadioGroup editor)</p>
          <p>Inherits properties from <link id="#lcl.ExtCtrls.TCustomRadioGroup">TCustomRadioGroup</link> and <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>
          </p>
          <p>
            <var>TRadioGroup</var> behaves differently from a group of 
            
            <var>TRadioButton</var> controls placed arbitrarily around a form. </p>
          <p>In the case of <var>TRadioButton</var>, the mutual exclusivity is a feature that applies to any <var>RadioButton</var> anywhere in the Form, and the <var>RadioButtons</var> can be rearranged in any order or placed anywhere within the containing <var>Form</var>, while in <var>TRadioGroup</var> the exclusivity applies only to buttons within the Group, which are ordered strictly according to their <var>ItemIndex</var> within the <var>Items</var> stringlist. </p>
          <p>
            <var>TRadioButton</var> is an entity in itself, with a number of additional properties, whereas the buttons within 
            
            <var>TRadioGroup</var>  are not separate entities, but rather are simply entries in a list of strings, each of which is associated with the on-screen image of a 
            
            <var>RadioButton</var>. </p>
          <p>The example shows the difference between the use of <var>TRadioButton</var> and <var>TRadioGroup</var>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
          <link id="#lcl.StdCtrls.TRadioButton">TRadioButton</link>
        </seealso>
        <example file="extctrls/radiobutton.pas"/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Caption">
        <short>
          <var>Caption </var>- the text string appearing above the whole RadioGroup box</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Items">
        <short>
          <var>Items</var> - a string list containing the captions of the radio boxes</short>
        <descr>
          <p>
            <var>Items</var> - a string list containing the captions of the radio boxes</p>
          <p>Use the String List editor, opened by selecting <var>Items</var> and the ellipsis (...) in the Object Inspector, to insert the captions for the radio boxes, and determine their order and layout using the <var>Rows</var>, <var>Columns</var> and <var>ColumnLayout</var> properties
          </p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCheckGroupClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCheckGroupClicked.Sender">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCheckGroupClicked.Index">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomCheckGroup">
        <short>
          <var>TCustomCheckGroup</var>: The base type for 
          
          <var>TCheckGroup</var>
        </short>
        <descr>
          <p>
            <var>TCustomCheckGroup</var>: The base type for 
            
            <var>TCheckGroup</var>
          </p>
          <p>This class defines <var>Items</var>, where the captions for individual check boxes are stored, <var>Rows</var> and <var>Columns</var> for arranging the check boxes, and ColumnLayout to determine whether the data are arranged down the columns first, or across the rows first.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FButtonList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FCreatingWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FOnItemClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckGroup.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.GetChecked.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.GetChecked.Index">
        <short/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckGroup.GetCheckEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.GetCheckEnabled.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.GetCheckEnabled.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.Clicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Clicked.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.DoClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.DoClick.Index">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.DoPositionButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.ItemsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.ItemsChanged.Sender">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetChecked.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetChecked.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetCheckEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetCheckEnabled.Index">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetCheckEnabled.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetColumnLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetColumnLayout.AValue">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.UpdateItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetItems.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetColumns.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.DefineProperties.Filer">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.ReadData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.WriteData.Stream">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.DoOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomCheckGroup.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Create.TheOwner">
        <short/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomCheckGroup.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomCheckGroup.Rows">
        <short>
          <var>Rows</var> - the number of rows in which the Items (check boxes) are arranged</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.Rows.Result">
        <short>The number of rows holding items</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Items">
        <short>
          <var>Items</var> - a string list for the captions of the check boxes</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Checked.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.CheckEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.CheckEnabled.Index">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Columns">
        <short>
          <var>Columns</var>  - the number of columns in which the 
          
          <var>Items</var>  (check boxes) are to be arranges</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.ColumnLayout">
        <short>
          <var>ColumnLayout</var> - 
          
          <var>HorizontalThenVertical </var>or vice versa</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.OnItemClick">
        <short>
          <var>OnItemClick</var> - event handler for mouse click on one of the Items in the Check Group</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TCheckGroup">
        <short>
          <var>TCheckGroup</var>  : A group of Check Boxes physically and logically grouped together on a form</short>
        <descr>
          <p>
            <var>TCheckGroup</var>: A group of Check Boxes physically and logically grouped together on a form</p>
          <p>To Use this control, place it in the required position on the form, then
either right-click on the control to see the pop-up CheckGroup editor, or in the Object Inspector select <var>Items</var> and click on the ellipsis (...) to open the string editor. In either case, type in the captions to accompany each check box, then close the string or CheckGroup editor and you will see a series of boxes with their captions displayed beside them.</p>
          <p>Inherits properties from <link id="#lcl.ExtCtrls.TCustomCheckGroup">TCustomCheckGroup</link> and <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>
          </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
          <link id="#lcl.ExtCtrls.TRadioGroup">TRadioGroup</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Caption">
        <short>
          <var>Caption</var>: the string which appears at the top of the Check Group Box</short>
        <descr>
          <p>
            <var>Caption</var>: the string which appears as a caption at the top of the Check Group Box to describe the function of the Check Group as a whole</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Items">
        <short>
          <var>Items</var>  - a string list containing the captions of the check boxes</short>
        <descr>
          <p>
            <var>Items</var> - a string list containing the captions of the check boxes</p>
          <p>Use the String List editor or the CheckGroup editor (opened by right-clicking on the control in the Form) to insert the captions for the check boxes, and determine their order and layout</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnItemClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBoundLabel">
        <short>
          <var>TBoundLabel</var>: A label bound to another object, for example in 
          
          <var>TLabeledEdit</var>
        </short>
        <descr>
          <var>TBoundLabel</var>: A label bound to another object, for example in 
          
          <var>TLabeledEdit</var>
        </descr>
        <seealso>
          <link id="#lcl.ExtCtrls.TLabeledEdit">TLabeledEdit</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBoundLabel.Create">
        <short>Create a new instance of a Graphic Control</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBoundLabel.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBoundLabel.FocusControl">
        <short>
          <var>FocusControl</var> - whether this control has focus</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Caption">
        <short>The Caption to be used for this label</short>
        <descr>Caption : the caption which will appear on the Bound Label, to identify its function
</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Color">
        <short>The Colour to be used for this label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Height">
        <short>The height (vertical dimension) of the label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Left">
        <short>The coordinates of the left border</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentColor">
        <short>The colour of the parent - should we stay the same?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentFont">
        <short>Do we retain the font of the parent?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentShowHint">
        <short>Do we use the same hinting rules as the parent?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.PopupMenu">
        <short>A popup menu to be shown if the right mouse button is clicked over this control</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ShowAccelChar">
        <short>Should accelerator character be displayed (underlined in label)?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ShowHint">
        <short>Should hint be shown?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Top">
        <short>Coordinates of the top edge of the label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Layout">
        <short>Layout - is text at top, bottom, left or right of allocated rectangle?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.WordWrap">
        <short>WordWrap - do we wrap to the next line if text is too long to fit on one line?</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnClick">
        <short>Event Handler for mouse click</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnDblClick">
        <short>Event handler for mouse double-click</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseDown">
        <short>Event handler for mouse button pressed over the label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseMove">
        <short>Event handler for mouse movement within label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseUp">
        <short>Event handler for mouse button being released ('up') within label</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TLabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpAbove">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpBelow">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpLeft">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpRight">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLabeledEdit">
        <short>Custom Labelled Edit</short>
        <descr>
          <p>
            <var>TCustomLabeledEdit</var>






: The base type for 
            
            <var>LabeledEdit</var>.</p>
          <p>Note particularly the <link id="TCustomLabeledEdit.EditLabel">EditLabel</link> property (see <link id="#lcl.Extctrls.TBoundLabel">TBoundLabel</link>), which contains the label attached to the Edit control.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomEdit">TCustomEdit</link>
          <link id="#lcl.StdCtrls.TCustomLabel">TCustomLabel</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FEditLabel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FLabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FLabelSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabeledEdit.SetLabelPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetLabelPosition.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabeledEdit.SetLabelSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetLabelSpacing.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetParent.AParent">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.SetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetName.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.ALeft">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.ATop">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.AWidth">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.AHeight">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.DoPositionLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Notification.AComponent">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Notification.Operation">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CMVisibleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.CMVisibleChanged.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CMEnabledChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.CMEnabledChanged.Msg">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CreateInternalLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLabeledEdit.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.EditLabel">
        <short>
          <var>EditLabel </var>- the label attached to the edit box</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.LabelPosition">
        <short>
          <var>LabelPosition </var>






- whether above, below, to the left or to the right of the Edit box</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.LabelSpacing">
        <short>
          <var>LabelSpacing</var>






 - the distance between the Label and the Edit box</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TLabeledEdit">
        <short>Labelled Edit: An Edit Box with a permanently attached Label</short>
        <descr>
          <p>
            <var>TLabeledEdit</var>






: An Edit Box with a permanently attached Label</p>
          <p>Saves time and effort over placing separate Label and Edit Box on Form. The properties are described in the parent component, <link id="#lcl.ExtCtrls.TCustomLabeledEdit">TCustomLabeledEdit</link> from which most of the properties are inherited</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomEdit">TCustomEdit</link>
          <link id="#lcl.ExtCtrls.TBoundLabel">TBoundLabel</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.CharCase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.LabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.LabelSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.PasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Text">
        <short>
          <var>Text</var>






: the text-string being entered or edited in the Labelled Edit box</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TPanelBevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TBevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomPanel">
        <short>
          <var>TCustomPanel</var>: The base type for 
          
          <var>TPanel</var>
        </short>
        <descr>
          <p>
            <var>TCustomPanel</var>: The base type for 
            
            <var>TPanel</var>
          </p>
          <p>A Panel is a defined rectangular area of the form into which other components can be placed to group them functionally and geographically.</p>
          <p>
            <var>TCustomPanel </var>defines the positioning and bevelling properties of any descendant classes, and provides methods for painting and writing text to the panel.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelInner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelOuter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FFullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetAlignment.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelInner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelInner.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelOuter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelOuter.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelWidth.Value">
        <short/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBorderWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBorderWidth.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.AdjustClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.AdjustClientRect.Rect">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.RealSetText.Value">
        <short/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPanel.ParentColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPanel.ParentColorIsStored.Result">
        <short/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPanel.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPanel.CanTab.Result">
        <short/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomPanel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.Create.TheOwner">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Alignment">
        <short>
          <var>Alignment</var> - whether text is left or right justified, or centered</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelInner">
        <short>
          <var>BevelInner</var> - determines the nature of the Inner Bevel of the panel (whether raised, lowered etc)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelOuter">
        <short>
          <var>BevelOuter</var>  - determines the nature of the Outer Bevel of the panel (whether raised, lowered etc)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelWidth">
        <short>
          <var>BevelWidth </var>- the Width of the panel's bevel in pixels</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BorderWidth"/>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.FullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPanel">
        <short>
          <var>TPanel</var>: A defined rectangular area of the form into which other components can be placed</short>
        <descr>
          <p>
            <var>TPanel</var>: A defined rectangular area of the form into which other components can be placed to group them functionally and geographically</p>
          <p>Most of the properties are defined in ancestor classes including <link id="#lcl.ExtCtrls.TCustomPanel">TCustomPanel</link>, <link id="#lcl.Controls.TCustomControl">TCustomControl</link> and <link id="#lcl.Controls.TWinControl">TWinControl</link>
          </p>
          <p>Any controls such as buttons or check boxes that are placed inside the panel become its children, and inherit many of its properties. If the Panel is moved, the child controls move with it. Any part of a child control that falls outside the panel becomes invisible.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelInner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelOuter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.FullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnEnter">
        <short>
          <var>OnEnter</var>  - event handler for mouse entering the control or the control getting focus</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnExit">
        <short>
          <var>OnExit </var>- event handler for mouse leaving the control or the control losing focus</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_First">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_SELCHANGE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_SELCHANGING">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomTrayIcon">
        <short>
          <var>TCustomTrayIcon </var>- the base class for 
          
          <var>TTrayIcon</var>, a multiplatform System Tray component.</short>
      </element>
      <element name="TTrayIcon">
        <short>
          <var>TTrayIcon</var> is a multiplatform System Tray component. It adds an icon to the tray and signifies an application that is inactive but ready to be activated. Under Windows the System tray is usually located on the bottom-right corner of the screen, but it may be elsewhere. On other operating systems this position varies.</short>
      </element>
      <element name="TCustomTrayIcon.Create">
        <short>Creates a new instance of the component.</short>
        <descr>
          <var>Create</var> creates a new instance of a 
          
          <var>TCustomTrayIcon</var> class.
If 
          
          <var>AOwner</var> is not 
          
          <var>Nil</var>, the new component attempts to 
insert itself in the list of owned components of the owner.
</descr>
      </element>
      <element name="TCustomTrayIcon.Destroy">
        <short>Destroys the instance of the component.</short>
        <descr>
          <var>Destroy</var> sends a 
          
          <var>opRemove</var> notification to all components 
in the free-notification list. After that, all owned components are
destroyed by calling 
          
          <link id="TComponent.DestroyComponents">DestroyComponents</link> 
(and hence removed from the list of owned components). When this
is done, the component removes itself from its owner's child component list.
After that, the parent's destroy method is called.
</descr>
      </element>
      <element name="TCustomTrayIcon.Hide">
        <short>Hide - Removes the icon from the System Tray</short>
      </element>
      <element name="TCustomTrayIcon.Show">
        <short>Show - Shows the icon on the System Tray</short>
      </element>
      <element name="TCustomTrayIcon.ShowBalloonHint">
        <short>
          <var>ShowBalloonHint</var> displays a smal balloon-like window near the tray icon. It can be used to send notifications about the status of an action, or notify of a received message or any other event which doesn't require an imediate response. The Ballon window disappears after 
          
          <var>BallonHintTimeout</var> milliseconds of when the user clicks it or it's close button.</short>
      </element>
      <element name="TCustomTrayIcon.GetPosition">
        <short>Find the position of the Tray Icon and thus a position suitable to display the hinting BalloonHint. Under Windows an approximate location is detected.</short>
      </element>
      <element name="TCustomTrayIcon.BalloonFlags">
        <short>the set of kinds of ballon flag that can be displayed (may be None, Info, Warning or Error)</short>
      </element>
      <element name="TCustomTrayIcon.BalloonHint">
        <short>The text to be shown in the hinting balloon</short>
      </element>
      <element name="TCustomTrayIcon.BalloonTimeout">
        <short>The period after which the hinting balloon disappears</short>
      </element>
      <element name="TCustomTrayIcon.BalloonTitle">
        <short>The title to be shown on the hinting balloon</short>
      </element>
      <element name="TCustomTrayIcon.Canvas">
        <short>The canvas of the Tray Icon</short>
      </element>
      <element name="TCustomTrayIcon.PopUpMenu">
        <short>PopUpMenu - a small menu popup that is displayed when right mouse button is clicked over icon - separate from hint balloon</short>
      </element>
      <element name="TCustomTrayIcon.Icon">
        <short>The Icon or picture that is to be displayed</short>
      </element>
      <element name="TCustomTrayIcon.Hint">
        <short>A simple hint that is shown when the mouse hovers over the icon.</short>
      </element>
      <element name="TCustomTrayIcon.ShowIcon">
        <short>Determines if <var>Icon</var> should be painted to the System Tray. This can be set to false if one wishes to instead paint to the Canvas of the Tray Icon.</short>
      </element>
      <element name="TCustomTrayIcon.Visible">
        <short>It is set to true when the icon is shown and remains true until Hide is called. Setting <var>Visible</var> has the same effect as calling Hide or Show.</short>
      </element>
      <element name="TCustomTrayIcon.OnClick">
        <short>Event Handler for Mouse Click on Tray Icon</short>
      </element>
      <element name="TCustomTrayIcon.OnDblClick">
        <short>Event handler for mouse double-click</short>
      </element>
      <element name="TCustomTrayIcon.OnMouseDown">
        <short>Event handler if mouse button is pressed down</short>
      </element>
      <element name="TCustomTrayIcon.OnMouseUp">
        <short>Event handler if mouse button is up</short>
      </element>
      <element name="TCustomTrayIcon.OnMouseMove">
        <short>Event handler for mouse movement</short>
      </element>
      <element name="TCustomTrayIcon.OnPaint">
        <short>Use this to implement custom drawing to the icon. Draw using the canvas property of the icon. Note: Does not work on win32. </short>
      </element>
      <element name="TTrayIcon.BalloonFlags">
        <short>The set of kinds of ballon flag that can be displayed (may be None, Info, Warning or Error)</short>
      </element>
      <element name="TTrayIcon.BalloonHint">
        <short>The text to be shown in the hinting balloon</short>
      </element>
      <element name="TTrayIcon.BalloonTimeout">
        <short>The period after which the hinting balloon disappears</short>
      </element>
      <element name="TTrayIcon.BalloonTitle">
        <short>The title to be shown on the hinting balloon</short>
      </element>
      <element name="TTrayIcon.PopUpMenu">
        <short>PopUpMenu - a small menu popup that is displayed when right mouse button is clicked over icon - separate from hint balloon</short>
      </element>
      <element name="TTrayIcon.Icon">
        <short>The Icon or picture that is to be displayed</short>
      </element>
      <element name="TTrayIcon.Hint">
        <short>A simple hint that is shown when the mouse hovers over the icon.</short>
      </element>
      <element name="TTrayIcon.Visible">
        <short>It is set to true when the icon is shown and remains true until Hide is called. Setting <var>Visible</var> has the same effect as calling Hide or Show.</short>
      </element>
      <element name="TTrayIcon.OnClick">
        <short>Event Handler for Mouse Click on Tray Icon</short>
      </element>
      <element name="TTrayIcon.OnDblClick">
        <short>Event handler for mouse double-click</short>
      </element>
      <element name="TTrayIcon.OnMouseDown">
        <short>Event handler if mouse button is pressed down</short>
      </element>
      <element name="TTrayIcon.OnMouseUp">
        <short>Event handler if mouse button is up</short>
      </element>
      <element name="TTrayIcon.OnMouseMove">
        <short>Event handler for mouse movement</short>
      </element>
      <element name="TTrayIcon.OnPaint">
        <short>Use this to implement custom drawing to the icon. Draw using the canvas property of the icon. Note: Does not work on win32. </short>
      </element>
      <element name="TBevel.Assign">
        <short>Assign the contents of one class to another.</short>
        <descr>
          <p>
            <var>Assign</var> copies the contents of 
            
            <var>Source</var> to

            
            <var>Self</var>, if the classes of the destination and source classes are
compatible.
</p>
          <p>The <var>TPersistent</var> implementation of <var>Assign</var> does nothing
but calling the <link id="TPersistent.AssignTo">AssignTo</link> method of
source. This means that if the destination class does not know how to assign
the contents of the source class, the source class instance is asked to assign
itself to the destination class. This means that it is necessary to
implement only one of the two methods so that two classes can be assiged to
one another.
</p>
          <remark>
            <p>In general, a statement of the form
</p>
            <code>Destination:=Source;
</code>
            <p>(where <var>Destination</var> and <var>Source</var> are classes) does not 
achieve the same as a statement of the form
</p>
            <code>Destination.Assign(Source);
</code>
            <p>After the former statement, both <var>Source</var> and
<var>Destination</var> will point to the same object. The latter statemtent
will copy the <var>contents</var> of the <var>Source</var> class to the
<var>Destination</var> class.
</p>
          </remark>
        </descr>
      </element>
      <element name="TBoundLabel.DragCursor">
        <short>The type of cursor to be used if this control is being dragged</short>
      </element>
      <element name="TBoundLabel.DragMode">
        <short>The mode of dragging to be used</short>
      </element>
      <element name="TBoundLabel.OnDragDrop">
        <short>Event handler for Drag-drop process</short>
      </element>
      <element name="TBoundLabel.OnDragOver">
        <short>Event handler if another control is dragged over current label</short>
      </element>
      <element name="TBoundLabel.OnEndDrag">
        <short>event handler for end of drag manoeuvre</short>
      </element>
      <element name="TBoundLabel.OnStartDrag">
        <short>Event handler for beginning of drag manoeuvre</short>
      </element>
      <element name="TCustomPage.AutoSizeDelayed"/>
      <element name="TCustomPage.IsControlVisible"/>
      <element name="TCustomPage.VisibleIndex">
        <short>
          <var>VisibleIndex</var> - returns the index number of a visible page</short>
      </element>
      <element name="TCustomPage.OnHide">
        <short>
          <var>OnHide</var> - event handler for hiding this page in a notebook</short>
      </element>
      <element name="TCustomPage.OnShow">
        <short>
          <var>OnShow</var> - event handler for showing (making visible) this page of a notebook</short>
      </element>
      <topic name="Multi-PageControls">
        <short>
          <var>Multi-PageControls</var> - controls that offer a selection of alternative pages for display</short>
        <descr>
          <p>
            <var>Multi-PageControls</var> - controls that offer a selection of alternative pages for display</p>
          <p>A number of controls, found in Units <var>ExtCtrls</var> and <var>ComCtrls</var>, offer the ability to create multi-page forms with a series of <var>Tabs</var> along one edge that allow the user to select one of the <var>Pages</var> for display and interaction.</p>
          <p>These include: <var>TPageControl</var>, <var>TNoteBook</var>, <var>TTabControl</var> and <var>THeaderControl</var> (the Header Control components have a very different structure and function). Icons for all of these exist on the <var>Additional</var> or <var>Common Controls</var> tabs of the Component Palette in the Lazarus IDE.</p>
          <p>While the various components may look superficially similar, they differ in properties, inheritance, method of adding additional pages, behaviour at run-time, methods for referencing pages and so on.</p>
          <p>We have to be very clear when using the various properties, to distinguish between the word 'Tab' as referring to a Tab indicating an identifier for a page, and 'Tab' as referring to the <b>TAB</b> key on the standard keyboard. In common with most Lazarus components, it is possible to enable each control to be included in the <var>TabOrder</var> of <var>TabStops</var> for a <var>Form</var>, so that the component can be reached by repeated pressing of the <b>TAB</b> key, and we must not confuse this use of 'Tab' with the use to denote a <var>Page</var>.</p>
          <p>The properties <var>CanTab</var>, <var>TabStop</var> and <var>TabOrder</var> refer to the use of the <b>TAB</b> key to navigate to the relevant control.</p>
          <p>Properties such as <var>Tabs</var>, <var>TabIndex</var>, <var>IndexOfTabAt()</var>, <var>TabIndexAtClientPos()</var>,  <var>TabPosition</var>, <var>TabHeight</var>, <var>TabWidth</var>, <var>TabVisible</var>, <var>OnCloseTabClicked</var> refer to the use for <var>Page</var> selection.</p>
          <p>
            <var>TNoteBook</var> and 
            
  
  
  
            <var>TPageControl</var> are both descended from 
            
  
  
  
            <var>TCustomNoteBook</var> (which is in turn descended from 
            
  
  
  
            <var>TWinControl</var>) and have many inherited properties in common. 
            
  
  
  
            <var>TPageControl</var> has, in general, more advanced features and is probably intended to replace 
            
  
  
  
            <var>TNoteBook</var>.</p>
          <p>The following table summarises the main differences between the two components.</p>
          <table>
            <th>
              <td>Property or method</td>
              <td>
                <var>TNoteBook</var>
              </td>
              <td>
                <var>TPageControl</var>
              </td>
            </th>
            <tr>
              <td>Pages, ActivePage</td>
              <td>String, <var>TPage</var>
              </td>
              <td>
                <var>TTabSheet</var>, a more advanced version of 
      
      
                <var>TPage</var>
              </td>
            </tr>
            <tr>
              <td>Drag/Drop/Dock</td>
              <td>Drag properties, but minimal Dock or Drop</td>
              <td>Full Drag, Drop, Dock properties and methods</td>
            </tr>
            <tr>
              <td>Indexing</td>
              <td>
                <var>PageIndex</var>
              </td>
              <td>
                <var>ActivePageIndex</var>, 
      
      
                <var>TabIndex</var>
              </td>
            </tr>
            <tr>
              <td>Showing/Hiding Tabs</td>
              <td>
                <var>ShowTabs</var>
              </td>
              <td>
                <var>TabVisible</var> in 
      
      
                <var>TTabSheet</var>
              </td>
            </tr>
            <tr>
              <td>Hints</td>
              <td>No Hinting methods</td>
              <td>
                <var>ShowHint</var>, 
      
      
                <var>ParentShowHint</var>
              </td>
            </tr>
            <tr>
              <td>Font</td>
              <td>No Font properties</td>
              <td>
                <var>Font</var>, 
      
      
                <var>ParentFont</var>
              </td>
            </tr>
            <tr>
              <td>Sensing position of Tab</td>
              <td>None</td>
              <td>
                <var>TabPosition</var>, 
      
      
                <var>OnGetSiteInfo</var>
              </td>
            </tr>
            <tr>
              <td>Options</td>
              <td>Published property <var>Options</var>, include <var>nboShowCloseButtons</var>, <var>nboMultiLine</var>
              </td>
              <td>No published <var>Options</var> property, but inherits <var>Options</var> (public property) from <var>TCustomNoteBook</var>, so they could be set explicitly in code</td>
            </tr>
          </table>
          <p>The individual Pages in both of the above controls (descended from <var>TCustomNoteBook</var>) are separate and can have their own specific collections of widgets which appear only when the relevant Page is selected by its Tab.</p>
          <p>In contrast, the <var>TTabControl</var> component (descended from <var>TCustomTabControl</var>) has only one display area (Protected property <var>DisplayRect</var>), but the image displayed in it is determined by which tab has been selected. Each Tab has an index value which is used to select the appropriate image from an indexed <var>ImageList</var> and display it in the Display Rectangle.</p>
          <p>The properties of the Tabs in <var>TTabControl</var> are very configurable compared with those in the controls derived from <var>TCustomNoteBook</var>, allowing for instance the creation of multi-line captions, the placement of images on Tabs, the possibility of the Owner routine determining the drawing of the tab, the configuration of Tab size, the selection of multiple tabs. The trade-off is that the display area is restricted in what it can display, and is essentially confined to display of images.</p>
          <p>To use any of the above controls, select them from the relevant tab on the IDE Component Palette and drop them on the form in the required position. Fill in as many relevant properties as you can in the Object Inspector.</p>
          <p>To add Tabs or Pages to the controls, select the control with a left mouse click or by selecting from the Component menu in the Object Inspector, then right-click on the component to get a pop-up menu, whose first item will be 'Add Page' or 'Add Tab'.</p>
          <p>The Tabs in <var>TTabControl</var> can be edited by selecting 'Tabs' in the Object Inspector, clicking on the ellipsis (...) and using the string editor that pops up.</p>
          <p>The pages in<var>TNoteBook</var> or <var>TPageControl</var> can be edited by selecting the <var>ActivePage</var> in the Object Inspector and then editing the properties of the individual page.</p>
          <p>
            <var>THeaderControl</var> offers a widget that could be placed along the edge of a Panel or Form, allowing a highly customised mechanism for selection. However, there are no intrinsically associated display areas, and it is the developer's responsibility to supply an index associated with the selection from the 
            
  
  
  
            <var>THeaderControl</var> and determining what action is to occur or what is to be displayed in any attached Panel or Form.</p>
          <p>When the control is first selected from the Component Palette and placed on  a Form, it consists of an unadorned rectangle. However, selecting the control and right-clicking (or selecting the 'Sections' property in the Object Inspector) gives access to a Sections editor (a StringList editor) and Sections can be added to the control. The sections are separated by vertical lines, and each section can have a string inserted as a label, associated with an Index value. The Sections can be rearranged, re-ordered, or be individually painted.</p>
          <p>In a typical application a <var>THeaderControl</var> and a <var>TPanel</var> or <var>TForm</var> would be docked together, and code would be written to find which Section of the Header had been selected, then use its index to control the display in the other docked control.</p>
        </descr>
      </topic>
      <element name="TCustomSplitter.AnchorSplitter">
        <short>
          <var>AnchorSplitter</var> - anchor the splitter to <var>Acontrol </var>using the specified <var>Kind </var>of anchor</short>
      </element>
      <element name="TCustomSplitter.ResizeControl">
        <short>
          <var>ResizeControl</var> - the control that is to be re-sized with the splitter</short>
      </element>
      <element name="TCustomSplitter.GetOtherResizeControl">
        <short>
          <var>GetOtherResizeControl</var> - find out which other control is to be re-sized</short>
      </element>
      <element name="TCustomSplitter.MoveSplitter">
        <short>
          <var>MoveSplitter</var> - by an amount specified by <var>Offset</var>
        </short>
      </element>
      <element name="TCustomSplitter.SetSplitterPosition">
        <short>
          <var>SetSplitterPosition</var> - to specified <var>NewPosition</var>
        </short>
      </element>
      <element name="TCustomSplitter.GetSplitterPosition">
        <short>
          <var>GetSplitterPosition</var> - returns the current position of the splitter</short>
      </element>
      <element name="TCustomSplitter.ResizeAnchor">
        <short>
          <var>ResizeAnchor</var> - the kind of anchor to be used for resizing</short>
      </element>
    </module>
    <!-- ExtCtrls -->
  </package>
</fpdoc-descriptions>
