<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    ExtCtrls
  ====================================================================
-->
    <module name="ExtCtrls">
      <short>Some extra controls commonly used in Lazarus forms</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLProc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LResources">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Controls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Forms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="StdCtrls">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="lMessages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GraphType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Graphics">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLIntf">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="CustomTimer">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TAbstractReader">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TPageFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TPageFlag.pfAdded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TPageFlag.pfRemoving"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TPageFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomPage">
        <short><i>TCustomPage</i>




: The base type for <i>Page</i></short>
        <descr><i>TCustomPage</i>




: The base type for the tabbed pages found in notebooks</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPage.FImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomPage.GetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetTabVisible.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetImageIndex.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPage.SetTabVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetTabVisible.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.WMPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.WMPaint.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetParent.AParent"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.Flags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.CMHitTest">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.CMHitTest.Message"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.DestroyHandle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPage.GetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.GetPageIndex.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPage.SetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.SetPageIndex.AValue"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomPage.TabVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.PageIndex">
        <short><i>PageIndex </i>




- integer index value for this page in the notebook</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomPage.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.Create.TheOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomPage.AdjustClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPage.AdjustClientRect.ARect"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomPage.CanTab"/>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.CanTab.Result"/>
      <!-- function Visibility: public -->
      <element name="TCustomPage.IsVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPage.IsVisible.Result"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.ImageIndex">
        <short><i>ImageIndex</i>




 - integer index value for the image associated with this page</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPage.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TCustomPageClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TNBPages">
        <short>NoteBook Pages - an array of strings containing the names of the pages</short>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TNBPages.FNotebook">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.Get">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.Get.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Get.Index"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TNBPages.GetObject">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNBPages.GetObject.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.GetObject.Index"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TNBPages.Put">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Put.S"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TNBPages.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.thePageList"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Create.theNotebook"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Clear">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Delete">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Delete.Index"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Insert">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Insert.S"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TNBPages.Move">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.CurIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNBPages.Move.NewIndex"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TTabChangingEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TTabChangingEvent.AllowChange"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabPosition.tpRight"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TTabStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsTabs"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsButtons"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TTabStyle.tsFlatButtons"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TTabGetImageEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.TabIndex"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TTabGetImageEvent.ImageIndex"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TNoteBookOption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TNoteBookOption.nboShowCloseButtons"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TNoteBookOption.nboMultiLine"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TNoteBookOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomNotebook">
        <short><i>TCustomNotebook</i>       : The base type for <i>TNotebook</i></short>
        <descr>
          <p><i>TCustom Notebook</i>




: The base type for <i>TNotebook</i></p>
          <p>A notebook consists of several <i>Pages</i>, usually of similar type and kept indexed. They may contain <i>Images</i> listed in a table. One page is displayed at a time, but the other pages are indicated by tabs which may have their names on them, and a different page can be selected for display by clicking its tab </p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FAccess">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FAddingPages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FImages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FLoadedPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnCloseTabClicked"/>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.fOnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FOptions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageIndexOnLastChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FPageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomNotebook.FTabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.CNNotify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.CNNotify.Message"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.DoSendTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetActivePage.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetActivePageComponent.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPage.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.GetPage.aIndex"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPageCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPageCount.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.GetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetPageIndex.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.InsertPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.InsertPage.APage"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.InsertPage.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomNotebook.IsStoredActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.IsStoredActivePage.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.MoveTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.MoveTab.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.MoveTab.NewIndex"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.WSMovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.WSMovePage.APage"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.WSMovePage.NewIndex"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.RemovePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.RemovePage.Index"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetActivePage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetActivePage.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetActivePageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetActivePageComponent.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetImages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetImages.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetOptions">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetOptions.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetPageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetPageIndex.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetPages">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetPages.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetShowTabs">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetShowTabs.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.SetTabPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.SetTabPosition.tabPos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.ShowCurrentPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.UpdateAllDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomNotebook.UpdateDesignerFlags">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.UpdateDesignerFlags.APageIndex"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomNotebook.PageClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.DoCreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.Change">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ReadState.Reader"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.ShowControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ShowControl.APage"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomNotebook.UpdateTabProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomNotebook.ChildClassAllowed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.ChildClassAllowed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.ChildClassAllowed.ChildClass"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomNotebook.ActivePageComponent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomNotebook.ActivePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomNotebook.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomNotebook.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.TabIndexAtClientPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.TabIndexAtClientPos.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.TabIndexAtClientPos.ClientPos"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CanTab"/>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CanTab.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetImageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetImageIndex.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.GetImageIndex.ThePageIndex"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.IndexOf">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.IndexOf.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.IndexOf.APage"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CustomPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CustomPage.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.CustomPage.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.CanChangePageIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.CanChangePageIndex.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetMinimumTabWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetMinimumTabWidth.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TCustomNotebook.GetMinimumTabHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomNotebook.GetMinimumTabHeight.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomNotebook.DoCloseTabClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.DoCloseTabClicked.APage"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnChanging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnCloseTabClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.OnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Page">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomNotebook.Page.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.PageList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.Pages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.ShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomNotebook.TabPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCustomNotebook.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPage">
        <short><i>TPage</i>




 : One of the pages in a tabbed Notebook</short>
        <descr>
          <p><i>TPage</i>




: One of the pages in a tabbed Notebook</p>
          <p>Inherits most of its properties from <link id="#lcl.ExtCtrls.TCustomPage">TCustomPage</link></p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TNotebook">
        <short><i>TNotebook</i>       : A series of tabbed <i>pages</i>   placed together to make a notebook</short>
        <descr>
          <p><i>TNotebook</i>




: A series of tabbed <i>pages</i> placed together to make a notebook</p>
          <p>A notebook consists of several <i>Pages</i>, usually of similar type and kept indexed. They may contain <i>Images</i> listed in a table. One page is displayed at a time, but the other pages are indicated by tabs which may have their names on them, and a different page can be selected by clicking its tab </p>
          <p>Inherits most of its properties from <link id="#lcl.ExtCtrls.TCustomNotebook">TCustomNoteBook</link></p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
          <link id="#lcl.ExtCtrls.TPage">TPage</link>
        </seealso>
      </element>
      <!-- function Visibility: private -->
      <element name="TNotebook.GetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNotebook.GetActiveNotebookPageComponent.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TNotebook.GetNoteBookPage">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TNotebook.GetNoteBookPage.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.GetNoteBookPage.Index"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TNotebook.SetActiveNotebookPageComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.SetActiveNotebookPageComponent.AValue"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TNotebook.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TNotebook.Page">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TNotebook.Page.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TNotebook.ActivePageComponent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TNotebook.Pages">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.ActivePage">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Images">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnCloseTabClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnContextPopup">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnGetImageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnPageChanged">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.Options">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.PageIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TNotebook.ShowTabs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TTimer">
        <short><i>TTimer</i>: An elapsed timer useful in many applications</short>
        <descr>
          <p><i>TTimer</i>: An elapsed timer useful in many applications</p>
          <p>Inherits most of its properties from <link id="#lcl.CustomTimer.TCustomTimer">TCustomTimer</link></p>
        </descr>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TIdleTimerAutoEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnIdle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnIdleEnd"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TIdleTimerAutoEvent.itaOnUserInput"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TIdleTimerAutoEvents">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TIdleTimer">
        <short><i>TIdleTimer</i> : A timer to measure idle time between processes</short>
        <descr>
          <p><i>TIdleTimer</i>: A timer to measure idle time between processes</p>
          <p>Inherits most of its properties from <link id="#lcl.CustomTimer.TCustomTimer">TCustomTimer</link></p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoEndEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FAutoStartEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TIdleTimer.FHandlersConnected">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.UpdateHandlers">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.SetAutoEndEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoEndEvent.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TIdleTimer.SetAutoStartEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoStartEvent.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.SetAutoEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.SetAutoEnabled.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnIdle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnIdle.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnIdleEnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnIdleEnd.Sender"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.DoOnUserInput">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnUserInput.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.DoOnUserInput.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TIdleTimer.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TIdleTimer.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TIdleTimer.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TIdleTimer.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoEndEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TIdleTimer.AutoStartEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TShapeType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRectangle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stSquare"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRoundRect"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stRoundSquare"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stEllipse"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stCircle"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stSquaredDiamond"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TShapeType.stDiamond"><short/></element>
      <!-- object Visibility: default -->
      <element name="TShape">
        <short>Shape</short>
        <descr>Shape: An arbitrary graphic geometrical shape placed on the Form. It may be one of a series of standard shapes defined by TShapeType</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FPen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FBrush">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TShape.FShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetBrush">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetBrush.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetPen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetPen.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TShape.SetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.SetShape.Value"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TShape.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TShape.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TShape.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TShape.StyleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TShape.StyleChanged.Sender"><short/></element>
      <!-- property Visibility: published -->
      <element name="TShape.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Brush">
        <short>The Brush to be used for colouring this shape</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Pen">
        <short>The Pen to be ussed for drawing this shape</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Shape">
        <short>Which Shape? (Rectangle, Square, RoundRect, RoundSquare, Ellipse, Circle,  SquaredDiamond, Diamond)</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TShape.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsLine"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsNone"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsPattern"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TResizeStyle.rsUpdate"><short/></element>
      <!-- procedure type Visibility: default -->
      <element name="TCanResizeEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.NewSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCanResizeEvent.Accept"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomSplitter">
        <short><i>TCustomSplitter</i> : the base type for <i>TSplitter</i></short>
        <descr>
          <p><i>TCustomSplitter</i>: the base type for <i>TSplitter</i></p>
          <p>A Splitter is a vertical or horizontal bar that can be placed on a panel or form, to separate sub-panels functionally and allow re-sizing of the constituent sub-panels</p>
          <p>This class defines many of the basic properties for the children classes, such as positioning, sizing and alignment</p>
          <pre>{ TCustomSplitter is a control for interactively resizing another control.
    It is a vertical or horizontal bar anchored to a side of a control.
    You can either set the Align property to alLeft (alRight,alTop,alBottom),
    then it will become a vertical bar, aligned to the left and when the user
    moves it with the mouse, the control to the left with the same Align=alLeft
    will be resized.
    The second more flexible possibility is to set the properties Align=alNone,
    AnchorSides and ResizeAnchor.
    }   </pre>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FAutoSnap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FBeveled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FMinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FOnCanResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FOnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.FSplitDragging">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.fSplitterStartMouseXY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomSplitter.fSplitterStartLeftTop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetAutoSnap">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAutoSnap.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetBeveled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetBeveled.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetMinSize.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSplitter.SetResizeStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetResizeStyle.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.StartSplitterMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.StartSplitterMove.Restart"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.StartSplitterMove.MouseXY"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseDown.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseMove.Y"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.MouseUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Button"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Shift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.X"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.MouseUp.Y"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomSplitter.FindAlignControl">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomSplitter.FindAlignControl.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.SetAlign">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAlign.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.SetAnchors">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.SetAnchors.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.CheckAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomSplitter.CheckNewSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomSplitter.CheckNewSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.CheckNewSize.NewSize"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSplitter.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomSplitter.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSplitter.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.ResizeStyle">
        <short>Style for resizing - as a line, a pattern, full update, or none</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.AutoSnap">
        <short>AutoSnap - automatically snaps to a grid point or grid line in the Form designer</short>
        <descr>Boolean property, true if snapping to grid positions</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Beveled">
        <short>Whether the edges of the splitter bar are bevelled</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.MinSize">
        <short>Minimum size for splitter - default 30 pixels</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.OnCanResize">
        <short>Event handler for receiving permission to resize</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.OnMoved">
        <short>Event handler for occasion when splitter has moved</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomSplitter.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TSplitter">
        <short><i>TSplitter</i> : A vertical or horizontal bar placed on a panel or form, to separate sub-panels functionally</short>
        <descr>
          <p><i>TSplitter</i>: A vertical or horizontal bar that can be placed on a panel or form, to separate sub-panels functionally and allow re-sizing of the constituent sub-panels</p>
          <p>The splitter extends for the full height (if vertical) or full width (if horizontal) of the parent control (form or panel) and is anchored to the edges; its position along the length or height of the parent is determined by the programmer or user by moving the whole control with the mouse, and its size can be adjusted using the sizing bars and with the <i>ResizeAnchor</i> property </p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.AutoSnap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Beveled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.MinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ResizeStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnCanResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSplitter.OnMoved">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPaintBox">
        <short><i>TPaintBox</i>: a painted rectangular box with defined size and color</short>
        <descr>
          <p><i>TPaintBox</i>: a painted rectangular box with defined size and colour</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPaintBox.FOnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TPaintBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TPaintBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPaintBox.Create.AOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TPaintBox.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Hint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPaintBox.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomImage">
        <short><i>TCustomImage</i> - the base type for <i>TImage</i></short>
        <descr><i>TCustomImage</i>







: The base type for <i>TImage</i>
. This is a control of the class <i>TGraphicControl</i>
, designed to be lightweight and fast</descr>
        <seealso>
          <link id="#lcl.Controls.TGraphicControl">TGraphicControl</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FPicture">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FCenter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FProportional">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FTransparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomImage.FStretch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetPicture">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetPicture.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetCenter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetCenter.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetProportional">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetProportional.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetStretch">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetStretch.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.SetTransparent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.SetTransparent.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomImage.PictureChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.PictureChanged.SEnder"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomImage.DestRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomImage.DestRect.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomImage.DoAutoSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomImage.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomImage.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomImage.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomImage.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Center">
        <short>Should image be centered?</short>
        <descr>Boolean property - True if image is to be centered</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Picture">
        <short><i>Picture </i>






- the actual image for display</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Stretch">
        <short>True if picture is to be stretched</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Transparent">
        <short>True if you can see through the image</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomImage.Proportional">
        <short>True if image is proportional</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TImage">
        <short><i>TImage</i> - a graphic image placed on the form; usually loaded from a picture file.</short>
        <descr>
          <p><i>TImage</i>







: a graphic image placed on the form; usually loaded from a picture file.</p>
          <p>The actual image is found in <i>Picture</i> or <i>Canvas</i></p>
          <p>Inherits most of its properties from its ancestors, <link id="TCustomImage">TCustomImage</link>, <link id="#lcl.Controls.TGraphicControl">TGraphicControl</link> and <link id="#lcl.Controls.TControl">TControl</link></p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Center">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseLeave">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Picture"/>
      <!-- property Visibility: published -->
      <element name="TImage.Proportional">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Stretch">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Transparent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TImage.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TBevelStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelStyle.bsLowered"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelStyle.bsRaised"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TBevelShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsBox"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsFrame"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsTopLine"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsBottomLine"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsLeftLine"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TBevelShape.bsRightLine"><short/></element>
      <!-- object Visibility: default -->
      <element name="TBevel">
        <short>A bevel placed around the edge of buttons and other components</short>
        <descr>
          <p><i>TBevel</i>






 - a bevel placed around the edge of buttons and other components.</p>
          <p>Its appearance is governed by <link id="TBevelShape">TBevelShape</link>, <link id="TBevelStyle">TBevelStyle</link> and <link id="TBevelwidth">TBevelwidth</link></p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBevel.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TBevel.FShape">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TBevel.GetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBevel.GetStyle.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBevel.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.SetStyle.aStyle"><short/></element>
      <!-- function Visibility: private -->
      <element name="TBevel.GetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBevel.GetShape.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TBevel.SetShape">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.SetShape.aShape"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBevel.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBevel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBevel.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TBevel.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TBevel.Invalidate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Name">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Shape">
        <short><i>Shape</i>  - whether a box, a frame or a line along one of the edges</short>
        <seealso><link id="#lcl.ExtCtrls.TBevelShape"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Style">
        <short><i>Style</i> - whether raised or lowered</short>
        <seealso><link id="#lcl.ExtCtrls.TBevelStyle"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBevel.OnPaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnLayout.clHorizontalThenVertical"/>
      <!-- enumeration value Visibility: default -->
      <element name="TColumnLayout.clVerticalThenHorizontal"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomRadioGroup">
        <short><i>TCustomRadioGroup:</i>   the base type for <i>TRadioGroup</i></short>
        <descr>
          <p><i>TCustomRadioGroup:</i> the base type for <i>TRadioGroup</i></p>
          <p>A group of related but mutually exclusive radio buttons,
requiring the user to select one af a set of alternatives</p>
          <p>This class defines <i>Items</i>, where the captions for individual radio boxes are stored, <i>Rows</i> and <i>Columns</i> for arranging the radio boxes, and ColumnLayout to determine whether the data are arranged down the columns first, or across the rows first.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FButtonList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FHiddenButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FCreatingWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FReading">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomRadioGroup.FOnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.ItemsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.ItemsChanged.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.Clicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.Clicked.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.DoPositionButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioGroup.SetColumnLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetColumnLayout.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.UpdateRadioButtonStates">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.ReadState">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.ReadState.Reader"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetItem.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetColumns.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.SetItemIndex.Value"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomRadioGroup.GetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.GetItemIndex.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioGroup.Resize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.Items">
        <short><i>Items</i> - a string list containing the captions for the radio boxes</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.Columns">
        <short><i>Columns</i>  - the number of columns in which the <i>Items</i>  (radio buttons) are to be arranges</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.ColumnLayout">
        <short><i>ColumnLayout</i>  - <i>HorizontalThenVertical </i> or vice versa</short>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomRadioGroup.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioGroup.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomRadioGroup.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomRadioGroup.CanModify">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.CanModify.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomRadioGroup.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomRadioGroup.Rows">
        <short><i>Rows </i>- the number of rows in which Items (radio boxes) are held</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomRadioGroup.Rows.Result">
        <short>Number of rows</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TRadioGroup">
        <short><i>TRadioGroup</i>  : A group of related but mutually exclusive radio buttons, requiring the user to select one af a set of alternatives</short>
        <descr>
          <p><i>TRadioGroup</i>: A group of related but mutually exclusive radio buttons, requiring the user to select one af a set of alternatives. As one button becomes selected, the remaining buttons in the group become automatically deselected.</p>
          <p>To Use this control, place it in the required position on the form, then in the Object Inspector select <i>Items</i> and click on the ellipsis (...) to open the string editor. Type in the captions to accompany each check box, then close the string editor and you will see a series of Radio Boxes with their captions displayed beside them. (Note - unlike <link id="#lcl.ExtCtrls.TCheckGroup">TCheckGroup</link>, there is no special RadioGroup editor)</p>
          <p>Inherits properties from <link id="#lcl.ExtCtrls.TCustomRadioGroup">TCustomRadioGroup</link> and <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link></p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Caption">
        <short><i>Caption </i>- the text string appearing above the whole RadioGroup box</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Items">
        <short><i>Items</i> - a string list containing the captions of the radio boxes</short>
        <descr>
          <p><i>Items</i> - a string list containing the captions of the radio boxes</p>
          <p>Use the String List editor, opened by selecting <i>Items</i> and the ellipsis (...) in the Object Inspector, to insert the captions for the radio boxes, and determine their order and layout using the <i>Rows</i>, <i>Columns</i> and <i>ColumnLayout</i> properties
          </p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioGroup.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TCheckGroupClicked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCheckGroupClicked.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCheckGroupClicked.Index"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomCheckGroup">
        <short><i>TCustomCheckGroup</i>: The base type for <i>TCheckGroup</i></short>
        <descr>
          <p><i>TCustomCheckGroup</i>: The base type for <i>TCheckGroup</i></p>
          <p>This class defines <i>Items</i>, where the captions for individual check boxes are stored, <i>Rows</i> and <i>Columns</i> for arranging the check boxes, and ColumnLayout to determine whether the data are arranged down the columns first, or across the rows first.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FButtonList">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FCreatingWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FColumns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomCheckGroup.FOnItemClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckGroup.GetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.GetChecked.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.GetChecked.Index"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomCheckGroup.GetCheckEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.GetCheckEnabled.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.GetCheckEnabled.Index"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.Clicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Clicked.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.DoClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.DoClick.Index"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.DoPositionButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.ItemsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.ItemsChanged.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetChecked.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetChecked.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetCheckEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetCheckEnabled.Index"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetCheckEnabled.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.SetColumnLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetColumnLayout.AValue"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckGroup.UpdateItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.SetItems">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetItems.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.SetColumns">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.SetColumns.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.DefineProperties">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.DefineProperties.Filer"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.ReadData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.ReadData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.WriteData">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.WriteData.Stream"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckGroup.DoOnResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomCheckGroup.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Create.TheOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomCheckGroup.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TCustomCheckGroup.Rows">
        <short><i>Rows</i> - the number of rows in which the Items (check boxes) are arranged</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomCheckGroup.Rows.Result">
        <short>The number of rows holding items</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Items">
        <short><i>Items</i> - a string list for the captions of the check boxes</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.Checked.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.CheckEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckGroup.CheckEnabled.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.Columns">
        <short><i>Columns</i>  - the number of columns in which the <i>Items</i>  (check boxes) are to be arranges</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.ColumnLayout">
        <short><i>ColumnLayout</i> - <i>HorizontalThenVertical </i>or vice versa</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomCheckGroup.OnItemClick">
        <short><i>OnItemClick</i> - event handler for mouse click on one of the Items in the Check Group</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TCheckGroup">
        <short><i>TCheckGroup</i>  : A group of Check Boxes physically and logically grouped together on a form</short>
        <descr>
          <p><i>TCheckGroup</i>: A group of Check Boxes physically and logically grouped together on a form</p>
          <p>To Use this control, place it in the required position on the form, then
either right-click on the control to see the pop-up CheckGroup editor, or in the Object Inspector select <i>Items</i> and click on the ellipsis (...) to open the string editor. In either case, type in the captions to accompany each check box, then close the string or CheckGroup editor and you will see a series of boxes with their captions displayed beside them.</p>
          <p>Inherits properties from <link id="#lcl.ExtCtrls.TCustomCheckGroup">TCustomCheckGroup</link> and <link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link></p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
          <link id="#lcl.ExtCtrls.TRadioGroup">TRadioGroup</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Caption">
        <short><i>Caption</i>: the string which appears at the top of the Check Group Box</short>
        <descr>
          <p><i>Caption</i>: the string which appears as a caption at the top of the Check Group Box to describe the function of the Check Group as a whole</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ColumnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Columns">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Ctl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Items">
        <short><i>Items</i>  - a string list containing the captions of the check boxes</short>
        <descr>
          <p><i>Items</i> - a string list containing the captions of the check boxes</p>
          <p>Use the String List editor or the CheckGroup editor (opened by right-clicking on the control in the Form) to insert the captions for the check boxes, and determine their order and layout</p>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnChangeBounds">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnItemClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentCtl3D">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckGroup.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TBoundLabel">
        <short><i>TBoundLabel</i>: A label bound to another object, for example in <i>TLabeledEdit</i></short>
        <descr><i>TBoundLabel</i>: A label bound to another object, for example in <i>TLabeledEdit</i></descr>
        <seealso>
          <link id="#lcl.ExtCtrls.TLabeledEdit">TLabeledEdit</link>
        </seealso>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TBoundLabel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBoundLabel.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TBoundLabel.FocusControl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Caption">
        <short>Caption</short>
        <descr>Caption : the caption which will appear on the Bound Label, to identify its function</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ShowAccelChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Layout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.WordWrap">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoundLabel.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TLabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpAbove"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpBelow"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TLabelPosition.lpRight"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomLabeledEdit">
        <short>Custom Labelled Edit</short>
        <descr>
          <p><i>TCustomLabeledEdit</i>






: The base type for <i>LabeledEdit</i>.</p>
          <p>Note particularly the <link id="TCustomLabeledEdit.EditLabel">EditLabel</link> property (see <link id="#lcl.Extctrls.TBoundLabel">TBoundLabel</link>), which contains the label attached to the Edit control.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomEdit">TCustomEdit</link>
          <link id="#lcl.StdCtrls.TCustomLabel">TCustomLabel</link>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FEditLabel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FLabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabeledEdit.FLabelSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabeledEdit.SetLabelPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetLabelPosition.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabeledEdit.SetLabelSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetLabelSpacing.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetParent.AParent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.SetName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.SetName.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.DoSetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.ATop"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.AWidth"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.DoSetBounds.AHeight"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.DoPositionLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.Notification">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Notification.AComponent"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Notification.Operation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CMVisibleChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.CMVisibleChanged.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CMEnabledChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.CMEnabledChanged.Msg"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabeledEdit.CreateInternalLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLabeledEdit.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabeledEdit.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.EditLabel">
        <short><i>EditLabel </i>- the label attached to the edit box</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.LabelPosition">
        <short><i>LabelPosition </i>






- whether above, below, to the left or to the right of the Edit box</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomLabeledEdit.LabelSpacing">
        <short><i>LabelSpacing</i>






 - the distance between the Label and the Edit box</short>
      </element>
      <!-- object Visibility: default -->
      <element name="TLabeledEdit">
        <short>Labelled Edit: An Edit Box with a permanently attached Label</short>
        <descr>
          <p><i>TLabeledEdit</i>






: An Edit Box with a permanently attached Label</p>
          <p>Saves time and effort over placing separate Label and Edit Box on Form. The properties are described in the parent component, <link id="#lcl.ExtCtrls.TCustomLabeledEdit">TCustomLabeledEdit</link> from which most of the properties are inherited</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.TCustomEdit">TCustomEdit</link>
          <link id="#lcl.ExtCtrls.TBoundLabel">TBoundLabel</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.CharCase">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.LabelPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.LabelSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.MaxLength">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.PasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ReadOnly">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Text">
        <short><i>Text</i>






: the text-string being entered or edited in the Labelled Edit box</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnEnter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnExit">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyPress">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnKeyUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabeledEdit.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- alias type Visibility: default -->
      <element name="TPanelBevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- range type Visibility: default -->
      <element name="TBevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomPanel">
        <short><i>TCustomPanel</i>: The base type for <i>TPanel</i></short>
        <descr>
          <p><i>TCustomPanel</i>: The base type for <i>TPanel</i></p>
          <p>A Panel is a defined rectangular area of the form into which other components can be placed to group them functionally and geographically.</p>
          <p><i>TCustomPanel </i>defines the positioning and bevelling properties of any descendant classes, and provides methods for painting and writing text to the panel.</p>
        </descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelInner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelOuter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomPanel.FFullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetAlignment.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelInner">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelInner.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelOuter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelOuter.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBevelWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBevelWidth.Value"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomPanel.SetBorderWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.SetBorderWidth.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.AdjustClientRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.AdjustClientRect.Rect"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.RealSetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.RealSetText.Value"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomPanel.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomPanel.ParentColorIsStored">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPanel.ParentColorIsStored.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomPanel.CanTab">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomPanel.CanTab.Result"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomPanel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomPanel.Create.TheOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Alignment">
        <short><i>Alignment</i> - whether text is left or right justified, or centered</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelInner">
        <short><i>BevelInner</i> - determines the nature of the Inner Bevel of the panel (whether raised, lowered etc)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelOuter">
        <short><i>BevelOuter</i>  - determines the nature of the Outer Bevel of the panel (whether raised, lowered etc)</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BevelWidth">
        <short><i>BevelWidth </i>- the Width of the panel's bevel in pixels</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.BorderWidth"/>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.FullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomPanel.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPanel">
        <short><i>TPanel</i>: A defined rectangular area of the form into which other components can be placed</short>
        <descr>
          <p><i>TPanel</i>: A defined rectangular area of the form into which other components can be placed to group them functionally and geographically</p>
          <p>Most of the properties are defined in ancestor classes including <link id="#lcl.ExtCtrls.TCustomPanel">TCustomPanel</link>, <link id="#lcl.Controls.TCustomControl">TCustomControl</link> and <link id="#lcl.Controls.TWinControl">TWinControl</link></p>
          <p>Any controls such as buttons or check boxes that are placed inside the panel become its children, and inherit many of its properties. If the Panel is moved, the child controls move with it. Any part of a child control that falls outside the panel becomes invisible.</p>
        </descr>
        <seealso>
          <link id="#lcl.StdCtrls.HowToUseStdCtrls">HowToUseStdCtrls</link>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Align">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Anchors">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.AutoSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelInner">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelOuter">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BevelWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.BorderStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Caption">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ChildSizing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ClientHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ClientWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Color">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Constraints">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.DragMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Font">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.FullRepaint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentFont">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ParentShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.PopupMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.ShowHint">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.TabOrder">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.TabStop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDblClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDragDrop">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnDragOver">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnEndDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnEnter">
        <short><i>OnEnter</i>  - event handler for mouse entering the control or the control getting focus</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnExit">
        <short><i>OnExit </i>- event handler for mouse leaving the control or the control losing focus</short>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseMove">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnMouseUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnResize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TPanel.OnStartDrag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_First">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_SELCHANGE">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="TCN_SELCHANGING">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="Register">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
    </module>
    <!-- ExtCtrls -->
  </package>
</fpdoc-descriptions>
