<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="lcl">
    <!--
  ====================================================================
    FileUtil
  ====================================================================
-->
    <module name="FileUtil">
      <short>Miscellaneous procedures and functions for manipulating files and filenames</short>
      <descr/>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="LCLStrConsts">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Masks">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="UTF8FileHeader">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="CompareFilenames">
        <short>
          <var>CompareFileNames</var> - compares two file names to see whether they are equal</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="CompareFilenames.Result">
        <short>Returns zero if files are equal, or the index of differences, or the difference in length if filenames are not equal</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFilenames.Filename1">
        <short>First filename</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFilenames.Filename2">
        <short>Second filename</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFilenames.ResolveLinks">
        <short>
          <var>ResolveLinks</var> - if True, searches through links to find the actual file for comparison</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFilenames.Len1">
        <short>Length of first filename</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFilenames.Len2">
        <short>Length of second filename</short>
      </element>
      <!-- function Visibility: default -->
      <element name="FilenameIsAbsolute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FilenameIsAbsolute.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FilenameIsAbsolute.TheFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FilenameIsWinAbsolute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FilenameIsWinAbsolute.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FilenameIsWinAbsolute.TheFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FilenameIsUnixAbsolute">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FilenameIsUnixAbsolute.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FilenameIsUnixAbsolute.TheFilename">
        <short/>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CheckIfFileIsExecutable">
        <short>
          <var>CheckIfFileIsExecutable</var> - creates Exception if file is not Executable</short>
        <descr>
          <p>
            <var>CheckIfFileIsExecutable</var> - creates Exception if file is not Executable</p>
          <p>Otherwise, there is no action</p>
        </descr>
        <errors>An exception is raised if the file is not executable</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="CheckIfFileIsExecutable.AFilename">
        <short>
          <var>AFileName</var> - name of the file for checking</short>
      </element>
      <!-- procedure Visibility: default -->
      <element name="CheckIfFileIsSymlink">
        <short>
          <var>CheckIfFileIsSymlink</var> - raises an exception if file is not a Symbolic Link</short>
        <descr>
          <p>
            <var>CheckIfFileIsSymlink</var> - raises an exception if file is not a Symbolic Link</p>
          <p>Otherwise no action</p>
        </descr>
        <errors>An exception is raised with appropriate message if file does not exist or is not a correct symbolic link (eg dangling link, circular link, read access denied, or not a symbolic link)</errors>
      </element>
      <!-- argument Visibility: default -->
      <element name="CheckIfFileIsSymlink.AFilename">
        <short>
          <var>AFileName</var> - name of file for checking</short>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsReadable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsReadable.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsReadable.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsWritable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsWritable.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsWritable.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsText.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsText.AFilename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsText.FileReadable">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsExecutable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsExecutable.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsExecutable.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsSymlink">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsSymlink.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsSymlink.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileSize.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileSize.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetFileDescription">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetFileDescription.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetFileDescription.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ReadAllLinks">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ReadAllLinks.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ReadAllLinks.Filename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ReadAllLinks.ExceptionOnError">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DirPathExists">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DirPathExists.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DirPathExists.FileName">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ForceDirectory">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ForceDirectory.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ForceDirectory.DirectoryName">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DeleteDirectory">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DeleteDirectory.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DeleteDirectory.DirectoryName">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DeleteDirectory.OnlyChilds">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ProgramDirectory">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ProgramDirectory.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="DirectoryIsWritable">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="DirectoryIsWritable.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="DirectoryIsWritable.DirectoryName">
        <short/>
      </element>
      <!-- constant Visibility: default -->
      <element name="PascalFileExt">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtractFileNameOnly">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtractFileNameOnly.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtractFileNameOnly.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="ExtractFileNameWithoutExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ExtractFileNameWithoutExt.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ExtractFileNameWithoutExt.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CompareFileExt">
        <short>
          <var>CompareFileExt</var> - see whether the nominated file has an extension that is the same as the supplied extension</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="CompareFileExt.Result">
        <short>Returns zero if extension is present in file name, otherwise returns non-zero value</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFileExt.Filename">
        <short>The <var>FileName</var> whose extension is to be checked</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFileExt.Ext">
        <short>
          <var>Ext</var> - string defining the Extension to be checked</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CompareFileExt.CaseSensitive">
        <short>
          <var>CaseSensitive</var> - if True, case of 
          
          <var>Ext</var> must match case in 
          
          <var>FileName</var>
        </short>
      </element>
      <!-- function Visibility: default -->
      <element name="FilenameIsPascalUnit">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FilenameIsPascalUnit.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FilenameIsPascalUnit.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="AppendPathDelim">
        <short>Appends the path delimeter to the path.</short>
        <descr>AppendPathDelim checks if the last character in the path is the path delimeter. If it isn't the path delimeter, it is added, otherwise the unmodified path is returned.
</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="AppendPathDelim.Result">
        <short>Returns a new path name including delimiter, if it was not already there, otherwise returns original pathname</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="AppendPathDelim.Path">
        <short>Path - name for checking</short>
      </element>
      <!-- function Visibility: default -->
      <element name="ChompPathDelim">
        <short>Removes trailing path delimeter</short>
        <descr>ChompPathDelim checks if the last character in the path is the path delimeter. If it is the path delimeter, it is removed, otherwise the unmodified path is returned.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ChompPathDelim.Result">
        <short>Returns new path name with delimiter removed if it was there, otherwise returns original path name</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ChompPathDelim.Path">
        <short>Path name for checking</short>
      </element>
      <!-- function Visibility: default -->
      <element name="TrimFilename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TrimFilename.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TrimFilename.AFilename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CleanAndExpandFilename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CleanAndExpandFilename.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CleanAndExpandFilename.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CleanAndExpandDirectory">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="CleanAndExpandDirectory.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="CleanAndExpandDirectory.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateAbsoluteSearchPath">
        <short>
          <var>CreateAbsoluteSearchPath</var> - concatenates  
          <var>BaseDirectory </var>and  
          <var>SearchPath</var> to form an absolute path to search for files</short>
        <descr>
          <p>
            <var>CreateAbsoluteSearchPath</var> - concatenates 
  
            <var>BaseDirectory </var>and 
  
            <var>SearchPath</var> to form an absolute path to search for files</p>
          <p>Adds appropriate path delimiters to the BaseDirectory string, then adds the search path, checking that each directory in the path is in fact an absolutely specified directory, then returns the fully formed absolute search path.</p>
        </descr>
        <errors>If 
<var>BaseDirectory</var> is empty, functions exits and returns with 
<var>Result</var> equal to 
<var>SearchPath</var>; if 
<var>SearchPath</var> is empty, function exits with empty 
<var>Result</var>
        </errors>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateAbsoluteSearchPath.Result">
        <short>The absolute path formed by concatenating <var>BaseDirectory</var> and <var>SearchPath</var>
        </short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateAbsoluteSearchPath.SearchPath">
        <short>The search path (a relative path)</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateAbsoluteSearchPath.BaseDirectory">
        <short>The base directory from which to form the absolute path</short>
      </element>
      <!-- function Visibility: default -->
      <element name="CreateRelativePath">
        <short>
          <var>CreateRelativePath</var> - given an absolute path and a 
          <var>BaseDirectory,</var> create a search path relative to the current directory</short>
        <descr>
          <p>
            <var>CreateRelativePath</var> - given an absolute path and a 
            <var>BaseDirectory,</var> create a search path relative to the current directory</p>
          <p>The returned string includes the correct number of dots and double dots to signify relativity to the current directory (eg ../../or ..\..\ etc)</p>
        </descr>
        <errors>If <var>BaseDirectory</var> is empty, functions exits and returns with <var>Result</var> equal to <var>Filename</var>; if <var>Filename</var> is empty, function exits with empty <var>Result</var>
        </errors>
      </element>
      <!-- function result Visibility: default -->
      <element name="CreateRelativePath.Result">
        <short>The file name expressed as path relative to the current directory</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateRelativePath.Filename">
        <short>The absolute <var>FileName</var> for which a relative path is to be created</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CreateRelativePath.BaseDirectory">
        <short>
          <var>BaseDirectory </var>of the absolute search path</short>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsInPath">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsInPath.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsInPath.Filename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsInPath.Path">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FileIsInDirectory">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FileIsInDirectory.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsInDirectory.Filename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FileIsInDirectory.Directory">
        <short/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TSearchFileInPathFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSearchFileInPathFlag.sffDontSearchInBasePath">
        <short/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TSearchFileInPathFlag.sffSearchLoUpCase">
        <short/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TSearchFileInPathFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="AllDirectoryEntriesMask">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetAllFilesMask">
        <short>File mask representing all files suitable for showing in a file filter.</short>
        <descr>GetAllFilesMask returns a File Mask suitable for showing in a filter of a Open File Dialog.


 windows '*.*' is returned, on other operating systems just '*'.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetAllFilesMask.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="GetExeExt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetExeExt.Result">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SearchFileInPath">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SearchFileInPath.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchFileInPath.Filename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchFileInPath.BasePath">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchFileInPath.SearchPath">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchFileInPath.Delimiter">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchFileInPath.Flags">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="SearchAllFilesInPath">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="SearchAllFilesInPath.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchAllFilesInPath.Filename">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchAllFilesInPath.BasePath">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchAllFilesInPath.SearchPath">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchAllFilesInPath.Delimiter">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="SearchAllFilesInPath.Flags">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindDiskFilename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindDiskFilename.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindDiskFilename.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindDiskFileCaseInsensitive">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindDiskFileCaseInsensitive.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindDiskFileCaseInsensitive.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindDefaultExecutablePath">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindDefaultExecutablePath.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindDefaultExecutablePath.Executable">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFileIterator">
        <short>Class for getting info about found file or directory.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileIterator.FPath">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileIterator.FLevel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileIterator.FFileInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileIterator.FSearching">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TFileIterator.GetFileName">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFileIterator.GetFileName.Result">
        <short/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFileIterator.Stop">
        <short>Stops the searching process.</short>
        <descr/>
        <errors/>
        <seealso>
          <link id="TFileSearcher.Search"/>
        </seealso>
      </element>
      <!-- function Visibility: public -->
      <element name="TFileIterator.IsDirectory">
        <short>If the current file is directory.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TFileIterator.IsDirectory.Result">
        <short/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileIterator.FileName">
        <short>Gets the current file name.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileIterator.FileInfo">
        <short>Gets the current file info.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileIterator.Level">
        <short>Gets the current file path level relative to base search path.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileIterator.Path">
        <short>Gets the current file path.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileIterator.Searching">
        <short>If the searching is in process.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TFileFoundEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileFoundEvent.FileIterator">
        <short/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDirectoryFoundEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDirectoryFoundEvent.FileIterator">
        <short/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFileSearcher">
        <short>Class for searching files.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileSearcher.FOnFileFound">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TFileSearcher.FOnDirectoryFound">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TFileSearcher.RaiseSearchingError">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileSearcher.DoDirectoryEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileSearcher.DoDirectoryFound">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFileSearcher.DoFileFound">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFileSearcher.Create">
        <short>Creates new file searcher object.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TFileSearcher.Search">
        <short>Searches for files in specified path with passed options.</short>
        <descr>Searches for files in specified path. When file is found the OnFileFound event is invoked, for directories
		  OnDirectoryFound event. You can abort searching process by calling Stop method in this events.
		</descr>
        <errors/>
        <seealso>
          <link id="TFileSearcher.OnFileFound"/>
          <link id="TFileSearcher.OnDirectoryFound"/>
          <link id="TFileIterator.Stop"/>
        </seealso>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileSearcher.Search.ASearchPath">
        <short>Base path for searching files.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileSearcher.Search.ASearchMask">
        <short>Mask which file should match.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFileSearcher.Search.ASearchSubDirs">
        <short>If search recursively sub directories.</short>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileSearcher.OnDirectoryFound">
        <short>Is invoked when directory is found.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TFileSearcher.OnFileFound">
        <short>Is invoked when file is found.</short>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: default -->
      <element name="FindAllFiles">
        <short>Returns the list of found files in the specified path according to passed options.</short>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="FindAllFiles.Result">
        <short>List of found files.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindAllFiles.SearchPath">
        <short>Base path for searching files.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindAllFiles.SearchMask">
        <short>Mask which file should match.</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="FindAllFiles.SearchSubDirs">
        <short>If search recursively sub directories.</short>
      </element>
      <!-- function Visibility: default -->
      <element name="ReadFileToString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="ReadFileToString.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="ReadFileToString.Filename">
        <short/>
      </element>
      <!-- function Visibility: default -->
      <element name="CopyFile">
        <short>
          <var>CopyFile</var> - copies Source file to Destination file, optionally preserving the time stamp of the original file</short>
        <errors>An exception is raised if the Copy process does not complete successfully or correctly</errors>
      </element>
      <!-- function result Visibility: default -->
      <element name="CopyFile.Result">
        <short>Returns True if successful, False if there was an error</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CopyFile.SrcFilename">
        <short>The source filename for the Copy</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CopyFile.DestFilename">
        <short>The destination filename for the Copy</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="CopyFile.PreserveTime">
        <short>If True, the time stamp of the original file is preserved in the copied file</short>
      </element>
      <!-- function Visibility: default -->
      <element name="GetTempFilename">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="GetTempFilename.Result">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTempFilename.Directory">
        <short/>
      </element>
      <!-- argument Visibility: default -->
      <element name="GetTempFilename.Prefix">
        <short/>
      </element>
    </module>
    <!-- FileUtil -->
  </package>
</fpdoc-descriptions>
